OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Kept original item:		
Found table content:	 .name, .age 	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Creating diff. Start:	697	End:	712	
New text:	{ name = true, age = true }	
Returning diffs count:	2	
OnSetText called with text:	---@meta coroutine

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine"])
---
---@class coroutinelib
coroutine = {}

---
---Creates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `"thread"`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.create"])
---
---@param f async fun(...):...
---@return thread
---@nodiscard
function coroutine.create(f) end

---
---Returns true when the coroutine `co` can yield. The default for `co` is the running coroutine.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.isyieldable"])
---
---@param co? thread
---@return boolean
---@nodiscard
function coroutine.isyieldable(co) end

---@version >5.4
---
---Closes coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.close"])
---
---@param co thread
---@return boolean noerror
---@return any errorobject
function coroutine.close(co) end

---
---Starts or continues the execution of coroutine `co`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.resume"])
---
---@param co    thread
---@param val1? any
---@return boolean success
---@return any ...
function coroutine.resume(co, val1, ...) end

---
---Returns the running coroutine plus a boolean, true when the running coroutine is the main one.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.running"])
---
---@return thread running
---@return boolean ismain
---@nodiscard
function coroutine.running() end

---
---Returns the status of coroutine `co`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.status"])
---
---@param co thread
---@return
---| '"running"'   # Is running.
---| '"suspended"' # Is suspended or not started.
---| '"normal"'    # Is active but not running.
---| '"dead"'      # Has finished or stopped with an error.
---@nodiscard
function coroutine.status(co) end

---
---Creates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.wrap"])
---
---@param f async fun(...):...
---@return fun(...):...
---@nodiscard
function coroutine.wrap(f) end

---
---Suspends the execution of the calling coroutine.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.yield"])
---
---@async
---@return any ...
function coroutine.yield(...) end

return coroutine
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/coroutine.lua	
OnSetText called with text:	---@meta package

---
---Loads the given module, returns any value returned by the searcher(`true` when `nil`). Besides that value, also returns as a second result the loader data returned by the searcher, which indicates how `require` found the module. (For instance, if the module came from a file, this loader data is the file path.)
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-require"])
---
---@param modname string
---@return unknown
---@return unknown loaderdata
function require(modname) end

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package"])
---
---@class packagelib
---
---The path used by `require` to search for a C loader.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.cpath"])
---
---@field cpath     string
---
---A table used by `require` to control which modules are already loaded.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.loaded"])
---
---@field loaded    table
---
---The path used by `require` to search for a Lua loader.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.path"])
---
---@field path      string
---
---A table to store loaders for specific modules.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.preload"])
---
---@field preload   table
package = {}

---
---A string describing some compile-time configurations for packages.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.config"])
---
package.config = [[
/
;
?
!
-]]

---@version <5.1
---
---A table used by `require` to control how to load modules.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.loaders"])
---
package.loaders = {}

---
---Dynamically links the host program with the C library `libname`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.loadlib"])
---
---@param libname string
---@param funcname string
---@return any
function package.loadlib(libname, funcname) end

---
---A table used by `require` to control how to load modules.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.searchers"])
---
---@version >5.2
package.searchers = {}

---
---Searches for the given `name` in the given `path`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.searchpath"])
---
---@version >5.2,JIT
---@param name string
---@param path string
---@param sep? string
---@param rep? string
---@return string? filename
---@return string? errmsg
---@nodiscard
function package.searchpath(name, path, sep, rep) end

---
---Sets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.seeall"])
---
---@version <5.1
---@param module table
function package.seeall(module) end

return package
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/package.lua	
OnSetText called with text:	---@meta string

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string"])
---
---@class stringlib
string = {}

---
---Returns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.byte"])
---
---@param s  string|number
---@param i? integer
---@param j? integer
---@return integer ...
---@nodiscard
function string.byte(s, i, j) end

---
---Returns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.char"])
---
---@param byte integer
---@param ... integer
---@return string
---@nodiscard
function string.char(byte, ...) end

---
---Returns a string containing a binary representation (a *binary chunk*) of the given function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.dump"])
---
---@param f      async fun(...):...
---@param strip? boolean
---@return string
---@nodiscard
function string.dump(f, strip) end

---
---Miss locale <string.find>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.find"])
---
---@param s       string|number
---@param pattern string|number
---@param init?   integer
---@param plain?  boolean
---@return integer|nil start
---@return integer|nil end
---@return any|nil ... captured
---@nodiscard
function string.find(s, pattern, init, plain) end

---
---Returns a formatted version of its variable number of arguments following the description given in its first argument.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.format"])
---
---@param s string|number
---@param ... any
---@return string
---@nodiscard
function string.format(s, ...) end

---
---Miss locale <string.gmatch>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.gmatch"])
---
---@param s       string|number
---@param pattern string|number
---@param init?   integer
---@return fun():string, ...
function string.gmatch(s, pattern, init) end

---
---Miss locale <string.gsub>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.gsub"])
---
---@param s       string|number
---@param pattern string|number
---@param repl    string|number|table|function
---@param n?      integer
---@return string
---@return integer count
function string.gsub(s, pattern, repl, n) end

---
---Returns its length.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.len"])
---
---@param s string|number
---@return integer
---@nodiscard
function string.len(s) end

---
---Returns a copy of this string with all uppercase letters changed to lowercase.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.lower"])
---
---@param s string|number
---@return string
---@nodiscard
function string.lower(s) end

---
---Miss locale <string.match>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.match"])
---
---@param s       string|number
---@param pattern string|number
---@param init?   integer
---@return any ...
---@nodiscard
function string.match(s, pattern, init) end

---@version >5.3
---
---Miss locale <string.pack>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.pack"])
---
---@param fmt string
---@param v1  string|number
---@param v2? string|number
---@param ... string|number
---@return string binary
---@nodiscard
function string.pack(fmt, v1, v2, ...) end

---@version >5.3
---
---Miss locale <string.packsize>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.packsize"])
---
---@param fmt string
---@return integer
---@nodiscard
function string.packsize(fmt) end

---
---Returns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.rep"])
---
---@param s    string|number
---@param n    integer
---@param sep? string|number
---@return string
---@nodiscard
function string.rep(s, n, sep) end

---
---Returns a string that is the string `s` reversed.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.reverse"])
---
---@param s string|number
---@return string
---@nodiscard
function string.reverse(s) end

---
---Returns the substring of the string that starts at `i` and continues until `j`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.sub"])
---
---@param s  string|number
---@param i  integer
---@param j? integer
---@return string
---@nodiscard
function string.sub(s, i, j) end

---@version >5.3
---
---Returns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?["en-us/54/manual.html/6.4.2"])) .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.unpack"])
---
---@param fmt  string
---@param s    string
---@param pos? integer
---@return any ...
---@nodiscard
function string.unpack(fmt, s, pos) end

---
---Returns a copy of this string with all lowercase letters changed to uppercase.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.upper"])
---
---@param s string|number
---@return string
---@nodiscard
function string.upper(s) end

return string
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/string.lua	
OnSetText called with text:	---@meta _

---@class unknown
---@class any
---@class nil
---@class boolean
---@class true: boolean
---@class false: boolean
---@class number
---@class integer: number
---@class thread
---@class table<K, V>: { [K]: V }
---@class string: stringlib
---@class userdata
---@class lightuserdata
---@class function
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/builtin.lua	
OnSetText called with text:	---@meta debug

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug"])
---
---@class debuglib
debug = {}

---@class debuginfo
---@field name            string
---@field namewhat        string
---@field source          string
---@field short_src       string
---@field linedefined     integer
---@field lastlinedefined integer
---@field what            string
---@field currentline     integer
---@field istailcall      boolean
---@field nups            integer
---@field nparams         integer
---@field isvararg        boolean
---@field func            function
---@field ftransfer       integer
---@field ntransfer       integer
---@field activelines     table

---
---Enters an interactive mode with the user, running each string that the user enters.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.debug"])
---
function debug.debug() end

---@version 5.1
---
---Returns the environment of object `o` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getfenv"])
---
---@param o any
---@return table
---@nodiscard
function debug.getfenv(o) end

---
---Returns the current hook settings of the thread.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.gethook"])
---
---@param co? thread
---@return function hook
---@return string mask
---@return integer count
---@nodiscard
function debug.gethook(co) end

---@alias infowhat string
---|+"n"     # `name` and `namewhat`
---|+"S"     # `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`
---|+"l"     # `currentline`
---|+"t"     # `istailcall`
---|+"u" # `nups`, `nparams`, and `isvararg`
---|+"f"     # `func`
---|+"r"     # `ftransfer` and `ntransfer`
---|+"L"     # `activelines`

---
---Returns a table with information about a function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getinfo"])
---
---@overload fun(f: integer|function, what?: infowhat):debuginfo
---@param thread thread
---@param f      integer|async fun(...):...
---@param what?  infowhat
---@return debuginfo
---@nodiscard
function debug.getinfo(thread, f, what) end

---
---Returns the name and the value of the local variable with index `local` of the function at level `f` of the stack.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getlocal"])
---
---@overload fun(f: integer|async fun(...):..., index: integer):string, any
---@param thread  thread
---@param f       integer|async fun(...):...
---@param index   integer
---@return string name
---@return any    value
---@nodiscard
function debug.getlocal(thread, f, index) end

---
---Returns the metatable of the given value.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getmetatable"])
---
---@param object any
---@return table metatable
---@nodiscard
function debug.getmetatable(object) end

---
---Returns the registry table.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getregistry"])
---
---@return table
---@nodiscard
function debug.getregistry() end

---
---Returns the name and the value of the upvalue with index `up` of the function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getupvalue"])
---
---@param f  async fun(...):...
---@param up integer
---@return string name
---@return any    value
---@nodiscard
function debug.getupvalue(f, up) end

---
---Returns the `n`-th user value associated
---to the userdata `u` plus a boolean,
---`false` if the userdata does not have that value.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getuservalue"])
---
---@param u  userdata
---@param n? integer
---@return any
---@return boolean
---@nodiscard
function debug.getuservalue(u, n) end

---
---### **Deprecated in `Lua 5.4.2`**
---
---Sets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.
---
---In case of success, this function returns the old limit. In case of error, it returns `false`.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setcstacklimit"])
---
---@deprecated
---@param limit integer
---@return integer|boolean
function debug.setcstacklimit(limit) end

---
---Sets the environment of the given `object` to the given `table` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setfenv"])
---
---@version 5.1
---@generic T
---@param object T
---@param env    table
---@return T object
function debug.setfenv(object, env) end

---@alias hookmask string
---|+"c" # Calls hook when Lua calls a function.
---|+"r" # Calls hook when Lua returns from a function.
---|+"l" # Calls hook when Lua enters a new line of code.

---
---Sets the given function as a hook.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.sethook"])
---
---@overload fun(hook: (async fun(...):...), mask: hookmask, count?: integer)
---@overload fun(thread: thread):...
---@overload fun(...):...
---@param thread thread
---@param hook   async fun(...):...
---@param mask   hookmask
---@param count? integer
function debug.sethook(thread, hook, mask, count) end

---
---Assigns the `value` to the local variable with index `local` of the function at `level` of the stack.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setlocal"])
---
---@overload fun(level: integer, index: integer, value: any):string
---@param thread thread
---@param level  integer
---@param index  integer
---@param value  any
---@return string name
function debug.setlocal(thread, level, index, value) end

---
---Sets the metatable for the given value to the given table (which can be `nil`).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setmetatable"])
---
---@generic T
---@param value T
---@param meta? table
---@return T value
function debug.setmetatable(value, meta) end

---
---Assigns the `value` to the upvalue with index `up` of the function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setupvalue"])
---
---@param f     async fun(...):...
---@param up    integer
---@param value any
---@return string name
function debug.setupvalue(f, up, value) end

---
---Sets the given `value` as
---the `n`-th user value associated to the given `udata`.
---`udata` must be a full userdata.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setuservalue"])
---
---@param udata userdata
---@param value any
---@param n?    integer
---@return userdata udata
function debug.setuservalue(udata, value, n) end

---
---Returns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.traceback"])
---
---@overload fun(message?: any, level?: integer): string
---@param thread   thread
---@param message? any
---@param level?   integer
---@return string  message
---@nodiscard
function debug.traceback(thread, message, level) end

---@version >5.2, JIT
---
---Returns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.upvalueid"])
---
---@param f async fun(...):...
---@param n integer
---@return lightuserdata id
---@nodiscard
function debug.upvalueid(f, n) end

---@version >5.2, JIT
---
---Make the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.upvaluejoin"])
---
---@param f1 async fun(...):...
---@param n1 integer
---@param f2 async fun(...):...
---@param n2 integer
function debug.upvaluejoin(f1, n1, f2, n2) end

return debug
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/debug.lua	
OnSetText called with text:	---@meta os

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os"])
---
---@class oslib
os = {}

---
---Returns an approximation of the amount in seconds of CPU time used by the program.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.clock"])
---
---@return number
---@nodiscard
function os.clock() end

---@class osdate:osdateparam
---
---four digits
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.year"])
---
---@field year  integer|string
---
---1-12
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.month"])
---
---@field month integer|string
---
---1-31
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.day"])
---
---@field day   integer|string
---
---0-23
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.hour"])
---
---@field hour  integer|string
---
---0-59
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.min"])
---
---@field min   integer|string
---
---0-61
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.sec"])
---
---@field sec   integer|string
---
---weekday, 1–7, Sunday is 1
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.wday"])
---
---@field wday  integer|string
---
---day of the year, 1–366
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.yday"])
---
---@field yday  integer|string
---
---daylight saving flag, a boolean
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.isdst"])
---
---@field isdst boolean

---
---Returns a string or a table containing date and time, formatted according to the given string `format`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.date"])
---
---@param format? string
---@param time?   integer
---@return string|osdate
---@nodiscard
function os.date(format, time) end

---
---Returns the difference, in seconds, from time `t1` to time `t2`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.difftime"])
---
---@param t2 integer
---@param t1 integer
---@return integer
---@nodiscard
function os.difftime(t2, t1) end

---
---Passes `command` to be executed by an operating system shell.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.execute"])
---
---@param command? string
---@return boolean?  suc
---@return exitcode? exitcode
---@return integer?  code
function os.execute(command) end

---
---Calls the ISO C function `exit` to terminate the host program.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.exit"])
---
---@param code?  boolean|integer
---@param close? boolean
function os.exit(code, close) end

---
---Returns the value of the process environment variable `varname`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.getenv"])
---
---@param varname string
---@return string?
---@nodiscard
function os.getenv(varname) end

---
---Deletes the file with the given name.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.remove"])
---
---@param filename string
---@return boolean suc
---@return string? errmsg
function os.remove(filename) end

---
---Renames the file or directory named `oldname` to `newname`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.rename"])
---
---@param oldname string
---@param newname string
---@return boolean suc
---@return string? errmsg
function os.rename(oldname, newname) end

---@alias localecategory
---|>"all"
---| "collate"
---| "ctype"
---| "monetary"
---| "numeric"
---| "time"

---
---Sets the current locale of the program.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.setlocale"])
---
---@param locale    string|nil
---@param category? localecategory
---@return string localecategory
function os.setlocale(locale, category) end

---@class osdateparam
---
---four digits
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.year"])
---
---@field year  integer|string
---
---1-12
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.month"])
---
---@field month integer|string
---
---1-31
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.day"])
---
---@field day   integer|string
---
---0-23
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.hour"])
---
---@field hour  (integer|string)?
---
---0-59
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.min"])
---
---@field min   (integer|string)?
---
---0-61
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.sec"])
---
---@field sec   (integer|string)?
---
---weekday, 1–7, Sunday is 1
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.wday"])
---
---@field wday  (integer|string)?
---
---day of the year, 1–366
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.yday"])
---
---@field yday  (integer|string)?
---
---daylight saving flag, a boolean
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.isdst"])
---
---@field isdst boolean?

---
---Returns the current time when called without arguments, or a time representing the local date and time specified by the given table.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.time"])
---
---@param date? osdateparam
---@return integer
---@nodiscard
function os.time(date) end

---
---Returns a string with a file name that can be used for a temporary file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.tmpname"])
---
---@return string
---@nodiscard
function os.tmpname() end

return os
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/os.lua	
OnSetText called with text:	---@meta io

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io"])
---
---@class iolib
---
---standard input.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.stdin"])
---
---@field stdin  file*
---
---standard output.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.stdout"])
---
---@field stdout file*
---
---standard error.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.stderr"])
---
---@field stderr file*
io = {}

---@alias openmode
---|>"r"   # Read mode.
---| "w"   # Write mode.
---| "a"   # Append mode.
---| "r+"  # Update mode, all previous data is preserved.
---| "w+"  # Update mode, all previous data is erased.
---| "a+"  # Append update mode, previous data is preserved, writing is only allowed at the end of file.
---| "rb"  # Read mode. (in binary mode.)
---| "wb"  # Write mode. (in binary mode.)
---| "ab"  # Append mode. (in binary mode.)
---| "r+b" # Update mode, all previous data is preserved. (in binary mode.)
---| "w+b" # Update mode, all previous data is erased. (in binary mode.)
---| "a+b" # Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)

---
---Close `file` or default output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.close"])
---
---@param file? file*
---@return boolean?  suc
---@return exitcode? exitcode
---@return integer?  code
function io.close(file) end

---
---Saves any written data to default output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.flush"])
---
function io.flush() end

---
---Sets `file` as the default input file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.input"])
---
---@overload fun():file*
---@param file string|file*
function io.input(file) end

---
---------
---```lua
---for c in io.lines(filename, ...) do
---    body
---end
---```
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.lines"])
---
---@param filename string?
---@param ... readmode
---@return fun():any, ...
function io.lines(filename, ...) end

---
---Opens a file, in the mode specified in the string `mode`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.open"])
---
---@param filename string
---@param mode?    openmode
---@return file*?
---@return string? errmsg
---@nodiscard
function io.open(filename, mode) end

---
---Sets `file` as the default output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.output"])
---
---@overload fun():file*
---@param file string|file*
function io.output(file) end

---@alias popenmode
---| "r" # Read data from this program by `file`.
---| "w" # Write data to this program by `file`.

---
---Starts program prog in a separated process.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.popen"])
---
---@param prog  string
---@param mode? popenmode
---@return file*?
---@return string? errmsg
function io.popen(prog, mode) end

---
---Reads the `file`, according to the given formats, which specify what to read.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.read"])
---
---@param ... readmode
---@return any
---@return any ...
---@nodiscard
function io.read(...) end

---
---In case of success, returns a handle for a temporary file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.tmpfile"])
---
---@return file*
---@nodiscard
function io.tmpfile() end

---@alias filetype
---| "file"        # Is an open file handle.
---| "closed file" # Is a closed file handle.
---| `nil`         # Is not a file handle.

---
---Checks whether `obj` is a valid file handle.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.type"])
---
---@param file file*
---@return filetype
---@nodiscard
function io.type(file) end

---
---Writes the value of each of its arguments to default output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.write"])
---
---@return file*
---@return string? errmsg
function io.write(...) end

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file"])
---
---@class file*
local file = {}

---@alias readmode integer|string
---| "n"  # Reads a numeral and returns it as number.
---| "a"  # Reads the whole file.
---|>"l"  # Reads the next line skipping the end of line.
---| "L"  # Reads the next line keeping the end of line.

---@alias exitcode "exit"|"signal"

---
---Close `file`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:close"])
---
---@return boolean?  suc
---@return exitcode? exitcode
---@return integer?  code
function file:close() end

---
---Saves any written data to `file`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:flush"])
---
function file:flush() end

---
---------
---```lua
---for c in file:lines(...) do
---    body
---end
---```
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:lines"])
---
---@param ... readmode
---@return fun():any, ...
function file:lines(...) end

---
---Reads the `file`, according to the given formats, which specify what to read.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:read"])
---
---@param ... readmode
---@return any
---@return any ...
---@nodiscard
function file:read(...) end

---@alias seekwhence
---| "set" # Base is beginning of the file.
---|>"cur" # Base is current position.
---| "end" # Base is end of file.

---
---Sets and gets the file position, measured from the beginning of the file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:seek"])
---
---@param whence? seekwhence
---@param offset? integer
---@return integer offset
---@return string? errmsg
function file:seek(whence, offset) end

---@alias vbuf
---| "no"   # Output operation appears immediately.
---| "full" # Performed only when the buffer is full.
---| "line" # Buffered until a newline is output.

---
---Sets the buffering mode for an output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:setvbuf"])
---
---@param mode vbuf
---@param size? integer
function file:setvbuf(mode, size) end

---
---Writes the value of each of its arguments to `file`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:write"])
---
---@param ... string|number
---@return file*?
---@return string? errmsg
function file:write(...) end

return io
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/io.lua	
OnSetText called with text:	---@meta table

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table"])
---
---@class tablelib
table = {}

---
---Given a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ··· sep..list[j]`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.concat"])
---
---@param list table
---@param sep? string
---@param i?   integer
---@param j?   integer
---@return string
---@nodiscard
function table.concat(list, sep, i, j) end

---
---Inserts element `value` at position `pos` in `list`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.insert"])
---
---@overload fun(list: table, value: any)
---@param list table
---@param pos integer
---@param value any
function table.insert(list, pos, value) end

---@version <5.1
---
---Returns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.maxn"])
---
---@param table table
---@return integer
---@nodiscard
function table.maxn(table) end

---@version >5.3, JIT
---
---Moves elements from table `a1` to table `a2`.
---```lua
---a2[t],··· =
---a1[f],···,a1[e]
---return a2
---```
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.move"])
---
---@param a1  table
---@param f   integer
---@param e   integer
---@param t   integer
---@param a2? table
---@return table a2
function table.move(a1, f, e, t, a2) end

---@version >5.2, JIT
---
---Returns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `"n"` with the total number of arguments.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.pack"])
---
---@return table
---@nodiscard
function table.pack(...) end

---
---Removes from `list` the element at position `pos`, returning the value of the removed element.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.remove"])
---
---@param list table
---@param pos? integer
---@return any
function table.remove(list, pos) end

---
---Sorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.sort"])
---
---@generic T
---@param list T[]
---@param comp? fun(a: T, b: T):boolean
function table.sort(list, comp) end

---@version >5.2, JIT
---
---Returns the elements from the given list. This function is equivalent to
---```lua
---    return list[i], list[i+1], ···, list[j]
---```
---By default, `i` is `1` and `j` is `#list`.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.unpack"])
---
---@generic T1, T2, T3, T4, T5, T6, T7, T8, T9, T10
---@param list {
--- [1]?: T1,
--- [2]?: T2,
--- [3]?: T3,
--- [4]?: T4,
--- [5]?: T5,
--- [6]?: T6,
--- [7]?: T7,
--- [8]?: T8,
--- [9]?: T9,
--- [10]?: T10,
---}
---@param i?   integer
---@param j?   integer
---@return T1, T2, T3, T4, T5, T6, T7, T8, T9, T10
---@nodiscard
function table.unpack(list, i, j) end

---@version <5.1, JIT
---
---Executes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.foreach"])
---
---@generic T
---@param list any
---@param callback fun(key: string, value: any):T|nil
---@return T|nil
---@deprecated
function table.foreach(list, callback) end

---@version <5.1, JIT
---
---Executes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.foreachi"])
---
---@generic T
---@param list any
---@param callback fun(key: string, value: any):T|nil
---@return T|nil
---@deprecated
function table.foreachi(list, callback) end

---@version <5.1, JIT
---
---Returns the number of elements in the table. This function is equivalent to `#list`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.getn"])
---
---@generic T
---@param list T[]
---@return integer
---@nodiscard
---@deprecated
function table.getn(list) end

return table
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/table.lua	
OnSetText called with text:	---@meta math

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math"])
---
---@class mathlib
---
---A value larger than any other numeric value.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.huge"])
---
---@field huge       number
---
---Miss locale <math.maxinteger>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.maxinteger"])
---
---@field maxinteger integer
---
---Miss locale <math.mininteger>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.mininteger"])
---
---@field mininteger integer
---
---The value of *π*.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.pi"])
---
---@field pi         number
math = {}

---
---Returns the absolute value of `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.abs"])
---
---@generic Number: number
---@param x Number
---@return Number
---@nodiscard
function math.abs(x) end

---
---Returns the arc cosine of `x` (in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.acos"])
---
---@param x number
---@return number
---@nodiscard
function math.acos(x) end

---
---Returns the arc sine of `x` (in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.asin"])
---
---@param x number
---@return number
---@nodiscard
function math.asin(x) end

---
---Returns the arc tangent of `y/x` (in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.atan"])
---
---@param y  number
---@param x? number
---@return number
---@nodiscard
function math.atan(y, x) end

---@version <5.2
---
---Returns the arc tangent of `y/x` (in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.atan2"])
---
---@param y number
---@param x number
---@return number
---@nodiscard
function math.atan2(y, x) end

---
---Returns the smallest integral value larger than or equal to `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.ceil"])
---
---@param x number
---@return integer
---@nodiscard
function math.ceil(x) end

---
---Returns the cosine of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.cos"])
---
---@param x number
---@return number
---@nodiscard
function math.cos(x) end

---@version <5.2
---
---Returns the hyperbolic cosine of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.cosh"])
---
---@param x number
---@return number
---@nodiscard
function math.cosh(x) end

---
---Converts the angle `x` from radians to degrees.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.deg"])
---
---@param x number
---@return number
---@nodiscard
function math.deg(x) end

---
---Returns the value `e^x` (where `e` is the base of natural logarithms).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.exp"])
---
---@param x number
---@return number
---@nodiscard
function math.exp(x) end

---
---Returns the largest integral value smaller than or equal to `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.floor"])
---
---@param x number
---@return integer
---@nodiscard
function math.floor(x) end

---
---Returns the remainder of the division of `x` by `y` that rounds the quotient towards zero.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.fmod"])
---
---@param x number
---@param y number
---@return number
---@nodiscard
function math.fmod(x, y) end

---@version <5.2
---
---Decompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.frexp"])
---
---@param x number
---@return number m
---@return number e
---@nodiscard
function math.frexp(x) end

---@version <5.2
---
---Returns `m * (2 ^ e)` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.ldexp"])
---
---@param m number
---@param e number
---@return number
---@nodiscard
function math.ldexp(m, e) end

---
---Returns the logarithm of `x` in the given base.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.log"])
---
---@param x     number
---@param base? integer
---@return number
---@nodiscard
function math.log(x, base) end

---@version <5.1
---
---Returns the base-10 logarithm of x.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.log10"])
---
---@param x number
---@return number
---@nodiscard
function math.log10(x) end

---
---Returns the argument with the maximum value, according to the Lua operator `<`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.max"])
---
---@generic Number: number
---@param x Number
---@param ... Number
---@return Number
---@nodiscard
function math.max(x, ...) end

---
---Returns the argument with the minimum value, according to the Lua operator `<`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.min"])
---
---@generic Number: number
---@param x Number
---@param ... Number
---@return Number
---@nodiscard
function math.min(x, ...) end

---
---Returns the integral part of `x` and the fractional part of `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.modf"])
---
---@param x number
---@return integer
---@return number
---@nodiscard
function math.modf(x) end

---@version <5.2
---
---Returns `x ^ y` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.pow"])
---
---@param x number
---@param y number
---@return number
---@nodiscard
function math.pow(x, y) end

---
---Converts the angle `x` from degrees to radians.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.rad"])
---
---@param x number
---@return number
---@nodiscard
function math.rad(x) end

---
---* `math.random()`: Returns a float in the range [0,1).
---* `math.random(n)`: Returns a integer in the range [1, n].
---* `math.random(m, n)`: Returns a integer in the range [m, n].
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.random"])
---
---@overload fun():number
---@overload fun(m: integer):integer
---@param m integer
---@param n integer
---@return integer
---@nodiscard
function math.random(m, n) end

---
---* `math.randomseed(x, y)`: Concatenate `x` and `y` into a 128-bit `seed` to reinitialize the pseudo-random generator.
---* `math.randomseed(x)`: Equate to `math.randomseed(x, 0)` .
---* `math.randomseed()`: Generates a seed with a weak attempt for randomness.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.randomseed"])
---
---@param x? integer
---@param y? integer
function math.randomseed(x, y) end

---
---Returns the sine of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.sin"])
---
---@param x number
---@return number
---@nodiscard
function math.sin(x) end

---@version <5.2
---
---Returns the hyperbolic sine of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.sinh"])
---
---@param x number
---@return number
---@nodiscard
function math.sinh(x) end

---
---Returns the square root of `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.sqrt"])
---
---@param x number
---@return number
---@nodiscard
function math.sqrt(x) end

---
---Returns the tangent of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.tan"])
---
---@param x number
---@return number
---@nodiscard
function math.tan(x) end

---@version <5.2
---
---Returns the hyperbolic tangent of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.tanh"])
---
---@param x number
---@return number
---@nodiscard
function math.tanh(x) end

---@version >5.3
---
---Miss locale <math.tointeger>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.tointeger"])
---
---@param x any
---@return integer?
---@nodiscard
function math.tointeger(x) end

---@version >5.3
---
---Miss locale <math.type>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.type"])
---
---@param x any
---@return
---| '"integer"'
---| '"float"'
---| 'nil'
---@nodiscard
function math.type(x) end

---@version >5.3
---
---Miss locale <math.ult>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.ult"])
---
---@param m integer
---@param n integer
---@return boolean
---@nodiscard
function math.ult(m, n) end

return math
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua	
OnSetText called with text:	---@meta utf8

---@version >5.3
---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8"])
---
---@class utf8lib
---
---The pattern which matches exactly one UTF-8 byte sequence, assuming that the subject is a valid UTF-8 string.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.charpattern"])
---
---@field charpattern string
utf8 = {}

---
---Receives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.char"])
---
---@param code integer
---@param ... integer
---@return string
---@nodiscard
function utf8.char(code, ...) end

---
---Returns values so that the construction
---```lua
---for p, c in utf8.codes(s) do
---    body
---end
---```
---will iterate over all UTF-8 characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.codes"])
---
---@param s    string
---@param lax? boolean
---@return fun(s: string, p: integer):integer, integer
function utf8.codes(s, lax) end

---
---Returns the codepoints (as integers) from all characters in `s` that start between byte position `i` and `j` (both included).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.codepoint"])
---
---@param s    string
---@param i?   integer
---@param j?   integer
---@param lax? boolean
---@return integer code
---@return integer ...
---@nodiscard
function utf8.codepoint(s, i, j, lax) end

---
---Returns the number of UTF-8 characters in string `s` that start between positions `i` and `j` (both inclusive).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.len"])
---
---@param s    string
---@param i?   integer
---@param j?   integer
---@param lax? boolean
---@return integer?
---@return integer? errpos
---@nodiscard
function utf8.len(s, i, j, lax) end

---
---Returns the position (in bytes) where the encoding of the `n`-th character of `s` (counting from position `i`) starts.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.offset"])
---
---@param s string
---@param n integer
---@param i? integer
---@return integer p
---@nodiscard
function utf8.offset(s, n, i) end

return utf8
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/utf8.lua	
OnSetText called with text:	---@meta _

---
---Command-line arguments of Lua Standalone.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-arg"])
---
---@type string[]
arg = {}

---
---Raises an error if the value of its argument v is false (i.e., `nil` or `false`); otherwise, returns all its arguments. In case of error, `message` is the error object; when absent, it defaults to `"assertion failed!"`
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-assert"])
---
---@generic T
---@param v? T
---@param message? any
---@param ... any
---@return T
---@return any ...
function assert(v, message, ...) end

---@alias gcoptions
---|>"collect"      # Performs a full garbage-collection cycle.
---| "stop"         # Stops automatic execution.
---| "restart"      # Restarts automatic execution.
---| "count"        # Returns the total memory in Kbytes.
---| "step"         # Performs a garbage-collection step.
---| "isrunning"    # Returns whether the collector is running.
---| "incremental"  # Change the collector mode to incremental.
---| "generational" # Change the collector mode to generational.

---
---This function is a generic interface to the garbage collector. It performs different functions according to its first argument, `opt`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-collectgarbage"])
---
---@param opt? gcoptions
---@param ... any
---@return any
function collectgarbage(opt, ...) end

---
---Opens the named file and executes its content as a Lua chunk. When called without arguments, `dofile` executes the content of the standard input (`stdin`). Returns all values returned by the chunk. In case of errors, `dofile` propagates the error to its caller. (That is, `dofile` does not run in protected mode.)
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-dofile"])
---
---@param filename? string
---@return any ...
function dofile(filename) end

---
---Terminates the last protected function called and returns message as the error object.
---
---Usually, `error` adds some information about the error position at the beginning of the message, if the message is a string.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-error"])
---
---@param message any
---@param level?  integer
function error(message, level) end

---
---A global variable (not a function) that holds the global environment (see [§2.2](command:extension.lua.doc?["en-us/54/manual.html/2.2"])). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-_G"])
---
---@class _G
_G = {}

---@version 5.1
---
---Returns the current environment in use by the function. `f` can be a Lua function or a number that specifies the function at that stack level.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-getfenv"])
---
---@param f? integer|async fun(...):...
---@return table
---@nodiscard
function getfenv(f) end

---
---If object does not have a metatable, returns nil. Otherwise, if the object's metatable has a __metatable field, returns the associated value. Otherwise, returns the metatable of the given object.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-getmetatable"])
---
---@param object any
---@return table metatable
---@nodiscard
function getmetatable(object) end

---
---Returns three values (an iterator function, the table `t`, and `0`) so that the construction
---```lua
---    for i,v in ipairs(t) do body end
---```
---will iterate over the key–value pairs `(1,t[1]), (2,t[2]), ...`, up to the first absent index.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-ipairs"])
---
---@generic T: table, V
---@param t T
---@return fun(table: V[], i?: integer):integer, V
---@return T
---@return integer i
function ipairs(t) end

---@alias loadmode
---| "b"  # Only binary chunks.
---| "t"  # Only text chunks.
---|>"bt" # Both binary and text.

---
---Loads a chunk.
---
---If `chunk` is a string, the chunk is this string. If `chunk` is a function, `load` calls it repeatedly to get the chunk pieces. Each call to `chunk` must return a string that concatenates with previous results. A return of an empty string, `nil`, or no value signals the end of the chunk.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-load"])
---
---@param chunk      string|function
---@param chunkname? string
---@param mode?      loadmode
---@param env?       table
---@return function?
---@return string?   error_message
---@nodiscard
function load(chunk, chunkname, mode, env) end

---
---Loads a chunk from file `filename` or from the standard input, if no file name is given.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-loadfile"])
---
---@param filename? string
---@param mode?     loadmode
---@param env?      table
---@return function?
---@return string?  error_message
---@nodiscard
function loadfile(filename, mode, env) end

---@version 5.1
---
---Loads a chunk from the given string.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-loadstring"])
---
---@param text       string
---@param chunkname? string
---@return function?
---@return string?   error_message
---@nodiscard
function loadstring(text, chunkname) end

---@version 5.1
---@param proxy boolean|table|userdata
---@return userdata
---@nodiscard
function newproxy(proxy) end

---@version 5.1
---
---Creates a module.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-module"])
---
---@param name string
---@param ...  any
function module(name, ...) end

---
---Allows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. A call to `next` returns the next index of the table and its associated value. When called with `nil` as its second argument, `next` returns an initial index and its associated value. When called with the last index, or with `nil` in an empty table, `next` returns `nil`. If the second argument is absent, then it is interpreted as `nil`. In particular, you can use `next(t)` to check whether a table is empty.
---
---The order in which the indices are enumerated is not specified, *even for numeric indices*. (To traverse a table in numerical order, use a numerical `for`.)
---
---The behavior of `next` is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may set existing fields to nil.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-next"])
---
---@generic K, V
---@param table table<K, V>
---@param index? K
---@return K?
---@return V?
---@nodiscard
function next(table, index) end

---
---If `t` has a metamethod `__pairs`, calls it with t as argument and returns the first three results from the call.
---
---Otherwise, returns three values: the [next](command:extension.lua.doc?["en-us/54/manual.html/pdf-next"]) function, the table `t`, and `nil`, so that the construction
---```lua
---    for k,v in pairs(t) do body end
---```
---will iterate over all key–value pairs of table `t`.
---
---See function [next](command:extension.lua.doc?["en-us/54/manual.html/pdf-next"]) for the caveats of modifying the table during its traversal.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-pairs"])
---
---@generic T: table, K, V
---@param t T
---@return fun(table: table<K, V>, index?: K):K, V
---@return T
function pairs(t) end

---
---Calls the function `f` with the given arguments in *protected mode*. This means that any error inside `f` is not propagated; instead, `pcall` catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, `pcall` also returns all results from the call, after this first result. In case of any error, `pcall` returns `false` plus the error object.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-pcall"])
---
---@param f     async fun(...):...
---@param arg1? any
---@param ...   any
---@return boolean success
---@return any result
---@return any ...
function pcall(f, arg1, ...) end

---
---Receives any number of arguments and prints their values to `stdout`, converting each argument to a string following the same rules of [tostring](command:extension.lua.doc?["en-us/54/manual.html/pdf-tostring"]).
---The function print is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use [string.format](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.format"]) and [io.write](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.write"]).
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-print"])
---
---@param ... any
function print(...) end

---
---Checks whether v1 is equal to v2, without invoking the `__eq` metamethod.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-rawequal"])
---
---@param v1 any
---@param v2 any
---@return boolean
---@nodiscard
function rawequal(v1, v2) end

---
---Gets the real value of `table[index]`, without invoking the `__index` metamethod.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-rawget"])
---
---@param table table
---@param index any
---@return any
---@nodiscard
function rawget(table, index) end

---
---Returns the length of the object `v`, without invoking the `__len` metamethod.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-rawlen"])
---
---@param v table|string
---@return integer len
---@nodiscard
function rawlen(v) end

---
---Sets the real value of `table[index]` to `value`, without using the `__newindex` metavalue. `table` must be a table, `index` any value different from `nil` and `NaN`, and `value` any Lua value.
---This function returns `table`.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-rawset"])
---
---@param table table
---@param index any
---@param value any
---@return table
function rawset(table, index, value) end

---
---If `index` is a number, returns all arguments after argument number `index`; a negative number indexes from the end (`-1` is the last argument). Otherwise, `index` must be the string `"#"`, and `select` returns the total number of extra arguments it received.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-select"])
---
---@param index integer|"#"
---@param ...   any
---@return any
---@nodiscard
function select(index, ...) end

---@version 5.1
---
---Sets the environment to be used by the given function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-setfenv"])
---
---@param f     (async fun(...):...)|integer
---@param table table
---@return function
function setfenv(f, table) end


---@class metatable
---@field __mode 'v'|'k'|'kv'|nil
---@field __metatable any|nil
---@field __tostring (fun(t):string)|nil
---@field __gc fun(t)|nil
---@field __add (fun(t1,t2):any)|nil
---@field __sub (fun(t1,t2):any)|nil
---@field __mul (fun(t1,t2):any)|nil
---@field __div (fun(t1,t2):any)|nil
---@field __mod (fun(t1,t2):any)|nil
---@field __pow (fun(t1,t2):any)|nil
---@field __unm (fun(t):any)|nil
---@field __idiv (fun(t1,t2):any)|nil
---@field __band (fun(t1,t2):any)|nil
---@field __bor (fun(t1,t2):any)|nil
---@field __bxor (fun(t1,t2):any)|nil
---@field __bnot (fun(t):any)|nil
---@field __shl (fun(t1,t2):any)|nil
---@field __shr (fun(t1,t2):any)|nil
---@field __concat (fun(t1,t2):any)|nil
---@field __len (fun(t):integer)|nil
---@field __eq (fun(t1,t2):boolean)|nil
---@field __lt (fun(t1,t2):boolean)|nil
---@field __le (fun(t1,t2):boolean)|nil
---@field __index table|(fun(t,k):any)|nil
---@field __newindex table|fun(t,k,v)|nil
---@field __call (fun(t,...):...)|nil
---@field __pairs (fun(t):((fun(t,k,v):any,any),any,any))|nil
---@field __close (fun(t,errobj):any)|nil

---
---Sets the metatable for the given table. If `metatable` is `nil`, removes the metatable of the given table. If the original metatable has a `__metatable` field, raises an error.
---
---This function returns `table`.
---
---To change the metatable of other types from Lua code, you must use the debug library ([§6.10](command:extension.lua.doc?["en-us/54/manual.html/6.10"])).
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-setmetatable"])
---
---@param table      table
---@param metatable? metatable|table
---@return table
function setmetatable(table, metatable) end

---
---When called with no `base`, `tonumber` tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then `tonumber` returns this number; otherwise, it returns `fail`.
---
---The conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see [§3.1](command:extension.lua.doc?["en-us/54/manual.html/3.1"])). The string may have leading and trailing spaces and a sign.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-tonumber"])
---
---@overload fun(e: string, base: integer):integer
---@param e any
---@return number?
---@nodiscard
function tonumber(e) end

---
---Receives a value of any type and converts it to a string in a human-readable format.
---
---If the metatable of `v` has a `__tostring` field, then `tostring` calls the corresponding value with `v` as argument, and uses the result of the call as its result. Otherwise, if the metatable of `v` has a `__name` field with a string value, `tostring` may use that string in its final result.
---
---For complete control of how numbers are converted, use [string.format](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.format"]).
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-tostring"])
---
---@param v any
---@return string
---@nodiscard
function tostring(v) end

---@alias type
---| "nil"
---| "number"
---| "string"
---| "boolean"
---| "table"
---| "function"
---| "thread"
---| "userdata"

---
---Returns the type of its only argument, coded as a string. The possible results of this function are `"nil"` (a string, not the value `nil`), `"number"`, `"string"`, `"boolean"`, `"table"`, `"function"`, `"thread"`, and `"userdata"`.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-type"])
---
---@param v any
---@return type type
---@nodiscard
function type(v) end

---
---A global variable (not a function) that holds a string containing the running Lua version.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-_VERSION"])
---
_VERSION = "Lua 5.4"

---@version >5.4
---
---Emits a warning with a message composed by the concatenation of all its arguments (which should be strings).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-warn"])
---
---@param message string
---@param ...     any
function warn(message, ...) end

---
---Calls function `f` with the given arguments in protected mode with a new message handler.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-xpcall"])
---
---@param f     async fun(...):...
---@param msgh  function
---@param arg1? any
---@param ...   any
---@return boolean success
---@return any result
---@return any ...
function xpcall(f, msgh, arg1, ...) end

---@version 5.1
---
---Returns the elements from the given `list`. This function is equivalent to
---```lua
---    return list[i], list[i+1], ···, list[j]
---```
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-unpack"])
---
---@generic T1, T2, T3, T4, T5, T6, T7, T8, T9, T10
---@param list {
--- [1]?: T1,
--- [2]?: T2,
--- [3]?: T3,
--- [4]?: T4,
--- [5]?: T5,
--- [6]?: T6,
--- [7]?: T7,
--- [8]?: T8,
--- [9]?: T9,
--- [10]?: T10,
---}
---@param i?   integer
---@param j?   integer
---@return T1, T2, T3, T4, T5, T6, T7, T8, T9, T10
---@nodiscard
function unpack(list, i, j) end

---@version 5.1
---@generic T1, T2, T3, T4, T5, T6, T7, T8, T9
---@param list {[1]: T1, [2]: T2, [3]: T3, [4]: T4, [5]: T5, [6]: T6, [7]: T7, [8]: T8, [9]: T9 }
---@return T1, T2, T3, T4, T5, T6, T7, T8, T9
---@nodiscard
function unpack(list) end
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua	
OnSetText called with text:	fx_version 'cerulean'
author 'SUP2Ak'
game 'common'
use_experimental_fxv2_oal 'yes'
repository 'https://github.com/SUP2Ak/hot-reload-fivem'
description 'Hot Reload for FiveM'
license 'MIT'
version '1.0.0'

server_only 'yes'
server_script 'dist/server.js'
dependency 'yarn'
	
Returning diffs count:	1	
OnSetText called with text:		
Returning diffs count:	0	
OnSetText called with text:	fx_version 'cerulean'
game 'common'
use_experimental_fxv2_oal 'yes'
lua54 'yes'

name 'oxmysql'
author 'Overextended'
version '2.11.2'
license 'LGPL-3.0-or-later'
repository 'https://github.com/overextended/oxmysql.git'
description 'FXServer to MySQL communication via node-mysql2'

dependencies {
    '/server:7290',
}

client_script 'ui.lua'
server_script 'dist/build.js'

files {
	'web/build/index.html',
	'web/build/**/*'
}

ui_page 'web/build/index.html'

provide 'mysql-async'
provide 'ghmattimysql'

convar_category 'OxMySQL' {
	'Configuration',
	{
		{ 'Connection string', 'mysql_connection_string', 'CV_STRING', 'mysql://user:password@localhost/database' },
		{ 'Debug', 'mysql_debug', 'CV_BOOL', 'false' }
	}
}
	
Found table content:	
    '/server:7290',
	
Processing item:	'/server:7290'	
Kept original item:	'/server:7290'	
Processing item:		
Kept original item:		
Found table content:	
	'web/build/index.html',
	'web/build/**/*'
	
Processing item:	'web/build/index.html'	
Kept original item:	'web/build/index.html'	
Processing item:	'web/build/**/*'	
Kept original item:	'web/build/**/*'	
Found table content:	
	'Configuration',
	{
		{ 'Connection string', 'mysql_connection_string', 'CV_STRING', 'mysql://user:password@localhost/database' 	
Processing item:	'Configuration'	
Kept original item:	'Configuration'	
Processing item:	{
		{ 'Connection string'	
Kept original item:	{
		{ 'Connection string'	
Processing item:	'mysql_connection_string'	
Kept original item:	'mysql_connection_string'	
Processing item:	'CV_STRING'	
Kept original item:	'CV_STRING'	
Processing item:	'mysql://user:password@localhost/database'	
Kept original item:	'mysql://user:password@localhost/database'	
Found table content:	 'Debug', 'mysql_debug', 'CV_BOOL', 'false' 	
Processing item:	'Debug'	
Kept original item:	'Debug'	
Processing item:	'mysql_debug'	
Kept original item:	'mysql_debug'	
Processing item:	'CV_BOOL'	
Kept original item:	'CV_BOOL'	
Processing item:	'false'	
Kept original item:	'false'	
Returning diffs count:	1	
OnSetText called with text:	---@todo [NEW] work in progress 0.0.2 to 0.1.0

-- loadscreen 'modules/loadscreen/client/index.html' -- loadscreen
-- loadscreen_manual_shutdown "yes" -- enable manual shutdown
-- loadscreen_cursor 'yes' -- enable cursor

fx_version 'cerulean'
game 'gta5'
lua54 'yes'
use_experimental_fxv2_oal 'yes'

name 'sublime_core (fivem)'
author 'SUBLiME'
version '0.1.0 (wip)'
repository 'https://github.com/sublime-framework-cfx/sublime_core-fivem'
description 'A new modular framework for FiveM'

shared_script '@sublime_core/import.lua'
server_script 'server.lua'	
Returning diffs count:	1	
OnSetText called with text:	local promise = promise
local Await = Citizen.Await
local GetCurrentResourceName = GetCurrentResourceName()
local GetResourceState = GetResourceState

local function await(fn, query, parameters)
	local p = promise.new()
	fn(nil, query, parameters, function(result, error)
		if error then
			return p:reject(error)
		end

		p:resolve(result)
	end, GetCurrentResourceName, true)
	return Await(p)
end

local type = type
local queryStore = {}

local function safeArgs(query, parameters, cb, transaction)
	local queryType = type(query)

	if queryType == 'number' then
		query = queryStore[query]
	elseif transaction then
		if queryType ~= 'table' then
			error(("First argument expected table, received '%s'"):format(query))
		end
	elseif queryType ~= 'string' then
		error(("First argument expected string, received '%s'"):format(query))
	end

	if parameters then
		local paramType = type(parameters)

		if paramType ~= 'table' and paramType ~= 'function' then
			error(("Second argument expected table or function, received '%s'"):format(parameters))
		end

		if paramType == 'function' or parameters.__cfx_functionReference then
			cb = parameters
			parameters = nil
		end
	end

	if cb and parameters then
		local cbType = type(cb)

		if cbType ~= 'function' and (cbType == 'table' and not cb.__cfx_functionReference) then
			error(("Third argument expected function, received '%s'"):format(cb))
		end
	end

	return query, parameters, cb
end

local oxmysql = exports.oxmysql

local mysql_method_mt = {
	__call = function(self, query, parameters, cb)
		query, parameters, cb = safeArgs(query, parameters, cb, self.method == 'transaction')
		return oxmysql[self.method](nil, query, parameters, cb, GetCurrentResourceName, false)
	end
}

local MySQL = setmetatable(MySQL or {}, {
	__index = function(_, index)
		return function(...)
			return oxmysql[index](nil, ...)
		end
	end
})

for _, method in pairs({
	'scalar', 'single', 'query', 'insert', 'update', 'prepare', 'transaction', 'rawExecute',
}) do
	MySQL[method] = setmetatable({
		method = method,
		await = function(query, parameters)
			query, parameters = safeArgs(query, parameters, nil, method == 'transaction')
			return await(oxmysql[method], query, parameters)
		end
	}, mysql_method_mt)
end

local alias = {
	fetchAll = 'query',
	fetchScalar = 'scalar',
	fetchSingle = 'single',
	insert = 'insert',
	execute = 'update',
	transaction = 'transaction',
	prepare = 'prepare'
}

local alias_mt = {
	__index = function(self, key)
		if alias[key] then
			local method = MySQL[alias[key]]
			MySQL.Async[key] = method
			MySQL.Sync[key] = method.await
			alias[key] = nil
			return self[key]
		end
	end
}

local function addStore(query, cb)
	assert(type(query) == 'string', 'The SQL Query must be a string')

	local storeN = #queryStore + 1
	queryStore[storeN] = query

	return cb and cb(storeN) or storeN
end

MySQL.Sync = setmetatable({ store = addStore }, alias_mt)
MySQL.Async = setmetatable({ store = addStore }, alias_mt)

local function onReady(cb)
	while GetResourceState('oxmysql') ~= 'started' do
		Wait(50)
	end

	oxmysql.awaitConnection()

	return cb and cb() or true
end

MySQL.ready = setmetatable({
	await = onReady
}, {
	__call = function(_, cb)
		Citizen.CreateThreadNow(function() onReady(cb) end)
	end,
})

_ENV.MySQL = MySQL
	
Found table content:		
Found table content:	
	__call = function(self, query, parameters, cb)
		query, parameters, cb = safeArgs(query, parameters, cb, self.method == 'transaction')
		return oxmysql[self.method](nil, query, parameters, cb, GetCurrentResourceName, false)
	end
	
Processing item:	__call = function(self	
Kept original item:	__call = function(self	
Processing item:	query	
Kept original item:	query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	cb)
		query	
Kept original item:	cb)
		query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	cb = safeArgs(query	
Kept original item:	cb = safeArgs(query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	cb	
Kept original item:	cb	
Processing item:	self.method == 'transaction')
		return oxmysql[self.method](nil	
Kept original item:	self.method == 'transaction')
		return oxmysql[self.method](nil	
Processing item:	query	
Kept original item:	query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	cb	
Kept original item:	cb	
Processing item:	GetCurrentResourceName	
Kept original item:	GetCurrentResourceName	
Processing item:	false)
	end	
Kept original item:	false)
	end	
Found table content:		
Found table content:	
	__index = function(_, index)
		return function(...)
			return oxmysql[index](nil, ...)
		end
	end
	
Processing item:	__index = function(_	
Kept original item:	__index = function(_	
Processing item:	index)
		return function(...)
			return oxmysql[index](nil	
Kept original item:	index)
		return function(...)
			return oxmysql[index](nil	
Processing item:	...)
		end
	end	
Found field with dot. Name:	
Found table content:	
	'scalar', 'single', 'query', 'insert', 'update', 'prepare', 'transaction', 'rawExecute',
	
Processing item:	'scalar'	
Kept original item:	'scalar'	
Processing item:	'single'	
Kept original item:	'single'	
Processing item:	'query'	
Kept original item:	'query'	
Processing item:	'insert'	
Kept original item:	'insert'	
Processing item:	'update'	
Kept original item:	'update'	
Processing item:	'prepare'	
Kept original item:	'prepare'	
Processing item:	'transaction'	
Kept original item:	'transaction'	
Processing item:	'rawExecute'	
Kept original item:	'rawExecute'	
Processing item:		
Kept original item:		
Found table content:	
		method = method,
		await = function(query, parameters)
			query, parameters = safeArgs(query, parameters, nil, method == 'transaction')
			return await(oxmysql[method], query, parameters)
		end
		
Processing item:	method = method	
Kept original item:	method = method	
Processing item:	await = function(query	
Kept original item:	await = function(query	
Processing item:	parameters)
			query	
Kept original item:	parameters)
			query	
Processing item:	parameters = safeArgs(query	
Kept original item:	parameters = safeArgs(query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	nil	
Kept original item:	nil	
Processing item:	method == 'transaction')
			return await(oxmysql[method]	
Kept original item:	method == 'transaction')
			return await(oxmysql[method]	
Processing item:	query	
Kept original item:	query	
Processing item:	parameters)
		end	
Kept original item:	parameters)
		end	
Found table content:	
	fetchAll = 'query',
	fetchScalar = 'scalar',
	fetchSingle = 'single',
	insert = 'insert',
	execute = 'update',
	transaction = 'transaction',
	prepare = 'prepare'
	
Processing item:	fetchAll = 'query'	
Kept original item:	fetchAll = 'query'	
Processing item:	fetchScalar = 'scalar'	
Kept original item:	fetchScalar = 'scalar'	
Processing item:	fetchSingle = 'single'	
Kept original item:	fetchSingle = 'single'	
Processing item:	insert = 'insert'	
Kept original item:	insert = 'insert'	
Processing item:	execute = 'update'	
Kept original item:	execute = 'update'	
Processing item:	transaction = 'transaction'	
Kept original item:	transaction = 'transaction'	
Processing item:	prepare = 'prepare'	
Kept original item:	prepare = 'prepare'	
Found table content:	
	__index = function(self, key)
		if alias[key] then
			local method = MySQL[alias[key]]
			MySQL.Async[key] = method
			MySQL.Sync[key] = method.await
			alias[key] = nil
			return self[key]
		end
	end
	
Processing item:	__index = function(self	
Kept original item:	__index = function(self	
Processing item:	key)
		if alias[key] then
			local method = MySQL[alias[key]]
			MySQL.Async[key] = method
			MySQL.Sync[key] = method.await
			alias[key] = nil
			return self[key]
		end
	end	
Kept original item:	key)
		if alias[key] then
			local method = MySQL[alias[key]]
			MySQL.Async[key] = method
			MySQL.Sync[key] = method.await
			alias[key] = nil
			return self[key]
		end
	end	
Found table content:	 store = addStore 	
Processing item:	store = addStore	
Kept original item:	store = addStore	
Found table content:	 store = addStore 	
Processing item:	store = addStore	
Kept original item:	store = addStore	
Found table content:	
	await = onReady
	
Processing item:	await = onReady	
Kept original item:	await = onReady	
Found table content:	
	__call = function(_, cb)
		Citizen.CreateThreadNow(function() onReady(cb) end)
	end,
	
Processing item:	__call = function(_	
Kept original item:	__call = function(_	
Processing item:	cb)
		Citizen.CreateThreadNow(function() onReady(cb) end)
	end	
Kept original item:	cb)
		Citizen.CreateThreadNow(function() onReady(cb) end)
	end	
Processing item:		
Kept original item:		
Returning diffs count:	0	
OnSetText called with text:	return {
    -- 'handlers', -- init handlers server & client
    'main', -- init main server & client
}	
Found table content:	
    -- 'handlers', -- init handlers server & client
    'main', -- init main server & client
	
Processing item:	-- 'handlers'	
Kept original item:	-- 'handlers'	
Processing item:	-- init handlers server & client
    'main'	
Kept original item:	-- init handlers server & client
    'main'	
Processing item:	-- init main server & client	
Kept original item:	-- init main server & client	
Returning diffs count:	0	
OnSetText called with text:	RegisterNetEvent('oxmysql:openUi', function(data)
    SendNUIMessage({
        action = 'openUI',
        data = data
    })
    SetNuiFocus(true, true)
end)

RegisterNUICallback('exit', function(_, cb)
    cb(true)
    SetNuiFocus(false, false)
end)

RegisterNUICallback('fetchResource', function(data, cb)
    TriggerServerEvent('oxmysql:fetchResource', data)
    cb(true)
end)

RegisterNetEvent('oxmysql:loadResource', function(data)
    SendNUIMessage({
        action = 'loadResource',
        data = data
    })
end)	
Found table content:	
        action = 'openUI',
        data = data
    	
Processing item:	action = 'openUI'	
Kept original item:	action = 'openUI'	
Processing item:	data = data	
Kept original item:	data = data	
Found table content:	
        action = 'loadResource',
        data = data
    	
Processing item:	action = 'loadResource'	
Kept original item:	action = 'loadResource'	
Processing item:	data = data	
Kept original item:	data = data	
Returning diffs count:	0	
OnSetText called with text:	---@todo [NEW] work in progress 0.0.2 to 0.1.0

-- loadscreen 'modules/loadscreen/client/index.html' -- loadscreen
-- loadscreen_manual_shutdown "yes" -- enable manual shutdown
-- loadscreen_cursor 'yes' -- enable cursor

fx_version 'cerulean'
game 'gta5'
lua54 'yes'
use_experimental_fxv2_oal 'yes'

name 'sublime_core (fivem)'
author 'SUBLiME'
version '0.1.0 (wip)'
repository 'https://github.com/sublime-framework-cfx/sublime_core-fivem'
description 'A new modular framework for FiveM'

files {
    'config/modules.lua',
    'imports/**/shared.lua',
    'imports/**/client.lua',
    'import.lua',
    -- 'modules/**/shared/**',
    'modules/**/client/**',
}

shared_scripts {
    'init.lua',
    'modules/init.lua',
}	
Found table content:	
    'config/modules.lua',
    'imports/**/shared.lua',
    'imports/**/client.lua',
    'import.lua',
    -- 'modules/**/shared/**',
    'modules/**/client/**',
	
Processing item:	'config/modules.lua'	
Kept original item:	'config/modules.lua'	
Processing item:	'imports/**/shared.lua'	
Kept original item:	'imports/**/shared.lua'	
Processing item:	'imports/**/client.lua'	
Kept original item:	'imports/**/client.lua'	
Processing item:	'import.lua'	
Kept original item:	'import.lua'	
Processing item:	-- 'modules/**/shared/**'	
Kept original item:	-- 'modules/**/shared/**'	
Processing item:	'modules/**/client/**'	
Kept original item:	'modules/**/client/**'	
Processing item:		
Kept original item:		
Found table content:	
    'init.lua',
    'modules/init.lua',
	
Processing item:	'init.lua'	
Kept original item:	'init.lua'	
Processing item:	'modules/init.lua'	
Kept original item:	'modules/init.lua'	
Processing item:		
Kept original item:		
Returning diffs count:	1	
OnSetText called with text:	local mt_pvt = {
    __metatable = 'private',
    __ext = 0,
    __pack = function() return '' end,
}

---@param obj table
---@return table
local function NewInstance(self, obj)
    if obj.private then
        setmetatable(obj.private, mt_pvt)
    end

    setmetatable(obj, self)

    if self.init then obj:init() end

    if obj.export then
        self.__export[obj.export] = obj
    end

    return obj
end

---@param name string
---@param super? table
---@param exportMethod? boolean
---@return table
function sublime.class(name, super, exportMethod)
    if not name then return end
    if super or exportMethod then
        local self = {
            __name = name,
            new = NewInstance
        }

        self.__index = self

        if exportMethod and not super then
            self.__exportMethod = {}
            self.__export = {}

            setmetatable(self, {
                __newindex = function(_, key, value)
                    rawset(_, key, value)
                    self.__exportMethod[key] = true
                end
            })

            exports('GetExportMethod', function()
                return self.__exportMethod
            end)

            exports('CallExportMethod', function(name, method, ...)
                local export <const> = self.__export[name]
                return export[method](export, ...)
            end)
        end

        return super and setmetatable(self, {
            __index = super,
            __newindex = function(_, key, value)
                rawset(_, key, value)
                if type(value) == 'function' then
                    self.__exportMethod[key] = true
                end
            end
        }) or self
    else
        local self = {
            __index = name
        }

        function self.new(obj)
            if obj.private then
                setmetatable(obj.private, mt_pvt)
            end

            if self.init then obj:init() end

            return setmetatable(obj, self)
        end

        return self
    end
end

return sublime.class	
Found table content:	
    __metatable = 'private',
    __ext = 0,
    __pack = function() return '' end,
	
Processing item:	__metatable = 'private'	
Kept original item:	__metatable = 'private'	
Processing item:	__ext = 0	
Kept original item:	__ext = 0	
Processing item:	__pack = function() return '' end	
Kept original item:	__pack = function() return '' end	
Processing item:		
Kept original item:		
Found table content:	
            __name = name,
            new = NewInstance
        	
Processing item:	__name = name	
Kept original item:	__name = name	
Processing item:	new = NewInstance	
Kept original item:	new = NewInstance	
Found table content:		
Found table content:		
Found table content:	
                __newindex = function(_, key, value)
                    rawset(_, key, value)
                    self.__exportMethod[key] = true
                end
            	
Processing item:	__newindex = function(_	
Kept original item:	__newindex = function(_	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
                    rawset(_	
Kept original item:	value)
                    rawset(_	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
                    self.__exportMethod[key] = true
                end	
Kept original item:	value)
                    self.__exportMethod[key] = true
                end	
Found table content:	
            __index = super,
            __newindex = function(_, key, value)
                rawset(_, key, value)
                if type(value) == 'function' then
                    self.__exportMethod[key] = true
                end
            end
        	
Processing item:	__index = super	
Kept original item:	__index = super	
Processing item:	__newindex = function(_	
Kept original item:	__newindex = function(_	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
                rawset(_	
Kept original item:	value)
                rawset(_	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
                if type(value) == 'function' then
                    self.__exportMethod[key] = true
                end
            end	
Kept original item:	value)
                if type(value) == 'function' then
                    self.__exportMethod[key] = true
                end
            end	
Found table content:	
            __index = name
        	
Processing item:	__index = name	
Kept original item:	__index = name	
Returning diffs count:	0	
OnSetText called with text:	---@param export string 'resourceName.methodName'
---@param ... any
---@return void | any
local function Exports(_, export, ...)
    local resourceName <const> = export:match('(.+)%..+')
    local methodName <const> = export:match('.+%.(.+)')
    return exports[resourceName][methodName](nil, ...)
end

local ExportMethod, MyClassExport = {}, {}
sublime.exports = setmetatable({}, {
    __call = Exports
})


---@param resource string resource name you have use supv.class with exportable on true
---@param name string export identifier name
---@param prototype? table if you want add prototype
---@return table
function sublime.exports.class(resource, name, prototype)
    ExportMethod[name] = {}
    setmetatable(ExportMethod[name], {
        __index = function(_, index)
            ExportMethod[name] = exports[resource]:GetExportMethod(index)
            return ExportMethod[name][index]
        end
    })

    MyClassExport[name] = {}
    local Class = MyClassExport[name]
    function Class:__index(index)
        local method = MyClassExport[name][index]

        if method then
            return function(...)
                return method(self, ...)
            end
        end

        local export = ExportMethod[name][index]

        if export then
            return function(...)
                return exports[resource]:CallExportMethod(name, index, ...)
            end
        end
    end

    return setmetatable(prototype or {}, Class)
end

return sublime.exports	
Found table content:		
Found table content:		
Found table content:		
Found table content:	
    __call = Exports
	
Processing item:	__call = Exports	
Kept original item:	__call = Exports	
Found table content:		
Found table content:	
        __index = function(_, index)
            ExportMethod[name] = exports[resource]:GetExportMethod(index)
            return ExportMethod[name][index]
        end
    	
Processing item:	__index = function(_	
Kept original item:	__index = function(_	
Processing item:	index)
            ExportMethod[name] = exports[resource]:GetExportMethod(index)
            return ExportMethod[name][index]
        end	
Kept original item:	index)
            ExportMethod[name] = exports[resource]:GetExportMethod(index)
            return ExportMethod[name][index]
        end	
Found table content:		
Found table content:		
Returning diffs count:	0	
OnSetText called with text:	local sublime_core <const> = 'sublime_core'
local IsDuplicityVersion <const>, await <const> = IsDuplicityVersion, Citizen.Await
local LoadResourceFile <const> = LoadResourceFile
local GetResourceState <const> = GetResourceState
local GetGameName <const> = GetGameName
local GetCurrentResourceName <const>, AddEventHandler <const> = GetCurrentResourceName, AddEventHandler
local export = exports[sublime_core]
local service <const> = (IsDuplicityVersion() and 'server') or 'client'

-- local function FormatEvent(self, name, from)
--     return ("__sl__:%s:%s"):format(from or service, joaat(name))
-- end

if not _VERSION:find('5.4') then
    error("^1 Vous devez activer Lua 5.4 dans la resources où vous utilisez l'import, (lua54 'yes') dans votre fxmanifest!^0", 2)
end

if not GetResourceState(sublime_core):find('start') then
	error('^1sublime_core doit être lancé avant cette ressource!^0', 2)
end

local function LoadModule(self, index)
    local func, err
    local dir <const> = ('imports/%s'):format(index)
    local chunk <const> = LoadResourceFile(sublime_core, ('%s/%s.lua'):format(dir, service))
    local shared <const> = LoadResourceFile(sublime_core, ('%s/shared.lua'):format(dir))

    if chunk or shared then
        if shared then
            func, err = load(shared, ('@@%s/%s/%s'):format(sublime_core, index, 'shared'))
        else
            func, err = load(chunk, ('@@%s/%s/%s'):format(sublime_core, index, service))
        end

        if err then error(("Erreur pendant le chargement du module\n- Provenant de : %s\n- Modules : %s\n- Service : %s\n - Erreur : %s"):format(dir, index, service, err), 3) end

        local result = func()
        rawset(self, index, result)
        return self[index]
    end
end

local function CallModule(self, index, ...)
    local module = rawget(self, index)
    if not module then
        module = LoadModule(self, index)
        if not module then
            local function method(...)
                return export[index](nil, ...)
            end

            if not ... then
                self[index] = method
            end

            return method
        end
    end
    return module
end

sublime = setmetatable({
    name = sublime_core,
    service = service,
    game = GetGameName(),
    env = GetCurrentResourceName(),
    -- lang = GetConvar('sublime:locale', 'fr'),
    cache = service == 'client' and {},
    await = await,
},
{
    __index = CallModule,
    __call = CallModule
})

if sublime.service == 'client' then
    local player = {}
    setmetatable(player, {
        __index = function(self, key)
            AddEventHandler('sublime:player:set:'..key, function(value)
                self[key] = value
                return self[key]
            end)

            rawset(self, key, export:GetPlayer(key) or false)
            return self[key]
        end
    })

    _ENV.player = player
elseif sublime.service == 'server' then
    local MySQL = {}

    setmetatable(MySQL, {
        __index = function(self, key)
            local value = rawget(self, key)
            if not value then
                sublime.mysql()
                value = MySQL[key]
            end
            return value
        end
    })

    _ENV.MySQL = MySQL
end

require = sublime.require()	
Found table content:	
    name = sublime_core,
    service = service,
    game = GetGameName(),
    env = GetCurrentResourceName(),
    -- lang = GetConvar('sublime:locale', 'fr'),
    cache = service == 'client' and {	
Processing item:	name = sublime_core	
Kept original item:	name = sublime_core	
Processing item:	service = service	
Kept original item:	service = service	
Processing item:	game = GetGameName()	
Kept original item:	game = GetGameName()	
Processing item:	env = GetCurrentResourceName()	
Kept original item:	env = GetCurrentResourceName()	
Processing item:	-- lang = GetConvar('sublime:locale'	
Kept original item:	-- lang = GetConvar('sublime:locale'	
Processing item:	'fr')	
Kept original item:	'fr')	
Processing item:	cache = service == 'client' and {	
Kept original item:	cache = service == 'client' and {	
Found table content:	
    __index = CallModule,
    __call = CallModule
	
Processing item:	__index = CallModule	
Kept original item:	__index = CallModule	
Processing item:	__call = CallModule	
Kept original item:	__call = CallModule	
Found table content:		
Found table content:	
        __index = function(self, key)
            AddEventHandler('sublime:player:set:'..key, function(value)
                self[key] = value
                return self[key]
            end)

            rawset(self, key, export:GetPlayer(key) or false)
            return self[key]
        end
    	
Processing item:	__index = function(self	
Kept original item:	__index = function(self	
Processing item:	key)
            AddEventHandler('sublime:player:set:'..key	
Kept original item:	key)
            AddEventHandler('sublime:player:set:'..key	
Processing item:	function(value)
                self[key] = value
                return self[key]
            end)

            rawset(self	
Kept original item:	function(value)
                self[key] = value
                return self[key]
            end)

            rawset(self	
Processing item:	key	
Kept original item:	key	
Processing item:	export:GetPlayer(key) or false)
            return self[key]
        end	
Kept original item:	export:GetPlayer(key) or false)
            return self[key]
        end	
Found table content:		
Found table content:	
        __index = function(self, key)
            local value = rawget(self, key)
            if not value then
                sublime.mysql()
                value = MySQL[key]
            end
            return value
        end
    	
Processing item:	__index = function(self	
Kept original item:	__index = function(self	
Processing item:	key)
            local value = rawget(self	
Kept original item:	key)
            local value = rawget(self	
Processing item:	key)
            if not value then
                sublime.mysql()
                value = MySQL[key]
            end
            return value
        end	
Kept original item:	key)
            if not value then
                sublime.mysql()
                value = MySQL[key]
            end
            return value
        end	
Returning diffs count:	0	
OnSetText called with text:	local PlayerExports, PlayerObject = {}, {}
setmetatable(PlayerExports, {
    __index = function(_, index)
        print(index, 'index meta')
        PlayerExports = sublime.GetPlayerExports()
        return PlayerExports[index]
    end
})

function sublime.GetPlayerObject(source)
    local player <const> = sublime.GetPlayerData(source)
    if not player then return end
    return setmetatable(player, PlayerObject)
end

function PlayerObject:__index(index)
    local method = PlayerObject[index]
    print(method, index)
    if method then
        return function(...)
            return method(self, ...)
        end
    end

    local export = PlayerExports[index]

    if export then
        return function(...)
            return sublime.CallPlayerMethod(self.source, index, ...)
        end
    end
end

function PlayerObject:test()
    return self.source .. ' from test ' .. self.getName()
end

return sublime.GetPlayerObject	
Found table content:		
Found table content:		
Found table content:	
    __index = function(_, index)
        print(index, 'index meta')
        PlayerExports = sublime.GetPlayerExports()
        return PlayerExports[index]
    end
	
Processing item:	__index = function(_	
Kept original item:	__index = function(_	
Processing item:	index)
        print(index	
Kept original item:	index)
        print(index	
Processing item:	'index meta')
        PlayerExports = sublime.GetPlayerExports()
        return PlayerExports[index]
    end	
Kept original item:	'index meta')
        PlayerExports = sublime.GetPlayerExports()
        return PlayerExports[index]
    end	
Returning diffs count:	0	
OnSetText called with text:	local function On(_, name, cb)
    AddEventHandler(name, cb)
end

sublime.on = setmetatable({}, {
    __call = On
})

function sublime.on.player(key, cb)
    AddEventHandler('sublime:cache:set:'..key, cb)
end

function sublime.on.net(key, cb)
    RegisterNetEvent(key, cb)
end	
Found table content:		
Found table content:	
    __call = On
	
Processing item:	__call = On	
Kept original item:	__call = On	
Returning diffs count:	0	
OnSetText called with text:	local LoadResourceFile <const>, load <const> = LoadResourceFile, load

function sublime.mysql()
    local file = 'lib/MySQL.lua'
	local import = LoadResourceFile('oxmysql', file)
	local func, err = load(import, ('@@%s/%s'):format('oxmysql', file))
	if not func or err then
		return error(err or ("unable to load module '%s'"):format(file), 3)
	end

	func()
end

return sublime.mysql	
Returning diffs count:	0	
OnSetText called with text:	-- credit: ox_lib <https://github.com/overextended/ox_lib/blob/master/imports/require/shared.lua>
if lib then 
    sublime.require = lib.require
    return sublime.require 
end

local loaded = {}

package = {
    loaded = setmetatable({}, {
        __index = loaded,
        __newindex = function()  end,
        __metatable = false,
    }),
    path = './?.lua;'
}

local _require = require

---Loads the given module inside the current resource, returning any values returned by the file or `true` when `nil`.
---@param modname string
---@return unknown?
function sublime.require(modname)
    if type(modname) ~= 'string' then return end

    local module = loaded[modname]

    if not module then
        if module == false then
            error(("^1circular-dependency occurred when loading module '%s'^0"):format(modname), 2)
        end

        if not modname:find('^@') then
            local success, result = pcall(_require, modname)

            if success then
                loaded[modname] = result
                return result
            end

            local modpath = modname:gsub('%.', '/')

            for path in package.path:gmatch('[^;]+') do
                local scriptPath = path:gsub('?', modpath):gsub('%.+%/+', '')
                local resourceFile = LoadResourceFile(sublime.env, scriptPath)

                if resourceFile then
                    loaded[modname] = false
                    scriptPath = ('@@%s/%s'):format(sublime.env, scriptPath)

                    local chunk, err = load(resourceFile, scriptPath)

                    if err or not chunk then
                        loaded[modname] = nil
                        return error(err or ("unable to load module '%s'"):format(modname), 3)
                    end

                    module = chunk(modname) or true
                    loaded[modname] = module

                    return module
                end
            end
        else
            local rss, dir = modname:gsub('%.', '/'):match('^(.-)/(.+)$')

            if not rss or not dir then return error('Invalid path format: '..modname, 2) end
            rss, dir = rss:gsub('^@', ''), dir..'.lua'
            local chunk = LoadResourceFile(rss, dir)

            if chunk then
                local scriptPath = ('@@%s/%s'):format(rss, dir)
                local func, err = load(chunk, scriptPath)

                if err or not func then
                    return error(err or ("unable to load module '%s'"):format(modname), 2)
                end

                module = func(modname) or true
                loaded[modname] = module

                return module
            end
        end

        return error(("module '%s' not found"):format(modname), 2)
    end

    return module
end

return sublime.require

--[[ old method, not working with zones module because need require (glm) to calculate vector
    
local moduleLoaded = {}

local function load_module(path)
    if moduleLoaded[path] then
        return moduleLoaded[path]
    end

    local module_path = ("%s.lua"):format(path)
    local module_file = LoadResourceFile(GetCurrentResourceName(), module_path)
    if not module_file then
        error("Impossible de chargé le module : "..path)
    end

    moduleLoaded[path] = load(module_file)()
    return moduleLoaded[path]
end

local function call_module(path)
    path = path:gsub('%.', '/')
    local module = load_module(path)
    if not module then
        return error("Le module n'a pas charger : "..path)
    end
    return module
end

return {
    load = call_module
}
--]]	
Found table content:		
Found table content:	
    loaded = setmetatable({	
Processing item:	loaded = setmetatable({	
Kept original item:	loaded = setmetatable({	
Found table content:	
        __index = loaded,
        __newindex = function()  end,
        __metatable = false,
    	
Processing item:	__index = loaded	
Kept original item:	__index = loaded	
Processing item:	__newindex = function()  end	
Kept original item:	__newindex = function()  end	
Processing item:	__metatable = false	
Kept original item:	__metatable = false	
Processing item:		
Kept original item:		
Found table content:		
Found table content:	
    load = call_module
	
Processing item:	load = call_module	
Kept original item:	load = call_module	
Returning diffs count:	1	
OnSetText called with text:	local LoadResourceFile <const>, IsDuplicityVersion <const>, await <const> = LoadResourceFile, IsDuplicityVersion, Citizen.Await
local sublime_core <const>, service <const> = 'sublime_core', (IsDuplicityVersion() and 'server') or 'client'

---@param name string
---@param from? string<'client' | 'server'> default is sl.service
---@return string
-- local function FormatEvent(self, name, from)
--     return ("__sl__:%s:%s"):format(from or self.service, joaat(name))
-- end

sublime = setmetatable({
    service = service, ---@type string<'client' | 'server'>
    name = sublime_core, ---@type string<'sublime_core'>
    env = sublime_core, ---@type string<'resource_name?'>
    -- hashEvent = FormatEvent,
    await = await,
    lang = GetConvar('sublime:locale', 'fr') ---@type string<'fr' | 'en' | unknown>
}, {
    __newindex = function(self, name, value)
        rawset(self, name, value)
        if type(value) == 'function' then
            exports(name, value)
        end
    end
})

local loaded = {}
package = {
    loaded = setmetatable({}, {
        __index = loaded,
        __newindex = function() end,
        __metatable = false,
    }),
    path = './?.lua;'
}

local _require = require
function require(modname)
    local module = loaded[modname]

    if not module then
        if module == false then
            error(("^1circular-dependency occurred when loading module '%s'^0"):format(modname), 2)
        end

        local success, result = pcall(_require, modname)

        if success then
            loaded[modname] = result
            return result
        end

        local modpath = modname:gsub('%.', '/')
        local paths = { string.strsplit(';', package.path) }
        for i = 1, #paths do
            local scriptPath = paths[i]:gsub('%?', modpath):gsub('%.+%/+', '')
            local resourceFile = LoadResourceFile(sublime_core, scriptPath)
            if resourceFile then
                loaded[modname] = false
                scriptPath = ('@@%s/%s'):format(sublime_core, scriptPath)

                local chunk, err = load(resourceFile, scriptPath)

                if err or not chunk then
                    loaded[modname] = nil
                    return error(err or ("unable to load module '%s'"):format(modname), 3)
                end

                module = chunk(modname) or true
                loaded[modname] = module

                return module
            end
        end

        return error(("module '%s' not found"):format(modname), 2)
    end

    return module
end

-- require('imports.locales.shared').init() ---@load translation

if sublime.service == 'server' then
    sublime.players = {}

    print([[
^6#####################################################################################
^6#^2                _       _   _                                                      ^6#
^6#^2               | |     | | (_)                                                     ^6#
^6#^2  ___   _   _  | |__   | |  _   _ __ ___     ___        ___    ___    _ __    ___  ^6#
^6#^2 / __| | | | | | '_ \  | | | | | '_ ` _ \   / _ \      / __|  / _ \  | '__|  / _ \ ^6#
^6#^2 \__ \ | |_| | | |_) | | | | | | | | | | | |  __/^7  _ ^2 | (__  | (_) | | |    |  __/ ^6#
^6#^2 |___/  \__,_| |_.__/  |_| |_| |_| |_| |_|  \___|^7 (_)^2  \___|  \___/  |_|     \___| ^6#
^6#                                                                                   ^6#
^6#^2        ^7Github: ^4https://github.com/sublime-framework-cfx/sublime_core-fivem        ^6#
^6#####################################################################################
]])
    -- require('imports.version.server').check('github', nil, 500) ---@load version check && check update
    -- require('imports.mysql.server').init() ---@load oxmysql
end	
Found table content:	
    service = service, ---@type string<'client' | 'server'>
    name = sublime_core, ---@type string<'sublime_core'>
    env = sublime_core, ---@type string<'resource_name?'>
    -- hashEvent = FormatEvent,
    await = await,
    lang = GetConvar('sublime:locale', 'fr') ---@type string<'fr' | 'en' | unknown>
	
Processing item:	service = service	
Kept original item:	service = service	
Processing item:	---@type string<'client' | 'server'>
    name = sublime_core	
Kept original item:	---@type string<'client' | 'server'>
    name = sublime_core	
Processing item:	---@type string<'sublime_core'>
    env = sublime_core	
Kept original item:	---@type string<'sublime_core'>
    env = sublime_core	
Processing item:	---@type string<'resource_name?'>
    -- hashEvent = FormatEvent	
Kept original item:	---@type string<'resource_name?'>
    -- hashEvent = FormatEvent	
Processing item:	await = await	
Kept original item:	await = await	
Processing item:	lang = GetConvar('sublime:locale'	
Kept original item:	lang = GetConvar('sublime:locale'	
Processing item:	'fr') ---@type string<'fr' | 'en' | unknown>	
Kept original item:	'fr') ---@type string<'fr' | 'en' | unknown>	
Found table content:	
    __newindex = function(self, name, value)
        rawset(self, name, value)
        if type(value) == 'function' then
            exports(name, value)
        end
    end
	
Processing item:	__newindex = function(self	
Kept original item:	__newindex = function(self	
Processing item:	name	
Kept original item:	name	
Processing item:	value)
        rawset(self	
Kept original item:	value)
        rawset(self	
Processing item:	name	
Kept original item:	name	
Processing item:	value)
        if type(value) == 'function' then
            exports(name	
Kept original item:	value)
        if type(value) == 'function' then
            exports(name	
Processing item:	value)
        end
    end	
Kept original item:	value)
        end
    end	
Found table content:		
Found table content:	
    loaded = setmetatable({	
Processing item:	loaded = setmetatable({	
Kept original item:	loaded = setmetatable({	
Found table content:	
        __index = loaded,
        __newindex = function() end,
        __metatable = false,
    	
Processing item:	__index = loaded	
Kept original item:	__index = loaded	
Processing item:	__newindex = function() end	
Kept original item:	__newindex = function() end	
Processing item:	__metatable = false	
Kept original item:	__metatable = false	
Processing item:		
Kept original item:		
Found table content:	 string.strsplit(';', package.path) 	
Processing item:	string.strsplit(';'	
Kept original item:	string.strsplit(';'	
Processing item:	package.path)	
Kept original item:	package.path)	
Found table content:		
Returning diffs count:	1	
OnSetText called with text:	local mt_pvt, class = {
    __metatable = 'private',
    __ext = 0,
    __pack = function() return '' end,
}, {}

---@param prototype table?
---@return { new: fun(obj): table }
function class.new(prototype)
    local self = { __index = prototype }

    function self.new(obj)
        if obj.private then
            setmetatable(obj.private, mt_pvt)
        end

        return setmetatable(obj, self)
    end

    return self
end

return class	
Found table content:	
    __metatable = 'private',
    __ext = 0,
    __pack = function() return '' end,
	
Processing item:	__metatable = 'private'	
Kept original item:	__metatable = 'private'	
Processing item:	__ext = 0	
Kept original item:	__ext = 0	
Processing item:	__pack = function() return '' end	
Kept original item:	__pack = function() return '' end	
Processing item:		
Kept original item:		
Found table content:		
Found table content:	 new: fun(obj): table 	
Processing item:	new: fun(obj): table	
Kept original item:	new: fun(obj): table	
Found table content:	 __index = prototype 	
Processing item:	__index = prototype	
Kept original item:	__index = prototype	
Returning diffs count:	0	
OnSetText called with text:	local player = {}

---@param key string
---@param value any
---@param force? 'ignore' | boolean
function player:set(key, value, force)
    if not self[key] or self[key] ~= value or force then
        self[key] = value
        if force and force == 'ignore' then return end
        TriggerEvent('sublime:player:set:'..key, value)
    end
end

---@param coords vec3
---@return number
function player:distance(coords)
    return #(self.coords - coords)
end

CreateThread(function()
    player:set('id', PlayerId())
    player:set('serverid', GetPlayerServerId(player.id))

    while true do
        player:set('ped', PlayerPedId())
        player:set('coords', GetEntityCoords(player.ped), 'ignore')
        player:set('vec4', vec4(player.coords.x, player.coords.y, player.coords.z, GetEntityHeading(player.ped)), 'ignore')

        local hasWeapon <const>, weaponHash <const> = GetCurrentPedWeapon(player.ped, true)
        player:set('weapon', hasWeapon and weaponHash or false)

        local vehicle <const> = GetVehiclePedIsIn(player.ped, false)
        if vehicle > 0 then
            player:set('vehicle', vehicle)

            if not player.seat or GetPedInVehicleSeat(vehicle, player.seat) ~= player.ped then
                for i = -1, GetVehicleMaxNumberOfPassengers(vehicle) - 1 do
                    if GetPedInVehicleSeat(vehicle, i) == player.ped then
                        player:set('seat', i)
                        break
                    end
                end
            end
        else
            player:set('vehicle', false)
            player:set('seat', false)
        end
    
        Wait(500)
    end
end)

---@param key string
---@return any
function sublime.GetPlayer(key)
    return player[key] or key == 'vehicle' and false or false
end

_ENV.player = player	
Found table content:		
Returning diffs count:	0	
OnSetText called with text:	if not sublime or not sublime.service then return error("Cannot load init modules", 3) end
local folders = require 'config.modules'

for i = 1, #folders do
    local folder <const> = folders[i]
    local files <const> = require(('modules.%s.index'):format(folder))

    if files.shared then
        local t <const> = files.shared
        for j = 1, #t do
            local file <const> = t[j]
            require(('modules.%s.%s.%s'):format(folder, 'shared', file))
        end
    end

    if files[sublime.service] then
        local t <const> = files[sublime.service]
        for j = 1, #t do
            local file <const> = t[j]
            require(('modules.%s.%s.%s'):format(folder, sublime.service, file))
        end
    end
end

folders = nil	
Returning diffs count:	0	
OnSetText called with text:	return {
    client = {
        'player',
    },

    server = {
        'players',
    },
}	
Found table content:	
    client = {
        'player',
    	
Processing item:	client = {
        'player'	
Kept original item:	client = {
        'player'	
Processing item:		
Kept original item:		
Found table content:	
        'players',
    	
Processing item:	'players'	
Kept original item:	'players'	
Processing item:		
Kept original item:		
Returning diffs count:	0	
OnSetText called with text:	local PlayerClass = require 'modules.main.server.class.player'

---@param source integer
---@param data table
---@return table
function sublime.CreatePlayerObject(source, data)
    if sublime.players[source] then
        return sublime.players[source]
    end

    data.metadata = data.metadata or {}
    data.group = data.group or 'user'
    data.databaseId = data.databaseId or 0
    data.licenses = data.licenses or {}

    local object = { 
        source = source,
        private = data
    }

    local player <const> = PlayerClass.new(object)
    sublime.players[source] = player
    --sublime.playersDatabaseId[player.private.databaseId] = source

    return player
end

sublime.CreatePlayerObject(1, { name = 'John', age = 20 })
local p = sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })

p:init()


RegisterCommand('hh', function()
    local player2 = sublime.GetPlayerData(2)
    print(player2?.source)
    if not player2 then
        print('Player not found')
        return
    end

    print(player2:getName())
end)	
Found table content:		
Found table content:		
Found table content:	 
        source = source,
        private = data
    	
Processing item:	source = source	
Kept original item:	source = source	
Processing item:	private = data	
Kept original item:	private = data	
Found table content:	 name = 'John', age = 20 	
Processing item:	name = 'John'	
Kept original item:	name = 'John'	
Processing item:	age = 20	
Kept original item:	age = 20	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Returning diffs count:	1	
OnSetText called with text:	GlobalState.playersCount = 0
local PlayerExports = {}
local PlayerObject = setmetatable({}, {
    __newindex = function(self, key, value)
        rawset(self, key, value)
        print(key, value)
        PlayerExports[key] = true
    end
})

function sublime.GetPlayerExports()
    return PlayerExports
end

---@param id integer
---@param method string
---@param ... unknown?
---@return unknown?
function sublime.CallPlayerMethod(id, method, ...)
    print(id, method)
    local player = sublime.GetPlayerData(id)
    return PlayerObject[method](player, ...)
end

---@param source integer
function sublime.GetPlayerData(source)
    return sublime.players[source]
end

function sublime.RemovePlayerObject(source)
    local player = sublime.players[source]
    if player then
        sublime.players[source] = nil
        player = nil
        collectgarbage()
        TriggerEvent('sublime:player:remove', source)
    end
end

function PlayerObject:init()
    print(self.source, 'was initialized')
end

function PlayerObject:setName(name)
    self.private.name = name
end

function PlayerObject:getName()
    return self.private.name
end

---@param key string support nested keys separated by dots '.', exemple: 'metadata.name'
---@return unknown?
function PlayerObject:get(key)
    assert(key and type(key) == 'string', 'Invalid key: '..key)

    if key:find('.') then
        local keys <const> = {('.'):strsplit(key)}
        local value = self.private
        for i = 1, #keys do
            local key <const> = keys[i]
            value = value[key]
            if not value then
                return nil
            end
        end

        return value
    end

    return self.private[key]
end

local class <const> = require 'modules.handlers.shared.class'
return class.new(PlayerObject)

-----------------
--[[
function PlayerObject:init()
    GlobalState.playersCount += 1
end

function PlayerObject:__gc() -- destructor
    GlobalState.playersCount -= 1
end

function PlayerObject:save()
    -- save player in database
    return self
end

function PlayerObject:set(key, value, replicated)
    local _key, count = key:gsub('%W', '')

    if count > 0 then
        warn('Invalid key: '..key)
        key = _key
    end

    self.private.metadata[key] = value

    if replicated then
        --TriggerClientEvent('sublime:player:set', self.source, key, value)
    end
end

function PlayerObject:get(key)
    local metadata <const> = self.private.metadata
    if not key then return metadata end

    local _key, count = key:gsub('%W', '')

    if count > 0 then
        warn('Invalid key: '..key)
        key = _key
    end

    return metadata[key]
end

function PlayerObject:setName(name)
    self.private.name = name
    return self
end

function PlayerObject:getName()
    return self.private.name
end

---@param source integer
---@param data table
---@return table
function sublime.CreatePlayerObject(source, data)
    if sublime.players[source] then
        return sublime.players[source]
    end

    data.metadata = data.metadata or {}
    data.group = data.group or 'user'
    data.databaseId = data.databaseId or 0 ---@todo: get from database id
    data.licenses = data.licenses or {} ---@todo: use license manager

    local object = { 
        source = source,
        export = 'player.'..source,
        private = data
    }

    local player <const> = PlayerObject:new(object)
    sublime.players[source] = player
    --sublime.playersDatabaseId[player.private.databaseId] = source

    return player
end

---@param source integer
function sublime.RemovePlayerObject(source)
    local player = sublime.players[source]
    if player then
        sublime.players[source] = nil
        player = nil
        collectgarbage()
        TriggerEvent('sublime:player:remove', source)
    end
end

---@param source integer
function sublime.GetPlayerData(source)
    return sublime.players[source]
end]]	
Found table content:		
Found table content:		
Found table content:	
    __newindex = function(self, key, value)
        rawset(self, key, value)
        print(key, value)
        PlayerExports[key] = true
    end
	
Processing item:	__newindex = function(self	
Kept original item:	__newindex = function(self	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
        rawset(self	
Kept original item:	value)
        rawset(self	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
        print(key	
Kept original item:	value)
        print(key	
Processing item:	value)
        PlayerExports[key] = true
    end	
Kept original item:	value)
        PlayerExports[key] = true
    end	
Found table content:	('.'):strsplit(key)	
Processing item:	('.'):strsplit(key)	
Kept original item:	('.'):strsplit(key)	
Found table content:		
Found table content:		
Found table content:	 
        source = source,
        export = 'player.'..source,
        private = data
    	
Processing item:	source = source	
Kept original item:	source = source	
Processing item:	export = 'player.'..source	
Kept original item:	export = 'player.'..source	
Processing item:	private = data	
Kept original item:	private = data	
Returning diffs count:	0	
OnSetText called with text:	--This empty file causes the scheduler.lua to load clientside
--scheduler.lua when loaded inside the sessionmanager resource currently manages remote callbacks.
--Without this, callbacks will only work server->client and not client->server.	
Returning diffs count:	0	
OnSetText called with text:	-- whitelist c2s events
RegisterServerEvent('hostingSession')
RegisterServerEvent('hostedSession')

-- event handler for pre-session 'acquire'
local currentHosting
local hostReleaseCallbacks = {}

-- TODO: add a timeout for the hosting lock to be held
-- TODO: add checks for 'fraudulent' conflict cases of hosting attempts (typically whenever the host can not be reached)
AddEventHandler('hostingSession', function()
    -- if the lock is currently held, tell the client to await further instruction
    if currentHosting then
        TriggerClientEvent('sessionHostResult', source, 'wait')

        -- register a callback for when the lock is freed
        table.insert(hostReleaseCallbacks, function()
            TriggerClientEvent('sessionHostResult', source, 'free')
        end)

        return
    end

    -- if the current host was last contacted less than a second ago
    if GetHostId() then
        if GetPlayerLastMsg(GetHostId()) < 1000 then
            TriggerClientEvent('sessionHostResult', source, 'conflict')

            return
        end
    end

    hostReleaseCallbacks = {}

    currentHosting = source

    TriggerClientEvent('sessionHostResult', source, 'go')

    -- set a timeout of 5 seconds
    SetTimeout(5000, function()
        if not currentHosting then
            return
        end

        currentHosting = nil

        for _, cb in ipairs(hostReleaseCallbacks) do
            cb()
        end
    end)
end)

AddEventHandler('hostedSession', function()
    -- check if the client is the original locker
    if currentHosting ~= source then
        -- TODO: drop client as they're clearly lying
        print(currentHosting, '~=', source)
        return
    end

    -- free the host lock (call callbacks and remove the lock value)
    for _, cb in ipairs(hostReleaseCallbacks) do
        cb()
    end

    currentHosting = nil
end)

EnableEnhancedHostSupport(true)	
Found table content:		
Found table content:		
Returning diffs count:	0	
OnSetText called with text:	-- This resource is part of the default Cfx.re asset pack (cfx-server-data)
-- Altering or recreating for local use only is strongly discouraged.

version '1.0.0'
author 'Cfx.re <root@cfx.re>'
description 'Handles the "host lock" for non-OneSync servers. Do not disable.'
repository 'https://github.com/citizenfx/cfx-server-data'

fx_version 'cerulean'
games { 'gta4', 'gta5' }

server_script 'server/host_lock.lua'
client_script 'client/empty.lua'	
Found table content:	 'gta4', 'gta5' 	
Processing item:	'gta4'	
Kept original item:	'gta4'	
Processing item:	'gta5'	
Kept original item:	'gta5'	
Returning diffs count:	1	
OnSetText called with text:	-- This resource is part of the default Cfx.re asset pack (cfx-server-data)
-- Altering or recreating for local use only is strongly discouraged.

version '1.0.0'
author 'Cfx.re <root@cfx.re>'
description 'Builds resources with webpack. To learn more: https://webpack.js.org'
repository 'https://github.com/citizenfx/cfx-server-data'

dependency 'yarn'
server_script 'webpack_builder.js'

fx_version 'adamant'
game 'common'
	
Returning diffs count:	1	
OnSetText called with text:	-- This resource is part of the default Cfx.re asset pack (cfx-server-data)
-- Altering or recreating for local use only is strongly discouraged.

version '1.0.0'
author 'Cfx.re <root@cfx.re>'
description 'Builds resources with yarn. To learn more: https://classic.yarnpkg.com'
repository 'https://github.com/citizenfx/cfx-server-data'

fx_version 'adamant'
game 'common'

server_script 'yarn_builder.js'
	
Returning diffs count:	1	
OnSetText called with text:		
Returning diffs count:	0	
OnSetText called with text:	l	
Returning diffs count:	0	
OnSetText called with text:	lo	
Returning diffs count:	0	
OnSetText called with text:	loc	
Returning diffs count:	0	
OnSetText called with text:	loca	
Returning diffs count:	0	
OnSetText called with text:	local	
Returning diffs count:	0	
OnSetText called with text:	local 	
Returning diffs count:	0	
OnSetText called with text:	local t	
Returning diffs count:	0	
OnSetText called with text:	local t 	
Returning diffs count:	0	
OnSetText called with text:	local t =	
Returning diffs count:	0	
OnSetText called with text:	local t = 	
Returning diffs count:	0	
OnSetText called with text:	local t = {}	
Found table content:		
Returning diffs count:	0	
OnSetText called with text:	local t = { }	
Found table content:	 	
Processing item:		
Kept original item:		
Returning diffs count:	0	
OnSetText called with text:	local t = { j}	
Found table content:	 j	
Processing item:	j	
Kept original item:	j	
Returning diffs count:	0	
OnSetText called with text:	local t = { }	
Found table content:	 	
Processing item:		
Kept original item:		
Returning diffs count:	0	
OnSetText called with text:	local t = { .}	
Found table content:	 .	
Processing item:	.	
Found field with dot. Name:	
Returning diffs count:	0	
OnSetText called with text:	local t = { .j}	
Found table content:	 .j	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Creating diff. Start:	11	End:	16	
New text:	{ j = true }	
Returning diffs count:	1	
OnSetText called with text:	local t = { .j }	
Found table content:	 .j 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Creating diff. Start:	11	End:	17	
New text:	{ j = true }	
Returning diffs count:	1	
OnSetText called with text:	local t = { .j}	
Found table content:	 .j	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Creating diff. Start:	11	End:	16	
New text:	{ j = true }	
Returning diffs count:	1	
OnSetText called with text:	local t = { .j,}	
Found table content:	 .j,	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Creating diff. Start:	11	End:	17	
New text:	{ j = true }	
Returning diffs count:	1	
OnSetText called with text:	local t = { .j, }	
Found table content:	 .j, 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:		
Kept original item:		
Creating diff. Start:	11	End:	18	
New text:	{ j = true,  }	
Returning diffs count:	1	
OnSetText called with text:	local t = { .j, S}	
Found table content:	 .j, S	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	S	
Kept original item:	S	
Creating diff. Start:	11	End:	19	
New text:	{ j = true, S }	
Returning diffs count:	1	
OnSetText called with text:	local t = { .j, }	
Found table content:	 .j, 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:		
Kept original item:		
Creating diff. Start:	11	End:	18	
New text:	{ j = true,  }	
Returning diffs count:	1	
OnSetText called with text:	local t = { .j, M}	
Found table content:	 .j, M	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	M	
Kept original item:	M	
Creating diff. Start:	11	End:	19	
New text:	{ j = true, M }	
Returning diffs count:	1	
OnSetText called with text:	local t = { .j, }	
Found table content:	 .j, 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:		
Kept original item:		
Creating diff. Start:	11	End:	18	
New text:	{ j = true,  }	
Returning diffs count:	1	
OnSetText called with text:	local t = { .j, m}	
Found table content:	 .j, m	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	m	
Kept original item:	m	
Creating diff. Start:	11	End:	19	
New text:	{ j = true, m }	
Returning diffs count:	1	
OnSetText called with text:	local t = { .j, m.}	
Found table content:	 .j, m.	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	m.	
Kept original item:	m.	
Creating diff. Start:	11	End:	20	
New text:	{ j = true, m. }	
Returning diffs count:	1	
OnSetText called with text:	local t = { .j, m}	
Found table content:	 .j, m	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	m	
Kept original item:	m	
Creating diff. Start:	11	End:	19	
New text:	{ j = true, m }	
Returning diffs count:	1	
OnSetText called with text:	local t = { .j, }	
Found table content:	 .j, 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:		
Kept original item:		
Creating diff. Start:	11	End:	18	
New text:	{ j = true,  }	
Returning diffs count:	1	
OnSetText called with text:	local t = { .j, .}	
Found table content:	 .j, .	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.	
Found field with dot. Name:	
Creating diff. Start:	11	End:	19	
New text:	{ j = true }	
Returning diffs count:	1	
OnSetText called with text:	local t = { .j, .m}	
Found table content:	 .j, .m	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	20	
New text:	{ j = true, m = true }	
Returning diffs count:	1	
OnSetText called with text:	local t = { .j, .m }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Returning diffs count:	1	
OnSetText called with text:	local t = { .j, .m }
	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Returning diffs count:	1	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m  }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m  	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	34	End:	45	
New text:	{ j = true, m = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m true }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m true 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m true	
Found field with dot. Name:	
Creating diff. Start:	34	End:	49	
New text:	{ j = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m tru }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m tru 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m tru	
Found field with dot. Name:	
Creating diff. Start:	34	End:	48	
New text:	{ j = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m tr }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m tr 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m tr	
Found field with dot. Name:	
Creating diff. Start:	34	End:	47	
New text:	{ j = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m t }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m t 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m t	
Found field with dot. Name:	
Creating diff. Start:	34	End:	46	
New text:	{ j = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m  }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m  	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	34	End:	45	
New text:	{ j = true, m = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, m }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	m	
Kept original item:	m	
Creating diff. Start:	34	End:	43	
New text:	{ j = true, m }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }

local t2 = { .j, .m }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m, }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m, 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Processing item:		
Kept original item:		
Creating diff. Start:	34	End:	45	
New text:	{ j = true, m = true,  }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m,  }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m,  	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Processing item:		
Kept original item:		
Creating diff. Start:	34	End:	46	
New text:	{ j = true, m = true,  }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m, . }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m, . 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Processing item:	.	
Found field with dot. Name:	
Creating diff. Start:	34	End:	47	
New text:	{ j = true, m = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m, .d }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m, .d 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Processing item:	.d	
Found field with dot. Name:	d	
Added entry:	d = true	
Creating diff. Start:	34	End:	48	
New text:	{ j = true, m = true, d = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m, }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m, 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Processing item:		
Kept original item:		
Creating diff. Start:	34	End:	45	
New text:	{ j = true, m = true,  }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m,}	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m,	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	34	End:	44	
New text:	{ j = true, m = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m}	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	20	
New text:	{ j = true, m = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .}	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.	
Found field with dot. Name:	
Creating diff. Start:	11	End:	19	
New text:	{ j = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .s}	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .s	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.s	
Found field with dot. Name:	s	
Added entry:	s = true	
Creating diff. Start:	34	End:	43	
New text:	{ j = true, s = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .sa}	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .sa	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.sa	
Found field with dot. Name:	sa	
Added entry:	sa = true	
Creating diff. Start:	34	End:	44	
New text:	{ j = true, sa = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .s}	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .s	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.s	
Found field with dot. Name:	s	
Added entry:	s = true	
Creating diff. Start:	34	End:	43	
New text:	{ j = true, s = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .}	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.	
Found field with dot. Name:	
Creating diff. Start:	11	End:	19	
New text:	{ j = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .a}	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .a	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.a	
Found field with dot. Name:	a	
Added entry:	a = true	
Creating diff. Start:	34	End:	43	
New text:	{ j = true, a = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .a }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .a 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.a	
Found field with dot. Name:	a	
Added entry:	a = true	
Creating diff. Start:	34	End:	44	
New text:	{ j = true, a = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .a}	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .a	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.a	
Found field with dot. Name:	a	
Added entry:	a = true	
Creating diff. Start:	34	End:	43	
New text:	{ j = true, a = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .a,}	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .a,	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.a	
Found field with dot. Name:	a	
Added entry:	a = true	
Creating diff. Start:	34	End:	44	
New text:	{ j = true, a = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .a, }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .a, 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.a	
Found field with dot. Name:	a	
Added entry:	a = true	
Processing item:		
Kept original item:		
Creating diff. Start:	34	End:	45	
New text:	{ j = true, a = true,  }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .a,}	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .a,	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.a	
Found field with dot. Name:	a	
Added entry:	a = true	
Creating diff. Start:	34	End:	44	
New text:	{ j = true, a = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .a}	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .a	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.a	
Found field with dot. Name:	a	
Added entry:	a = true	
Creating diff. Start:	34	End:	43	
New text:	{ j = true, a = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .}	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.	
Found field with dot. Name:	
Creating diff. Start:	11	End:	19	
New text:	{ j = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m, }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m, 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Processing item:		
Kept original item:		
Creating diff. Start:	34	End:	45	
New text:	{ j = true, m = true,  }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, ., }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, ., 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.	
Found field with dot. Name:	
Processing item:		
Kept original item:		
Creating diff. Start:	34	End:	44	
New text:	{ j = true,  }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .s, }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .s, 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.s	
Found field with dot. Name:	s	
Added entry:	s = true	
Processing item:		
Kept original item:		
Creating diff. Start:	34	End:	45	
New text:	{ j = true, s = true,  }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .s }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .s 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.s	
Found field with dot. Name:	s	
Added entry:	s = true	
Creating diff. Start:	34	End:	44	
New text:	{ j = true, s = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .s }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .s 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.s	
Found field with dot. Name:	s	
Added entry:	s = true	
Creating diff. Start:	34	End:	44	
New text:	{ j = true, s = true }	
Returning diffs count:	2	
OnSetText called with text:	---@meta coroutine

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine"])
---
---@class coroutinelib
coroutine = {}

---
---Creates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `"thread"`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.create"])
---
---@param f async fun(...):...
---@return thread
---@nodiscard
function coroutine.create(f) end

---
---Returns true when the coroutine `co` can yield. The default for `co` is the running coroutine.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.isyieldable"])
---
---@param co? thread
---@return boolean
---@nodiscard
function coroutine.isyieldable(co) end

---@version >5.4
---
---Closes coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.close"])
---
---@param co thread
---@return boolean noerror
---@return any errorobject
function coroutine.close(co) end

---
---Starts or continues the execution of coroutine `co`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.resume"])
---
---@param co    thread
---@param val1? any
---@return boolean success
---@return any ...
function coroutine.resume(co, val1, ...) end

---
---Returns the running coroutine plus a boolean, true when the running coroutine is the main one.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.running"])
---
---@return thread running
---@return boolean ismain
---@nodiscard
function coroutine.running() end

---
---Returns the status of coroutine `co`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.status"])
---
---@param co thread
---@return
---| '"running"'   # Is running.
---| '"suspended"' # Is suspended or not started.
---| '"normal"'    # Is active but not running.
---| '"dead"'      # Has finished or stopped with an error.
---@nodiscard
function coroutine.status(co) end

---
---Creates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.wrap"])
---
---@param f async fun(...):...
---@return fun(...):...
---@nodiscard
function coroutine.wrap(f) end

---
---Suspends the execution of the calling coroutine.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.yield"])
---
---@async
---@return any ...
function coroutine.yield(...) end

return coroutine
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/coroutine.lua	
OnSetText called with text:	---@meta package

---
---Loads the given module, returns any value returned by the searcher(`true` when `nil`). Besides that value, also returns as a second result the loader data returned by the searcher, which indicates how `require` found the module. (For instance, if the module came from a file, this loader data is the file path.)
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-require"])
---
---@param modname string
---@return unknown
---@return unknown loaderdata
function require(modname) end

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package"])
---
---@class packagelib
---
---The path used by `require` to search for a C loader.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.cpath"])
---
---@field cpath     string
---
---A table used by `require` to control which modules are already loaded.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.loaded"])
---
---@field loaded    table
---
---The path used by `require` to search for a Lua loader.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.path"])
---
---@field path      string
---
---A table to store loaders for specific modules.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.preload"])
---
---@field preload   table
package = {}

---
---A string describing some compile-time configurations for packages.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.config"])
---
package.config = [[
/
;
?
!
-]]

---@version <5.1
---
---A table used by `require` to control how to load modules.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.loaders"])
---
package.loaders = {}

---
---Dynamically links the host program with the C library `libname`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.loadlib"])
---
---@param libname string
---@param funcname string
---@return any
function package.loadlib(libname, funcname) end

---
---A table used by `require` to control how to load modules.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.searchers"])
---
---@version >5.2
package.searchers = {}

---
---Searches for the given `name` in the given `path`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.searchpath"])
---
---@version >5.2,JIT
---@param name string
---@param path string
---@param sep? string
---@param rep? string
---@return string? filename
---@return string? errmsg
---@nodiscard
function package.searchpath(name, path, sep, rep) end

---
---Sets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.seeall"])
---
---@version <5.1
---@param module table
function package.seeall(module) end

return package
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/package.lua	
OnSetText called with text:	---@meta string

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string"])
---
---@class stringlib
string = {}

---
---Returns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.byte"])
---
---@param s  string|number
---@param i? integer
---@param j? integer
---@return integer ...
---@nodiscard
function string.byte(s, i, j) end

---
---Returns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.char"])
---
---@param byte integer
---@param ... integer
---@return string
---@nodiscard
function string.char(byte, ...) end

---
---Returns a string containing a binary representation (a *binary chunk*) of the given function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.dump"])
---
---@param f      async fun(...):...
---@param strip? boolean
---@return string
---@nodiscard
function string.dump(f, strip) end

---
---Miss locale <string.find>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.find"])
---
---@param s       string|number
---@param pattern string|number
---@param init?   integer
---@param plain?  boolean
---@return integer|nil start
---@return integer|nil end
---@return any|nil ... captured
---@nodiscard
function string.find(s, pattern, init, plain) end

---
---Returns a formatted version of its variable number of arguments following the description given in its first argument.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.format"])
---
---@param s string|number
---@param ... any
---@return string
---@nodiscard
function string.format(s, ...) end

---
---Miss locale <string.gmatch>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.gmatch"])
---
---@param s       string|number
---@param pattern string|number
---@param init?   integer
---@return fun():string, ...
function string.gmatch(s, pattern, init) end

---
---Miss locale <string.gsub>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.gsub"])
---
---@param s       string|number
---@param pattern string|number
---@param repl    string|number|table|function
---@param n?      integer
---@return string
---@return integer count
function string.gsub(s, pattern, repl, n) end

---
---Returns its length.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.len"])
---
---@param s string|number
---@return integer
---@nodiscard
function string.len(s) end

---
---Returns a copy of this string with all uppercase letters changed to lowercase.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.lower"])
---
---@param s string|number
---@return string
---@nodiscard
function string.lower(s) end

---
---Miss locale <string.match>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.match"])
---
---@param s       string|number
---@param pattern string|number
---@param init?   integer
---@return any ...
---@nodiscard
function string.match(s, pattern, init) end

---@version >5.3
---
---Miss locale <string.pack>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.pack"])
---
---@param fmt string
---@param v1  string|number
---@param v2? string|number
---@param ... string|number
---@return string binary
---@nodiscard
function string.pack(fmt, v1, v2, ...) end

---@version >5.3
---
---Miss locale <string.packsize>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.packsize"])
---
---@param fmt string
---@return integer
---@nodiscard
function string.packsize(fmt) end

---
---Returns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.rep"])
---
---@param s    string|number
---@param n    integer
---@param sep? string|number
---@return string
---@nodiscard
function string.rep(s, n, sep) end

---
---Returns a string that is the string `s` reversed.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.reverse"])
---
---@param s string|number
---@return string
---@nodiscard
function string.reverse(s) end

---
---Returns the substring of the string that starts at `i` and continues until `j`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.sub"])
---
---@param s  string|number
---@param i  integer
---@param j? integer
---@return string
---@nodiscard
function string.sub(s, i, j) end

---@version >5.3
---
---Returns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?["en-us/54/manual.html/6.4.2"])) .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.unpack"])
---
---@param fmt  string
---@param s    string
---@param pos? integer
---@return any ...
---@nodiscard
function string.unpack(fmt, s, pos) end

---
---Returns a copy of this string with all lowercase letters changed to uppercase.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.upper"])
---
---@param s string|number
---@return string
---@nodiscard
function string.upper(s) end

return string
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/string.lua	
OnSetText called with text:	---@meta _

---@class unknown
---@class any
---@class nil
---@class boolean
---@class true: boolean
---@class false: boolean
---@class number
---@class integer: number
---@class thread
---@class table<K, V>: { [K]: V }
---@class string: stringlib
---@class userdata
---@class lightuserdata
---@class function
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/builtin.lua	
OnSetText called with text:	---@meta debug

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug"])
---
---@class debuglib
debug = {}

---@class debuginfo
---@field name            string
---@field namewhat        string
---@field source          string
---@field short_src       string
---@field linedefined     integer
---@field lastlinedefined integer
---@field what            string
---@field currentline     integer
---@field istailcall      boolean
---@field nups            integer
---@field nparams         integer
---@field isvararg        boolean
---@field func            function
---@field ftransfer       integer
---@field ntransfer       integer
---@field activelines     table

---
---Enters an interactive mode with the user, running each string that the user enters.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.debug"])
---
function debug.debug() end

---@version 5.1
---
---Returns the environment of object `o` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getfenv"])
---
---@param o any
---@return table
---@nodiscard
function debug.getfenv(o) end

---
---Returns the current hook settings of the thread.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.gethook"])
---
---@param co? thread
---@return function hook
---@return string mask
---@return integer count
---@nodiscard
function debug.gethook(co) end

---@alias infowhat string
---|+"n"     # `name` and `namewhat`
---|+"S"     # `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`
---|+"l"     # `currentline`
---|+"t"     # `istailcall`
---|+"u" # `nups`, `nparams`, and `isvararg`
---|+"f"     # `func`
---|+"r"     # `ftransfer` and `ntransfer`
---|+"L"     # `activelines`

---
---Returns a table with information about a function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getinfo"])
---
---@overload fun(f: integer|function, what?: infowhat):debuginfo
---@param thread thread
---@param f      integer|async fun(...):...
---@param what?  infowhat
---@return debuginfo
---@nodiscard
function debug.getinfo(thread, f, what) end

---
---Returns the name and the value of the local variable with index `local` of the function at level `f` of the stack.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getlocal"])
---
---@overload fun(f: integer|async fun(...):..., index: integer):string, any
---@param thread  thread
---@param f       integer|async fun(...):...
---@param index   integer
---@return string name
---@return any    value
---@nodiscard
function debug.getlocal(thread, f, index) end

---
---Returns the metatable of the given value.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getmetatable"])
---
---@param object any
---@return table metatable
---@nodiscard
function debug.getmetatable(object) end

---
---Returns the registry table.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getregistry"])
---
---@return table
---@nodiscard
function debug.getregistry() end

---
---Returns the name and the value of the upvalue with index `up` of the function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getupvalue"])
---
---@param f  async fun(...):...
---@param up integer
---@return string name
---@return any    value
---@nodiscard
function debug.getupvalue(f, up) end

---
---Returns the `n`-th user value associated
---to the userdata `u` plus a boolean,
---`false` if the userdata does not have that value.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getuservalue"])
---
---@param u  userdata
---@param n? integer
---@return any
---@return boolean
---@nodiscard
function debug.getuservalue(u, n) end

---
---### **Deprecated in `Lua 5.4.2`**
---
---Sets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.
---
---In case of success, this function returns the old limit. In case of error, it returns `false`.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setcstacklimit"])
---
---@deprecated
---@param limit integer
---@return integer|boolean
function debug.setcstacklimit(limit) end

---
---Sets the environment of the given `object` to the given `table` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setfenv"])
---
---@version 5.1
---@generic T
---@param object T
---@param env    table
---@return T object
function debug.setfenv(object, env) end

---@alias hookmask string
---|+"c" # Calls hook when Lua calls a function.
---|+"r" # Calls hook when Lua returns from a function.
---|+"l" # Calls hook when Lua enters a new line of code.

---
---Sets the given function as a hook.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.sethook"])
---
---@overload fun(hook: (async fun(...):...), mask: hookmask, count?: integer)
---@overload fun(thread: thread):...
---@overload fun(...):...
---@param thread thread
---@param hook   async fun(...):...
---@param mask   hookmask
---@param count? integer
function debug.sethook(thread, hook, mask, count) end

---
---Assigns the `value` to the local variable with index `local` of the function at `level` of the stack.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setlocal"])
---
---@overload fun(level: integer, index: integer, value: any):string
---@param thread thread
---@param level  integer
---@param index  integer
---@param value  any
---@return string name
function debug.setlocal(thread, level, index, value) end

---
---Sets the metatable for the given value to the given table (which can be `nil`).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setmetatable"])
---
---@generic T
---@param value T
---@param meta? table
---@return T value
function debug.setmetatable(value, meta) end

---
---Assigns the `value` to the upvalue with index `up` of the function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setupvalue"])
---
---@param f     async fun(...):...
---@param up    integer
---@param value any
---@return string name
function debug.setupvalue(f, up, value) end

---
---Sets the given `value` as
---the `n`-th user value associated to the given `udata`.
---`udata` must be a full userdata.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setuservalue"])
---
---@param udata userdata
---@param value any
---@param n?    integer
---@return userdata udata
function debug.setuservalue(udata, value, n) end

---
---Returns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.traceback"])
---
---@overload fun(message?: any, level?: integer): string
---@param thread   thread
---@param message? any
---@param level?   integer
---@return string  message
---@nodiscard
function debug.traceback(thread, message, level) end

---@version >5.2, JIT
---
---Returns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.upvalueid"])
---
---@param f async fun(...):...
---@param n integer
---@return lightuserdata id
---@nodiscard
function debug.upvalueid(f, n) end

---@version >5.2, JIT
---
---Make the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.upvaluejoin"])
---
---@param f1 async fun(...):...
---@param n1 integer
---@param f2 async fun(...):...
---@param n2 integer
function debug.upvaluejoin(f1, n1, f2, n2) end

return debug
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/debug.lua	
OnSetText called with text:	---@meta os

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os"])
---
---@class oslib
os = {}

---
---Returns an approximation of the amount in seconds of CPU time used by the program.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.clock"])
---
---@return number
---@nodiscard
function os.clock() end

---@class osdate:osdateparam
---
---four digits
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.year"])
---
---@field year  integer|string
---
---1-12
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.month"])
---
---@field month integer|string
---
---1-31
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.day"])
---
---@field day   integer|string
---
---0-23
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.hour"])
---
---@field hour  integer|string
---
---0-59
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.min"])
---
---@field min   integer|string
---
---0-61
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.sec"])
---
---@field sec   integer|string
---
---weekday, 1–7, Sunday is 1
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.wday"])
---
---@field wday  integer|string
---
---day of the year, 1–366
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.yday"])
---
---@field yday  integer|string
---
---daylight saving flag, a boolean
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.isdst"])
---
---@field isdst boolean

---
---Returns a string or a table containing date and time, formatted according to the given string `format`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.date"])
---
---@param format? string
---@param time?   integer
---@return string|osdate
---@nodiscard
function os.date(format, time) end

---
---Returns the difference, in seconds, from time `t1` to time `t2`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.difftime"])
---
---@param t2 integer
---@param t1 integer
---@return integer
---@nodiscard
function os.difftime(t2, t1) end

---
---Passes `command` to be executed by an operating system shell.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.execute"])
---
---@param command? string
---@return boolean?  suc
---@return exitcode? exitcode
---@return integer?  code
function os.execute(command) end

---
---Calls the ISO C function `exit` to terminate the host program.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.exit"])
---
---@param code?  boolean|integer
---@param close? boolean
function os.exit(code, close) end

---
---Returns the value of the process environment variable `varname`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.getenv"])
---
---@param varname string
---@return string?
---@nodiscard
function os.getenv(varname) end

---
---Deletes the file with the given name.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.remove"])
---
---@param filename string
---@return boolean suc
---@return string? errmsg
function os.remove(filename) end

---
---Renames the file or directory named `oldname` to `newname`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.rename"])
---
---@param oldname string
---@param newname string
---@return boolean suc
---@return string? errmsg
function os.rename(oldname, newname) end

---@alias localecategory
---|>"all"
---| "collate"
---| "ctype"
---| "monetary"
---| "numeric"
---| "time"

---
---Sets the current locale of the program.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.setlocale"])
---
---@param locale    string|nil
---@param category? localecategory
---@return string localecategory
function os.setlocale(locale, category) end

---@class osdateparam
---
---four digits
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.year"])
---
---@field year  integer|string
---
---1-12
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.month"])
---
---@field month integer|string
---
---1-31
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.day"])
---
---@field day   integer|string
---
---0-23
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.hour"])
---
---@field hour  (integer|string)?
---
---0-59
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.min"])
---
---@field min   (integer|string)?
---
---0-61
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.sec"])
---
---@field sec   (integer|string)?
---
---weekday, 1–7, Sunday is 1
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.wday"])
---
---@field wday  (integer|string)?
---
---day of the year, 1–366
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.yday"])
---
---@field yday  (integer|string)?
---
---daylight saving flag, a boolean
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.isdst"])
---
---@field isdst boolean?

---
---Returns the current time when called without arguments, or a time representing the local date and time specified by the given table.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.time"])
---
---@param date? osdateparam
---@return integer
---@nodiscard
function os.time(date) end

---
---Returns a string with a file name that can be used for a temporary file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.tmpname"])
---
---@return string
---@nodiscard
function os.tmpname() end

return os
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/os.lua	
OnSetText called with text:	---@meta io

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io"])
---
---@class iolib
---
---standard input.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.stdin"])
---
---@field stdin  file*
---
---standard output.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.stdout"])
---
---@field stdout file*
---
---standard error.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.stderr"])
---
---@field stderr file*
io = {}

---@alias openmode
---|>"r"   # Read mode.
---| "w"   # Write mode.
---| "a"   # Append mode.
---| "r+"  # Update mode, all previous data is preserved.
---| "w+"  # Update mode, all previous data is erased.
---| "a+"  # Append update mode, previous data is preserved, writing is only allowed at the end of file.
---| "rb"  # Read mode. (in binary mode.)
---| "wb"  # Write mode. (in binary mode.)
---| "ab"  # Append mode. (in binary mode.)
---| "r+b" # Update mode, all previous data is preserved. (in binary mode.)
---| "w+b" # Update mode, all previous data is erased. (in binary mode.)
---| "a+b" # Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)

---
---Close `file` or default output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.close"])
---
---@param file? file*
---@return boolean?  suc
---@return exitcode? exitcode
---@return integer?  code
function io.close(file) end

---
---Saves any written data to default output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.flush"])
---
function io.flush() end

---
---Sets `file` as the default input file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.input"])
---
---@overload fun():file*
---@param file string|file*
function io.input(file) end

---
---------
---```lua
---for c in io.lines(filename, ...) do
---    body
---end
---```
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.lines"])
---
---@param filename string?
---@param ... readmode
---@return fun():any, ...
function io.lines(filename, ...) end

---
---Opens a file, in the mode specified in the string `mode`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.open"])
---
---@param filename string
---@param mode?    openmode
---@return file*?
---@return string? errmsg
---@nodiscard
function io.open(filename, mode) end

---
---Sets `file` as the default output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.output"])
---
---@overload fun():file*
---@param file string|file*
function io.output(file) end

---@alias popenmode
---| "r" # Read data from this program by `file`.
---| "w" # Write data to this program by `file`.

---
---Starts program prog in a separated process.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.popen"])
---
---@param prog  string
---@param mode? popenmode
---@return file*?
---@return string? errmsg
function io.popen(prog, mode) end

---
---Reads the `file`, according to the given formats, which specify what to read.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.read"])
---
---@param ... readmode
---@return any
---@return any ...
---@nodiscard
function io.read(...) end

---
---In case of success, returns a handle for a temporary file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.tmpfile"])
---
---@return file*
---@nodiscard
function io.tmpfile() end

---@alias filetype
---| "file"        # Is an open file handle.
---| "closed file" # Is a closed file handle.
---| `nil`         # Is not a file handle.

---
---Checks whether `obj` is a valid file handle.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.type"])
---
---@param file file*
---@return filetype
---@nodiscard
function io.type(file) end

---
---Writes the value of each of its arguments to default output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.write"])
---
---@return file*
---@return string? errmsg
function io.write(...) end

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file"])
---
---@class file*
local file = {}

---@alias readmode integer|string
---| "n"  # Reads a numeral and returns it as number.
---| "a"  # Reads the whole file.
---|>"l"  # Reads the next line skipping the end of line.
---| "L"  # Reads the next line keeping the end of line.

---@alias exitcode "exit"|"signal"

---
---Close `file`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:close"])
---
---@return boolean?  suc
---@return exitcode? exitcode
---@return integer?  code
function file:close() end

---
---Saves any written data to `file`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:flush"])
---
function file:flush() end

---
---------
---```lua
---for c in file:lines(...) do
---    body
---end
---```
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:lines"])
---
---@param ... readmode
---@return fun():any, ...
function file:lines(...) end

---
---Reads the `file`, according to the given formats, which specify what to read.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:read"])
---
---@param ... readmode
---@return any
---@return any ...
---@nodiscard
function file:read(...) end

---@alias seekwhence
---| "set" # Base is beginning of the file.
---|>"cur" # Base is current position.
---| "end" # Base is end of file.

---
---Sets and gets the file position, measured from the beginning of the file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:seek"])
---
---@param whence? seekwhence
---@param offset? integer
---@return integer offset
---@return string? errmsg
function file:seek(whence, offset) end

---@alias vbuf
---| "no"   # Output operation appears immediately.
---| "full" # Performed only when the buffer is full.
---| "line" # Buffered until a newline is output.

---
---Sets the buffering mode for an output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:setvbuf"])
---
---@param mode vbuf
---@param size? integer
function file:setvbuf(mode, size) end

---
---Writes the value of each of its arguments to `file`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:write"])
---
---@param ... string|number
---@return file*?
---@return string? errmsg
function file:write(...) end

return io
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/io.lua	
OnSetText called with text:	---@meta table

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table"])
---
---@class tablelib
table = {}

---
---Given a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ··· sep..list[j]`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.concat"])
---
---@param list table
---@param sep? string
---@param i?   integer
---@param j?   integer
---@return string
---@nodiscard
function table.concat(list, sep, i, j) end

---
---Inserts element `value` at position `pos` in `list`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.insert"])
---
---@overload fun(list: table, value: any)
---@param list table
---@param pos integer
---@param value any
function table.insert(list, pos, value) end

---@version <5.1
---
---Returns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.maxn"])
---
---@param table table
---@return integer
---@nodiscard
function table.maxn(table) end

---@version >5.3, JIT
---
---Moves elements from table `a1` to table `a2`.
---```lua
---a2[t],··· =
---a1[f],···,a1[e]
---return a2
---```
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.move"])
---
---@param a1  table
---@param f   integer
---@param e   integer
---@param t   integer
---@param a2? table
---@return table a2
function table.move(a1, f, e, t, a2) end

---@version >5.2, JIT
---
---Returns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `"n"` with the total number of arguments.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.pack"])
---
---@return table
---@nodiscard
function table.pack(...) end

---
---Removes from `list` the element at position `pos`, returning the value of the removed element.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.remove"])
---
---@param list table
---@param pos? integer
---@return any
function table.remove(list, pos) end

---
---Sorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.sort"])
---
---@generic T
---@param list T[]
---@param comp? fun(a: T, b: T):boolean
function table.sort(list, comp) end

---@version >5.2, JIT
---
---Returns the elements from the given list. This function is equivalent to
---```lua
---    return list[i], list[i+1], ···, list[j]
---```
---By default, `i` is `1` and `j` is `#list`.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.unpack"])
---
---@generic T1, T2, T3, T4, T5, T6, T7, T8, T9, T10
---@param list {
--- [1]?: T1,
--- [2]?: T2,
--- [3]?: T3,
--- [4]?: T4,
--- [5]?: T5,
--- [6]?: T6,
--- [7]?: T7,
--- [8]?: T8,
--- [9]?: T9,
--- [10]?: T10,
---}
---@param i?   integer
---@param j?   integer
---@return T1, T2, T3, T4, T5, T6, T7, T8, T9, T10
---@nodiscard
function table.unpack(list, i, j) end

---@version <5.1, JIT
---
---Executes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.foreach"])
---
---@generic T
---@param list any
---@param callback fun(key: string, value: any):T|nil
---@return T|nil
---@deprecated
function table.foreach(list, callback) end

---@version <5.1, JIT
---
---Executes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.foreachi"])
---
---@generic T
---@param list any
---@param callback fun(key: string, value: any):T|nil
---@return T|nil
---@deprecated
function table.foreachi(list, callback) end

---@version <5.1, JIT
---
---Returns the number of elements in the table. This function is equivalent to `#list`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.getn"])
---
---@generic T
---@param list T[]
---@return integer
---@nodiscard
---@deprecated
function table.getn(list) end

return table
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/table.lua	
OnSetText called with text:	---@meta math

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math"])
---
---@class mathlib
---
---A value larger than any other numeric value.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.huge"])
---
---@field huge       number
---
---Miss locale <math.maxinteger>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.maxinteger"])
---
---@field maxinteger integer
---
---Miss locale <math.mininteger>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.mininteger"])
---
---@field mininteger integer
---
---The value of *π*.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.pi"])
---
---@field pi         number
math = {}

---
---Returns the absolute value of `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.abs"])
---
---@generic Number: number
---@param x Number
---@return Number
---@nodiscard
function math.abs(x) end

---
---Returns the arc cosine of `x` (in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.acos"])
---
---@param x number
---@return number
---@nodiscard
function math.acos(x) end

---
---Returns the arc sine of `x` (in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.asin"])
---
---@param x number
---@return number
---@nodiscard
function math.asin(x) end

---
---Returns the arc tangent of `y/x` (in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.atan"])
---
---@param y  number
---@param x? number
---@return number
---@nodiscard
function math.atan(y, x) end

---@version <5.2
---
---Returns the arc tangent of `y/x` (in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.atan2"])
---
---@param y number
---@param x number
---@return number
---@nodiscard
function math.atan2(y, x) end

---
---Returns the smallest integral value larger than or equal to `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.ceil"])
---
---@param x number
---@return integer
---@nodiscard
function math.ceil(x) end

---
---Returns the cosine of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.cos"])
---
---@param x number
---@return number
---@nodiscard
function math.cos(x) end

---@version <5.2
---
---Returns the hyperbolic cosine of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.cosh"])
---
---@param x number
---@return number
---@nodiscard
function math.cosh(x) end

---
---Converts the angle `x` from radians to degrees.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.deg"])
---
---@param x number
---@return number
---@nodiscard
function math.deg(x) end

---
---Returns the value `e^x` (where `e` is the base of natural logarithms).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.exp"])
---
---@param x number
---@return number
---@nodiscard
function math.exp(x) end

---
---Returns the largest integral value smaller than or equal to `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.floor"])
---
---@param x number
---@return integer
---@nodiscard
function math.floor(x) end

---
---Returns the remainder of the division of `x` by `y` that rounds the quotient towards zero.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.fmod"])
---
---@param x number
---@param y number
---@return number
---@nodiscard
function math.fmod(x, y) end

---@version <5.2
---
---Decompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.frexp"])
---
---@param x number
---@return number m
---@return number e
---@nodiscard
function math.frexp(x) end

---@version <5.2
---
---Returns `m * (2 ^ e)` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.ldexp"])
---
---@param m number
---@param e number
---@return number
---@nodiscard
function math.ldexp(m, e) end

---
---Returns the logarithm of `x` in the given base.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.log"])
---
---@param x     number
---@param base? integer
---@return number
---@nodiscard
function math.log(x, base) end

---@version <5.1
---
---Returns the base-10 logarithm of x.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.log10"])
---
---@param x number
---@return number
---@nodiscard
function math.log10(x) end

---
---Returns the argument with the maximum value, according to the Lua operator `<`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.max"])
---
---@generic Number: number
---@param x Number
---@param ... Number
---@return Number
---@nodiscard
function math.max(x, ...) end

---
---Returns the argument with the minimum value, according to the Lua operator `<`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.min"])
---
---@generic Number: number
---@param x Number
---@param ... Number
---@return Number
---@nodiscard
function math.min(x, ...) end

---
---Returns the integral part of `x` and the fractional part of `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.modf"])
---
---@param x number
---@return integer
---@return number
---@nodiscard
function math.modf(x) end

---@version <5.2
---
---Returns `x ^ y` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.pow"])
---
---@param x number
---@param y number
---@return number
---@nodiscard
function math.pow(x, y) end

---
---Converts the angle `x` from degrees to radians.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.rad"])
---
---@param x number
---@return number
---@nodiscard
function math.rad(x) end

---
---* `math.random()`: Returns a float in the range [0,1).
---* `math.random(n)`: Returns a integer in the range [1, n].
---* `math.random(m, n)`: Returns a integer in the range [m, n].
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.random"])
---
---@overload fun():number
---@overload fun(m: integer):integer
---@param m integer
---@param n integer
---@return integer
---@nodiscard
function math.random(m, n) end

---
---* `math.randomseed(x, y)`: Concatenate `x` and `y` into a 128-bit `seed` to reinitialize the pseudo-random generator.
---* `math.randomseed(x)`: Equate to `math.randomseed(x, 0)` .
---* `math.randomseed()`: Generates a seed with a weak attempt for randomness.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.randomseed"])
---
---@param x? integer
---@param y? integer
function math.randomseed(x, y) end

---
---Returns the sine of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.sin"])
---
---@param x number
---@return number
---@nodiscard
function math.sin(x) end

---@version <5.2
---
---Returns the hyperbolic sine of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.sinh"])
---
---@param x number
---@return number
---@nodiscard
function math.sinh(x) end

---
---Returns the square root of `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.sqrt"])
---
---@param x number
---@return number
---@nodiscard
function math.sqrt(x) end

---
---Returns the tangent of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.tan"])
---
---@param x number
---@return number
---@nodiscard
function math.tan(x) end

---@version <5.2
---
---Returns the hyperbolic tangent of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.tanh"])
---
---@param x number
---@return number
---@nodiscard
function math.tanh(x) end

---@version >5.3
---
---Miss locale <math.tointeger>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.tointeger"])
---
---@param x any
---@return integer?
---@nodiscard
function math.tointeger(x) end

---@version >5.3
---
---Miss locale <math.type>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.type"])
---
---@param x any
---@return
---| '"integer"'
---| '"float"'
---| 'nil'
---@nodiscard
function math.type(x) end

---@version >5.3
---
---Miss locale <math.ult>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.ult"])
---
---@param m integer
---@param n integer
---@return boolean
---@nodiscard
function math.ult(m, n) end

return math
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua	
OnSetText called with text:	---@meta utf8

---@version >5.3
---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8"])
---
---@class utf8lib
---
---The pattern which matches exactly one UTF-8 byte sequence, assuming that the subject is a valid UTF-8 string.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.charpattern"])
---
---@field charpattern string
utf8 = {}

---
---Receives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.char"])
---
---@param code integer
---@param ... integer
---@return string
---@nodiscard
function utf8.char(code, ...) end

---
---Returns values so that the construction
---```lua
---for p, c in utf8.codes(s) do
---    body
---end
---```
---will iterate over all UTF-8 characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.codes"])
---
---@param s    string
---@param lax? boolean
---@return fun(s: string, p: integer):integer, integer
function utf8.codes(s, lax) end

---
---Returns the codepoints (as integers) from all characters in `s` that start between byte position `i` and `j` (both included).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.codepoint"])
---
---@param s    string
---@param i?   integer
---@param j?   integer
---@param lax? boolean
---@return integer code
---@return integer ...
---@nodiscard
function utf8.codepoint(s, i, j, lax) end

---
---Returns the number of UTF-8 characters in string `s` that start between positions `i` and `j` (both inclusive).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.len"])
---
---@param s    string
---@param i?   integer
---@param j?   integer
---@param lax? boolean
---@return integer?
---@return integer? errpos
---@nodiscard
function utf8.len(s, i, j, lax) end

---
---Returns the position (in bytes) where the encoding of the `n`-th character of `s` (counting from position `i`) starts.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.offset"])
---
---@param s string
---@param n integer
---@param i? integer
---@return integer p
---@nodiscard
function utf8.offset(s, n, i) end

return utf8
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/utf8.lua	
OnSetText called with text:	---@meta _

---
---Command-line arguments of Lua Standalone.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-arg"])
---
---@type string[]
arg = {}

---
---Raises an error if the value of its argument v is false (i.e., `nil` or `false`); otherwise, returns all its arguments. In case of error, `message` is the error object; when absent, it defaults to `"assertion failed!"`
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-assert"])
---
---@generic T
---@param v? T
---@param message? any
---@param ... any
---@return T
---@return any ...
function assert(v, message, ...) end

---@alias gcoptions
---|>"collect"      # Performs a full garbage-collection cycle.
---| "stop"         # Stops automatic execution.
---| "restart"      # Restarts automatic execution.
---| "count"        # Returns the total memory in Kbytes.
---| "step"         # Performs a garbage-collection step.
---| "isrunning"    # Returns whether the collector is running.
---| "incremental"  # Change the collector mode to incremental.
---| "generational" # Change the collector mode to generational.

---
---This function is a generic interface to the garbage collector. It performs different functions according to its first argument, `opt`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-collectgarbage"])
---
---@param opt? gcoptions
---@param ... any
---@return any
function collectgarbage(opt, ...) end

---
---Opens the named file and executes its content as a Lua chunk. When called without arguments, `dofile` executes the content of the standard input (`stdin`). Returns all values returned by the chunk. In case of errors, `dofile` propagates the error to its caller. (That is, `dofile` does not run in protected mode.)
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-dofile"])
---
---@param filename? string
---@return any ...
function dofile(filename) end

---
---Terminates the last protected function called and returns message as the error object.
---
---Usually, `error` adds some information about the error position at the beginning of the message, if the message is a string.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-error"])
---
---@param message any
---@param level?  integer
function error(message, level) end

---
---A global variable (not a function) that holds the global environment (see [§2.2](command:extension.lua.doc?["en-us/54/manual.html/2.2"])). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-_G"])
---
---@class _G
_G = {}

---@version 5.1
---
---Returns the current environment in use by the function. `f` can be a Lua function or a number that specifies the function at that stack level.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-getfenv"])
---
---@param f? integer|async fun(...):...
---@return table
---@nodiscard
function getfenv(f) end

---
---If object does not have a metatable, returns nil. Otherwise, if the object's metatable has a __metatable field, returns the associated value. Otherwise, returns the metatable of the given object.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-getmetatable"])
---
---@param object any
---@return table metatable
---@nodiscard
function getmetatable(object) end

---
---Returns three values (an iterator function, the table `t`, and `0`) so that the construction
---```lua
---    for i,v in ipairs(t) do body end
---```
---will iterate over the key–value pairs `(1,t[1]), (2,t[2]), ...`, up to the first absent index.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-ipairs"])
---
---@generic T: table, V
---@param t T
---@return fun(table: V[], i?: integer):integer, V
---@return T
---@return integer i
function ipairs(t) end

---@alias loadmode
---| "b"  # Only binary chunks.
---| "t"  # Only text chunks.
---|>"bt" # Both binary and text.

---
---Loads a chunk.
---
---If `chunk` is a string, the chunk is this string. If `chunk` is a function, `load` calls it repeatedly to get the chunk pieces. Each call to `chunk` must return a string that concatenates with previous results. A return of an empty string, `nil`, or no value signals the end of the chunk.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-load"])
---
---@param chunk      string|function
---@param chunkname? string
---@param mode?      loadmode
---@param env?       table
---@return function?
---@return string?   error_message
---@nodiscard
function load(chunk, chunkname, mode, env) end

---
---Loads a chunk from file `filename` or from the standard input, if no file name is given.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-loadfile"])
---
---@param filename? string
---@param mode?     loadmode
---@param env?      table
---@return function?
---@return string?  error_message
---@nodiscard
function loadfile(filename, mode, env) end

---@version 5.1
---
---Loads a chunk from the given string.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-loadstring"])
---
---@param text       string
---@param chunkname? string
---@return function?
---@return string?   error_message
---@nodiscard
function loadstring(text, chunkname) end

---@version 5.1
---@param proxy boolean|table|userdata
---@return userdata
---@nodiscard
function newproxy(proxy) end

---@version 5.1
---
---Creates a module.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-module"])
---
---@param name string
---@param ...  any
function module(name, ...) end

---
---Allows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. A call to `next` returns the next index of the table and its associated value. When called with `nil` as its second argument, `next` returns an initial index and its associated value. When called with the last index, or with `nil` in an empty table, `next` returns `nil`. If the second argument is absent, then it is interpreted as `nil`. In particular, you can use `next(t)` to check whether a table is empty.
---
---The order in which the indices are enumerated is not specified, *even for numeric indices*. (To traverse a table in numerical order, use a numerical `for`.)
---
---The behavior of `next` is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may set existing fields to nil.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-next"])
---
---@generic K, V
---@param table table<K, V>
---@param index? K
---@return K?
---@return V?
---@nodiscard
function next(table, index) end

---
---If `t` has a metamethod `__pairs`, calls it with t as argument and returns the first three results from the call.
---
---Otherwise, returns three values: the [next](command:extension.lua.doc?["en-us/54/manual.html/pdf-next"]) function, the table `t`, and `nil`, so that the construction
---```lua
---    for k,v in pairs(t) do body end
---```
---will iterate over all key–value pairs of table `t`.
---
---See function [next](command:extension.lua.doc?["en-us/54/manual.html/pdf-next"]) for the caveats of modifying the table during its traversal.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-pairs"])
---
---@generic T: table, K, V
---@param t T
---@return fun(table: table<K, V>, index?: K):K, V
---@return T
function pairs(t) end

---
---Calls the function `f` with the given arguments in *protected mode*. This means that any error inside `f` is not propagated; instead, `pcall` catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, `pcall` also returns all results from the call, after this first result. In case of any error, `pcall` returns `false` plus the error object.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-pcall"])
---
---@param f     async fun(...):...
---@param arg1? any
---@param ...   any
---@return boolean success
---@return any result
---@return any ...
function pcall(f, arg1, ...) end

---
---Receives any number of arguments and prints their values to `stdout`, converting each argument to a string following the same rules of [tostring](command:extension.lua.doc?["en-us/54/manual.html/pdf-tostring"]).
---The function print is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use [string.format](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.format"]) and [io.write](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.write"]).
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-print"])
---
---@param ... any
function print(...) end

---
---Checks whether v1 is equal to v2, without invoking the `__eq` metamethod.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-rawequal"])
---
---@param v1 any
---@param v2 any
---@return boolean
---@nodiscard
function rawequal(v1, v2) end

---
---Gets the real value of `table[index]`, without invoking the `__index` metamethod.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-rawget"])
---
---@param table table
---@param index any
---@return any
---@nodiscard
function rawget(table, index) end

---
---Returns the length of the object `v`, without invoking the `__len` metamethod.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-rawlen"])
---
---@param v table|string
---@return integer len
---@nodiscard
function rawlen(v) end

---
---Sets the real value of `table[index]` to `value`, without using the `__newindex` metavalue. `table` must be a table, `index` any value different from `nil` and `NaN`, and `value` any Lua value.
---This function returns `table`.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-rawset"])
---
---@param table table
---@param index any
---@param value any
---@return table
function rawset(table, index, value) end

---
---If `index` is a number, returns all arguments after argument number `index`; a negative number indexes from the end (`-1` is the last argument). Otherwise, `index` must be the string `"#"`, and `select` returns the total number of extra arguments it received.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-select"])
---
---@param index integer|"#"
---@param ...   any
---@return any
---@nodiscard
function select(index, ...) end

---@version 5.1
---
---Sets the environment to be used by the given function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-setfenv"])
---
---@param f     (async fun(...):...)|integer
---@param table table
---@return function
function setfenv(f, table) end


---@class metatable
---@field __mode 'v'|'k'|'kv'|nil
---@field __metatable any|nil
---@field __tostring (fun(t):string)|nil
---@field __gc fun(t)|nil
---@field __add (fun(t1,t2):any)|nil
---@field __sub (fun(t1,t2):any)|nil
---@field __mul (fun(t1,t2):any)|nil
---@field __div (fun(t1,t2):any)|nil
---@field __mod (fun(t1,t2):any)|nil
---@field __pow (fun(t1,t2):any)|nil
---@field __unm (fun(t):any)|nil
---@field __idiv (fun(t1,t2):any)|nil
---@field __band (fun(t1,t2):any)|nil
---@field __bor (fun(t1,t2):any)|nil
---@field __bxor (fun(t1,t2):any)|nil
---@field __bnot (fun(t):any)|nil
---@field __shl (fun(t1,t2):any)|nil
---@field __shr (fun(t1,t2):any)|nil
---@field __concat (fun(t1,t2):any)|nil
---@field __len (fun(t):integer)|nil
---@field __eq (fun(t1,t2):boolean)|nil
---@field __lt (fun(t1,t2):boolean)|nil
---@field __le (fun(t1,t2):boolean)|nil
---@field __index table|(fun(t,k):any)|nil
---@field __newindex table|fun(t,k,v)|nil
---@field __call (fun(t,...):...)|nil
---@field __pairs (fun(t):((fun(t,k,v):any,any),any,any))|nil
---@field __close (fun(t,errobj):any)|nil

---
---Sets the metatable for the given table. If `metatable` is `nil`, removes the metatable of the given table. If the original metatable has a `__metatable` field, raises an error.
---
---This function returns `table`.
---
---To change the metatable of other types from Lua code, you must use the debug library ([§6.10](command:extension.lua.doc?["en-us/54/manual.html/6.10"])).
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-setmetatable"])
---
---@param table      table
---@param metatable? metatable|table
---@return table
function setmetatable(table, metatable) end

---
---When called with no `base`, `tonumber` tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then `tonumber` returns this number; otherwise, it returns `fail`.
---
---The conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see [§3.1](command:extension.lua.doc?["en-us/54/manual.html/3.1"])). The string may have leading and trailing spaces and a sign.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-tonumber"])
---
---@overload fun(e: string, base: integer):integer
---@param e any
---@return number?
---@nodiscard
function tonumber(e) end

---
---Receives a value of any type and converts it to a string in a human-readable format.
---
---If the metatable of `v` has a `__tostring` field, then `tostring` calls the corresponding value with `v` as argument, and uses the result of the call as its result. Otherwise, if the metatable of `v` has a `__name` field with a string value, `tostring` may use that string in its final result.
---
---For complete control of how numbers are converted, use [string.format](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.format"]).
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-tostring"])
---
---@param v any
---@return string
---@nodiscard
function tostring(v) end

---@alias type
---| "nil"
---| "number"
---| "string"
---| "boolean"
---| "table"
---| "function"
---| "thread"
---| "userdata"

---
---Returns the type of its only argument, coded as a string. The possible results of this function are `"nil"` (a string, not the value `nil`), `"number"`, `"string"`, `"boolean"`, `"table"`, `"function"`, `"thread"`, and `"userdata"`.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-type"])
---
---@param v any
---@return type type
---@nodiscard
function type(v) end

---
---A global variable (not a function) that holds a string containing the running Lua version.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-_VERSION"])
---
_VERSION = "Lua 5.4"

---@version >5.4
---
---Emits a warning with a message composed by the concatenation of all its arguments (which should be strings).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-warn"])
---
---@param message string
---@param ...     any
function warn(message, ...) end

---
---Calls function `f` with the given arguments in protected mode with a new message handler.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-xpcall"])
---
---@param f     async fun(...):...
---@param msgh  function
---@param arg1? any
---@param ...   any
---@return boolean success
---@return any result
---@return any ...
function xpcall(f, msgh, arg1, ...) end

---@version 5.1
---
---Returns the elements from the given `list`. This function is equivalent to
---```lua
---    return list[i], list[i+1], ···, list[j]
---```
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-unpack"])
---
---@generic T1, T2, T3, T4, T5, T6, T7, T8, T9, T10
---@param list {
--- [1]?: T1,
--- [2]?: T2,
--- [3]?: T3,
--- [4]?: T4,
--- [5]?: T5,
--- [6]?: T6,
--- [7]?: T7,
--- [8]?: T8,
--- [9]?: T9,
--- [10]?: T10,
---}
---@param i?   integer
---@param j?   integer
---@return T1, T2, T3, T4, T5, T6, T7, T8, T9, T10
---@nodiscard
function unpack(list, i, j) end

---@version 5.1
---@generic T1, T2, T3, T4, T5, T6, T7, T8, T9
---@param list {[1]: T1, [2]: T2, [3]: T3, [4]: T4, [5]: T5, [6]: T6, [7]: T7, [8]: T8, [9]: T9 }
---@return T1, T2, T3, T4, T5, T6, T7, T8, T9
---@nodiscard
function unpack(list) end
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua	
OnSetText called with text:	fx_version 'cerulean'
author 'SUP2Ak'
game 'common'
use_experimental_fxv2_oal 'yes'
repository 'https://github.com/SUP2Ak/hot-reload-fivem'
description 'Hot Reload for FiveM'
license 'MIT'
version '1.0.0'

server_only 'yes'
server_script 'dist/server.js'
dependency 'yarn'
	
Returning diffs count:	1	
OnSetText called with text:		
Returning diffs count:	0	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Kept original item:		
Found table content:	 .name, .age 	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Creating diff. Start:	697	End:	712	
New text:	{ name = true, age = true }	
Returning diffs count:	2	
OnSetText called with text:	fx_version 'cerulean'
game 'common'
use_experimental_fxv2_oal 'yes'
lua54 'yes'

name 'oxmysql'
author 'Overextended'
version '2.11.2'
license 'LGPL-3.0-or-later'
repository 'https://github.com/overextended/oxmysql.git'
description 'FXServer to MySQL communication via node-mysql2'

dependencies {
    '/server:7290',
}

client_script 'ui.lua'
server_script 'dist/build.js'

files {
	'web/build/index.html',
	'web/build/**/*'
}

ui_page 'web/build/index.html'

provide 'mysql-async'
provide 'ghmattimysql'

convar_category 'OxMySQL' {
	'Configuration',
	{
		{ 'Connection string', 'mysql_connection_string', 'CV_STRING', 'mysql://user:password@localhost/database' },
		{ 'Debug', 'mysql_debug', 'CV_BOOL', 'false' }
	}
}
	
Found table content:	
    '/server:7290',
	
Processing item:	'/server:7290'	
Kept original item:	'/server:7290'	
Processing item:		
Kept original item:		
Found table content:	
	'web/build/index.html',
	'web/build/**/*'
	
Processing item:	'web/build/index.html'	
Kept original item:	'web/build/index.html'	
Processing item:	'web/build/**/*'	
Kept original item:	'web/build/**/*'	
Found table content:	
	'Configuration',
	{
		{ 'Connection string', 'mysql_connection_string', 'CV_STRING', 'mysql://user:password@localhost/database' 	
Processing item:	'Configuration'	
Kept original item:	'Configuration'	
Processing item:	{
		{ 'Connection string'	
Kept original item:	{
		{ 'Connection string'	
Processing item:	'mysql_connection_string'	
Kept original item:	'mysql_connection_string'	
Processing item:	'CV_STRING'	
Kept original item:	'CV_STRING'	
Processing item:	'mysql://user:password@localhost/database'	
Kept original item:	'mysql://user:password@localhost/database'	
Found table content:	 'Debug', 'mysql_debug', 'CV_BOOL', 'false' 	
Processing item:	'Debug'	
Kept original item:	'Debug'	
Processing item:	'mysql_debug'	
Kept original item:	'mysql_debug'	
Processing item:	'CV_BOOL'	
Kept original item:	'CV_BOOL'	
Processing item:	'false'	
Kept original item:	'false'	
Returning diffs count:	1	
OnSetText called with text:	---@todo [NEW] work in progress 0.0.2 to 0.1.0

-- loadscreen 'modules/loadscreen/client/index.html' -- loadscreen
-- loadscreen_manual_shutdown "yes" -- enable manual shutdown
-- loadscreen_cursor 'yes' -- enable cursor

fx_version 'cerulean'
game 'gta5'
lua54 'yes'
use_experimental_fxv2_oal 'yes'

name 'sublime_core (fivem)'
author 'SUBLiME'
version '0.1.0 (wip)'
repository 'https://github.com/sublime-framework-cfx/sublime_core-fivem'
description 'A new modular framework for FiveM'

shared_script '@sublime_core/import.lua'
server_script 'server.lua'	
Returning diffs count:	1	
OnSetText called with text:	local promise = promise
local Await = Citizen.Await
local GetCurrentResourceName = GetCurrentResourceName()
local GetResourceState = GetResourceState

local function await(fn, query, parameters)
	local p = promise.new()
	fn(nil, query, parameters, function(result, error)
		if error then
			return p:reject(error)
		end

		p:resolve(result)
	end, GetCurrentResourceName, true)
	return Await(p)
end

local type = type
local queryStore = {}

local function safeArgs(query, parameters, cb, transaction)
	local queryType = type(query)

	if queryType == 'number' then
		query = queryStore[query]
	elseif transaction then
		if queryType ~= 'table' then
			error(("First argument expected table, received '%s'"):format(query))
		end
	elseif queryType ~= 'string' then
		error(("First argument expected string, received '%s'"):format(query))
	end

	if parameters then
		local paramType = type(parameters)

		if paramType ~= 'table' and paramType ~= 'function' then
			error(("Second argument expected table or function, received '%s'"):format(parameters))
		end

		if paramType == 'function' or parameters.__cfx_functionReference then
			cb = parameters
			parameters = nil
		end
	end

	if cb and parameters then
		local cbType = type(cb)

		if cbType ~= 'function' and (cbType == 'table' and not cb.__cfx_functionReference) then
			error(("Third argument expected function, received '%s'"):format(cb))
		end
	end

	return query, parameters, cb
end

local oxmysql = exports.oxmysql

local mysql_method_mt = {
	__call = function(self, query, parameters, cb)
		query, parameters, cb = safeArgs(query, parameters, cb, self.method == 'transaction')
		return oxmysql[self.method](nil, query, parameters, cb, GetCurrentResourceName, false)
	end
}

local MySQL = setmetatable(MySQL or {}, {
	__index = function(_, index)
		return function(...)
			return oxmysql[index](nil, ...)
		end
	end
})

for _, method in pairs({
	'scalar', 'single', 'query', 'insert', 'update', 'prepare', 'transaction', 'rawExecute',
}) do
	MySQL[method] = setmetatable({
		method = method,
		await = function(query, parameters)
			query, parameters = safeArgs(query, parameters, nil, method == 'transaction')
			return await(oxmysql[method], query, parameters)
		end
	}, mysql_method_mt)
end

local alias = {
	fetchAll = 'query',
	fetchScalar = 'scalar',
	fetchSingle = 'single',
	insert = 'insert',
	execute = 'update',
	transaction = 'transaction',
	prepare = 'prepare'
}

local alias_mt = {
	__index = function(self, key)
		if alias[key] then
			local method = MySQL[alias[key]]
			MySQL.Async[key] = method
			MySQL.Sync[key] = method.await
			alias[key] = nil
			return self[key]
		end
	end
}

local function addStore(query, cb)
	assert(type(query) == 'string', 'The SQL Query must be a string')

	local storeN = #queryStore + 1
	queryStore[storeN] = query

	return cb and cb(storeN) or storeN
end

MySQL.Sync = setmetatable({ store = addStore }, alias_mt)
MySQL.Async = setmetatable({ store = addStore }, alias_mt)

local function onReady(cb)
	while GetResourceState('oxmysql') ~= 'started' do
		Wait(50)
	end

	oxmysql.awaitConnection()

	return cb and cb() or true
end

MySQL.ready = setmetatable({
	await = onReady
}, {
	__call = function(_, cb)
		Citizen.CreateThreadNow(function() onReady(cb) end)
	end,
})

_ENV.MySQL = MySQL
	
Found table content:		
Found table content:	
	__call = function(self, query, parameters, cb)
		query, parameters, cb = safeArgs(query, parameters, cb, self.method == 'transaction')
		return oxmysql[self.method](nil, query, parameters, cb, GetCurrentResourceName, false)
	end
	
Processing item:	__call = function(self	
Kept original item:	__call = function(self	
Processing item:	query	
Kept original item:	query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	cb)
		query	
Kept original item:	cb)
		query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	cb = safeArgs(query	
Kept original item:	cb = safeArgs(query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	cb	
Kept original item:	cb	
Processing item:	self.method == 'transaction')
		return oxmysql[self.method](nil	
Kept original item:	self.method == 'transaction')
		return oxmysql[self.method](nil	
Processing item:	query	
Kept original item:	query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	cb	
Kept original item:	cb	
Processing item:	GetCurrentResourceName	
Kept original item:	GetCurrentResourceName	
Processing item:	false)
	end	
Kept original item:	false)
	end	
Found table content:		
Found table content:	
	__index = function(_, index)
		return function(...)
			return oxmysql[index](nil, ...)
		end
	end
	
Processing item:	__index = function(_	
Kept original item:	__index = function(_	
Processing item:	index)
		return function(...)
			return oxmysql[index](nil	
Kept original item:	index)
		return function(...)
			return oxmysql[index](nil	
Processing item:	...)
		end
	end	
Found field with dot. Name:	
Found table content:	
	'scalar', 'single', 'query', 'insert', 'update', 'prepare', 'transaction', 'rawExecute',
	
Processing item:	'scalar'	
Kept original item:	'scalar'	
Processing item:	'single'	
Kept original item:	'single'	
Processing item:	'query'	
Kept original item:	'query'	
Processing item:	'insert'	
Kept original item:	'insert'	
Processing item:	'update'	
Kept original item:	'update'	
Processing item:	'prepare'	
Kept original item:	'prepare'	
Processing item:	'transaction'	
Kept original item:	'transaction'	
Processing item:	'rawExecute'	
Kept original item:	'rawExecute'	
Processing item:		
Kept original item:		
Found table content:	
		method = method,
		await = function(query, parameters)
			query, parameters = safeArgs(query, parameters, nil, method == 'transaction')
			return await(oxmysql[method], query, parameters)
		end
		
Processing item:	method = method	
Kept original item:	method = method	
Processing item:	await = function(query	
Kept original item:	await = function(query	
Processing item:	parameters)
			query	
Kept original item:	parameters)
			query	
Processing item:	parameters = safeArgs(query	
Kept original item:	parameters = safeArgs(query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	nil	
Kept original item:	nil	
Processing item:	method == 'transaction')
			return await(oxmysql[method]	
Kept original item:	method == 'transaction')
			return await(oxmysql[method]	
Processing item:	query	
Kept original item:	query	
Processing item:	parameters)
		end	
Kept original item:	parameters)
		end	
Found table content:	
	fetchAll = 'query',
	fetchScalar = 'scalar',
	fetchSingle = 'single',
	insert = 'insert',
	execute = 'update',
	transaction = 'transaction',
	prepare = 'prepare'
	
Processing item:	fetchAll = 'query'	
Kept original item:	fetchAll = 'query'	
Processing item:	fetchScalar = 'scalar'	
Kept original item:	fetchScalar = 'scalar'	
Processing item:	fetchSingle = 'single'	
Kept original item:	fetchSingle = 'single'	
Processing item:	insert = 'insert'	
Kept original item:	insert = 'insert'	
Processing item:	execute = 'update'	
Kept original item:	execute = 'update'	
Processing item:	transaction = 'transaction'	
Kept original item:	transaction = 'transaction'	
Processing item:	prepare = 'prepare'	
Kept original item:	prepare = 'prepare'	
Found table content:	
	__index = function(self, key)
		if alias[key] then
			local method = MySQL[alias[key]]
			MySQL.Async[key] = method
			MySQL.Sync[key] = method.await
			alias[key] = nil
			return self[key]
		end
	end
	
Processing item:	__index = function(self	
Kept original item:	__index = function(self	
Processing item:	key)
		if alias[key] then
			local method = MySQL[alias[key]]
			MySQL.Async[key] = method
			MySQL.Sync[key] = method.await
			alias[key] = nil
			return self[key]
		end
	end	
Kept original item:	key)
		if alias[key] then
			local method = MySQL[alias[key]]
			MySQL.Async[key] = method
			MySQL.Sync[key] = method.await
			alias[key] = nil
			return self[key]
		end
	end	
Found table content:	 store = addStore 	
Processing item:	store = addStore	
Kept original item:	store = addStore	
Found table content:	 store = addStore 	
Processing item:	store = addStore	
Kept original item:	store = addStore	
Found table content:	
	await = onReady
	
Processing item:	await = onReady	
Kept original item:	await = onReady	
Found table content:	
	__call = function(_, cb)
		Citizen.CreateThreadNow(function() onReady(cb) end)
	end,
	
Processing item:	__call = function(_	
Kept original item:	__call = function(_	
Processing item:	cb)
		Citizen.CreateThreadNow(function() onReady(cb) end)
	end	
Kept original item:	cb)
		Citizen.CreateThreadNow(function() onReady(cb) end)
	end	
Processing item:		
Kept original item:		
Returning diffs count:	0	
OnSetText called with text:	return {
    -- 'handlers', -- init handlers server & client
    'main', -- init main server & client
}	
Found table content:	
    -- 'handlers', -- init handlers server & client
    'main', -- init main server & client
	
Processing item:	-- 'handlers'	
Kept original item:	-- 'handlers'	
Processing item:	-- init handlers server & client
    'main'	
Kept original item:	-- init handlers server & client
    'main'	
Processing item:	-- init main server & client	
Kept original item:	-- init main server & client	
Returning diffs count:	0	
OnSetText called with text:	---@todo [NEW] work in progress 0.0.2 to 0.1.0

-- loadscreen 'modules/loadscreen/client/index.html' -- loadscreen
-- loadscreen_manual_shutdown "yes" -- enable manual shutdown
-- loadscreen_cursor 'yes' -- enable cursor

fx_version 'cerulean'
game 'gta5'
lua54 'yes'
use_experimental_fxv2_oal 'yes'

name 'sublime_core (fivem)'
author 'SUBLiME'
version '0.1.0 (wip)'
repository 'https://github.com/sublime-framework-cfx/sublime_core-fivem'
description 'A new modular framework for FiveM'

files {
    'config/modules.lua',
    'imports/**/shared.lua',
    'imports/**/client.lua',
    'import.lua',
    -- 'modules/**/shared/**',
    'modules/**/client/**',
}

shared_scripts {
    'init.lua',
    'modules/init.lua',
}	
Found table content:	
    'config/modules.lua',
    'imports/**/shared.lua',
    'imports/**/client.lua',
    'import.lua',
    -- 'modules/**/shared/**',
    'modules/**/client/**',
	
Processing item:	'config/modules.lua'	
Kept original item:	'config/modules.lua'	
Processing item:	'imports/**/shared.lua'	
Kept original item:	'imports/**/shared.lua'	
Processing item:	'imports/**/client.lua'	
Kept original item:	'imports/**/client.lua'	
Processing item:	'import.lua'	
Kept original item:	'import.lua'	
Processing item:	-- 'modules/**/shared/**'	
Kept original item:	-- 'modules/**/shared/**'	
Processing item:	'modules/**/client/**'	
Kept original item:	'modules/**/client/**'	
Processing item:		
Kept original item:		
Found table content:	
    'init.lua',
    'modules/init.lua',
	
Processing item:	'init.lua'	
Kept original item:	'init.lua'	
Processing item:	'modules/init.lua'	
Kept original item:	'modules/init.lua'	
Processing item:		
Kept original item:		
Returning diffs count:	1	
OnSetText called with text:	RegisterNetEvent('oxmysql:openUi', function(data)
    SendNUIMessage({
        action = 'openUI',
        data = data
    })
    SetNuiFocus(true, true)
end)

RegisterNUICallback('exit', function(_, cb)
    cb(true)
    SetNuiFocus(false, false)
end)

RegisterNUICallback('fetchResource', function(data, cb)
    TriggerServerEvent('oxmysql:fetchResource', data)
    cb(true)
end)

RegisterNetEvent('oxmysql:loadResource', function(data)
    SendNUIMessage({
        action = 'loadResource',
        data = data
    })
end)	
Found table content:	
        action = 'openUI',
        data = data
    	
Processing item:	action = 'openUI'	
Kept original item:	action = 'openUI'	
Processing item:	data = data	
Kept original item:	data = data	
Found table content:	
        action = 'loadResource',
        data = data
    	
Processing item:	action = 'loadResource'	
Kept original item:	action = 'loadResource'	
Processing item:	data = data	
Kept original item:	data = data	
Returning diffs count:	0	
OnSetText called with text:	local sublime_core <const> = 'sublime_core'
local IsDuplicityVersion <const>, await <const> = IsDuplicityVersion, Citizen.Await
local LoadResourceFile <const> = LoadResourceFile
local GetResourceState <const> = GetResourceState
local GetGameName <const> = GetGameName
local GetCurrentResourceName <const>, AddEventHandler <const> = GetCurrentResourceName, AddEventHandler
local export = exports[sublime_core]
local service <const> = (IsDuplicityVersion() and 'server') or 'client'

-- local function FormatEvent(self, name, from)
--     return ("__sl__:%s:%s"):format(from or service, joaat(name))
-- end

if not _VERSION:find('5.4') then
    error("^1 Vous devez activer Lua 5.4 dans la resources où vous utilisez l'import, (lua54 'yes') dans votre fxmanifest!^0", 2)
end

if not GetResourceState(sublime_core):find('start') then
	error('^1sublime_core doit être lancé avant cette ressource!^0', 2)
end

local function LoadModule(self, index)
    local func, err
    local dir <const> = ('imports/%s'):format(index)
    local chunk <const> = LoadResourceFile(sublime_core, ('%s/%s.lua'):format(dir, service))
    local shared <const> = LoadResourceFile(sublime_core, ('%s/shared.lua'):format(dir))

    if chunk or shared then
        if shared then
            func, err = load(shared, ('@@%s/%s/%s'):format(sublime_core, index, 'shared'))
        else
            func, err = load(chunk, ('@@%s/%s/%s'):format(sublime_core, index, service))
        end

        if err then error(("Erreur pendant le chargement du module\n- Provenant de : %s\n- Modules : %s\n- Service : %s\n - Erreur : %s"):format(dir, index, service, err), 3) end

        local result = func()
        rawset(self, index, result)
        return self[index]
    end
end

local function CallModule(self, index, ...)
    local module = rawget(self, index)
    if not module then
        module = LoadModule(self, index)
        if not module then
            local function method(...)
                return export[index](nil, ...)
            end

            if not ... then
                self[index] = method
            end

            return method
        end
    end
    return module
end

sublime = setmetatable({
    name = sublime_core,
    service = service,
    game = GetGameName(),
    env = GetCurrentResourceName(),
    -- lang = GetConvar('sublime:locale', 'fr'),
    cache = service == 'client' and {},
    await = await,
},
{
    __index = CallModule,
    __call = CallModule
})

if sublime.service == 'client' then
    local player = {}
    setmetatable(player, {
        __index = function(self, key)
            AddEventHandler('sublime:player:set:'..key, function(value)
                self[key] = value
                return self[key]
            end)

            rawset(self, key, export:GetPlayer(key) or false)
            return self[key]
        end
    })

    _ENV.player = player
elseif sublime.service == 'server' then
    local MySQL = {}

    setmetatable(MySQL, {
        __index = function(self, key)
            local value = rawget(self, key)
            if not value then
                sublime.mysql()
                value = MySQL[key]
            end
            return value
        end
    })

    _ENV.MySQL = MySQL
end

require = sublime.require()	
Found table content:	
    name = sublime_core,
    service = service,
    game = GetGameName(),
    env = GetCurrentResourceName(),
    -- lang = GetConvar('sublime:locale', 'fr'),
    cache = service == 'client' and {	
Processing item:	name = sublime_core	
Kept original item:	name = sublime_core	
Processing item:	service = service	
Kept original item:	service = service	
Processing item:	game = GetGameName()	
Kept original item:	game = GetGameName()	
Processing item:	env = GetCurrentResourceName()	
Kept original item:	env = GetCurrentResourceName()	
Processing item:	-- lang = GetConvar('sublime:locale'	
Kept original item:	-- lang = GetConvar('sublime:locale'	
Processing item:	'fr')	
Kept original item:	'fr')	
Processing item:	cache = service == 'client' and {	
Kept original item:	cache = service == 'client' and {	
Found table content:	
    __index = CallModule,
    __call = CallModule
	
Processing item:	__index = CallModule	
Kept original item:	__index = CallModule	
Processing item:	__call = CallModule	
Kept original item:	__call = CallModule	
Found table content:		
Found table content:	
        __index = function(self, key)
            AddEventHandler('sublime:player:set:'..key, function(value)
                self[key] = value
                return self[key]
            end)

            rawset(self, key, export:GetPlayer(key) or false)
            return self[key]
        end
    	
Processing item:	__index = function(self	
Kept original item:	__index = function(self	
Processing item:	key)
            AddEventHandler('sublime:player:set:'..key	
Kept original item:	key)
            AddEventHandler('sublime:player:set:'..key	
Processing item:	function(value)
                self[key] = value
                return self[key]
            end)

            rawset(self	
Kept original item:	function(value)
                self[key] = value
                return self[key]
            end)

            rawset(self	
Processing item:	key	
Kept original item:	key	
Processing item:	export:GetPlayer(key) or false)
            return self[key]
        end	
Kept original item:	export:GetPlayer(key) or false)
            return self[key]
        end	
Found table content:		
Found table content:	
        __index = function(self, key)
            local value = rawget(self, key)
            if not value then
                sublime.mysql()
                value = MySQL[key]
            end
            return value
        end
    	
Processing item:	__index = function(self	
Kept original item:	__index = function(self	
Processing item:	key)
            local value = rawget(self	
Kept original item:	key)
            local value = rawget(self	
Processing item:	key)
            if not value then
                sublime.mysql()
                value = MySQL[key]
            end
            return value
        end	
Kept original item:	key)
            if not value then
                sublime.mysql()
                value = MySQL[key]
            end
            return value
        end	
Returning diffs count:	0	
OnSetText called with text:	local mt_pvt = {
    __metatable = 'private',
    __ext = 0,
    __pack = function() return '' end,
}

---@param obj table
---@return table
local function NewInstance(self, obj)
    if obj.private then
        setmetatable(obj.private, mt_pvt)
    end

    setmetatable(obj, self)

    if self.init then obj:init() end

    if obj.export then
        self.__export[obj.export] = obj
    end

    return obj
end

---@param name string
---@param super? table
---@param exportMethod? boolean
---@return table
function sublime.class(name, super, exportMethod)
    if not name then return end
    if super or exportMethod then
        local self = {
            __name = name,
            new = NewInstance
        }

        self.__index = self

        if exportMethod and not super then
            self.__exportMethod = {}
            self.__export = {}

            setmetatable(self, {
                __newindex = function(_, key, value)
                    rawset(_, key, value)
                    self.__exportMethod[key] = true
                end
            })

            exports('GetExportMethod', function()
                return self.__exportMethod
            end)

            exports('CallExportMethod', function(name, method, ...)
                local export <const> = self.__export[name]
                return export[method](export, ...)
            end)
        end

        return super and setmetatable(self, {
            __index = super,
            __newindex = function(_, key, value)
                rawset(_, key, value)
                if type(value) == 'function' then
                    self.__exportMethod[key] = true
                end
            end
        }) or self
    else
        local self = {
            __index = name
        }

        function self.new(obj)
            if obj.private then
                setmetatable(obj.private, mt_pvt)
            end

            if self.init then obj:init() end

            return setmetatable(obj, self)
        end

        return self
    end
end

return sublime.class	
Found table content:	
    __metatable = 'private',
    __ext = 0,
    __pack = function() return '' end,
	
Processing item:	__metatable = 'private'	
Kept original item:	__metatable = 'private'	
Processing item:	__ext = 0	
Kept original item:	__ext = 0	
Processing item:	__pack = function() return '' end	
Kept original item:	__pack = function() return '' end	
Processing item:		
Kept original item:		
Found table content:	
            __name = name,
            new = NewInstance
        	
Processing item:	__name = name	
Kept original item:	__name = name	
Processing item:	new = NewInstance	
Kept original item:	new = NewInstance	
Found table content:		
Found table content:		
Found table content:	
                __newindex = function(_, key, value)
                    rawset(_, key, value)
                    self.__exportMethod[key] = true
                end
            	
Processing item:	__newindex = function(_	
Kept original item:	__newindex = function(_	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
                    rawset(_	
Kept original item:	value)
                    rawset(_	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
                    self.__exportMethod[key] = true
                end	
Kept original item:	value)
                    self.__exportMethod[key] = true
                end	
Found table content:	
            __index = super,
            __newindex = function(_, key, value)
                rawset(_, key, value)
                if type(value) == 'function' then
                    self.__exportMethod[key] = true
                end
            end
        	
Processing item:	__index = super	
Kept original item:	__index = super	
Processing item:	__newindex = function(_	
Kept original item:	__newindex = function(_	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
                rawset(_	
Kept original item:	value)
                rawset(_	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
                if type(value) == 'function' then
                    self.__exportMethod[key] = true
                end
            end	
Kept original item:	value)
                if type(value) == 'function' then
                    self.__exportMethod[key] = true
                end
            end	
Found table content:	
            __index = name
        	
Processing item:	__index = name	
Kept original item:	__index = name	
Returning diffs count:	0	
OnSetText called with text:	---@param export string 'resourceName.methodName'
---@param ... any
---@return void | any
local function Exports(_, export, ...)
    local resourceName <const> = export:match('(.+)%..+')
    local methodName <const> = export:match('.+%.(.+)')
    return exports[resourceName][methodName](nil, ...)
end

local ExportMethod, MyClassExport = {}, {}
sublime.exports = setmetatable({}, {
    __call = Exports
})


---@param resource string resource name you have use supv.class with exportable on true
---@param name string export identifier name
---@param prototype? table if you want add prototype
---@return table
function sublime.exports.class(resource, name, prototype)
    ExportMethod[name] = {}
    setmetatable(ExportMethod[name], {
        __index = function(_, index)
            ExportMethod[name] = exports[resource]:GetExportMethod(index)
            return ExportMethod[name][index]
        end
    })

    MyClassExport[name] = {}
    local Class = MyClassExport[name]
    function Class:__index(index)
        local method = MyClassExport[name][index]

        if method then
            return function(...)
                return method(self, ...)
            end
        end

        local export = ExportMethod[name][index]

        if export then
            return function(...)
                return exports[resource]:CallExportMethod(name, index, ...)
            end
        end
    end

    return setmetatable(prototype or {}, Class)
end

return sublime.exports	
Found table content:		
Found table content:		
Found table content:		
Found table content:	
    __call = Exports
	
Processing item:	__call = Exports	
Kept original item:	__call = Exports	
Found table content:		
Found table content:	
        __index = function(_, index)
            ExportMethod[name] = exports[resource]:GetExportMethod(index)
            return ExportMethod[name][index]
        end
    	
Processing item:	__index = function(_	
Kept original item:	__index = function(_	
Processing item:	index)
            ExportMethod[name] = exports[resource]:GetExportMethod(index)
            return ExportMethod[name][index]
        end	
Kept original item:	index)
            ExportMethod[name] = exports[resource]:GetExportMethod(index)
            return ExportMethod[name][index]
        end	
Found table content:		
Found table content:		
Returning diffs count:	0	
OnSetText called with text:	local PlayerExports, PlayerObject = {}, {}
setmetatable(PlayerExports, {
    __index = function(_, index)
        print(index, 'index meta')
        PlayerExports = sublime.GetPlayerExports()
        return PlayerExports[index]
    end
})

function sublime.GetPlayerObject(source)
    local player <const> = sublime.GetPlayerData(source)
    if not player then return end
    return setmetatable(player, PlayerObject)
end

function PlayerObject:__index(index)
    local method = PlayerObject[index]
    print(method, index)
    if method then
        return function(...)
            return method(self, ...)
        end
    end

    local export = PlayerExports[index]

    if export then
        return function(...)
            return sublime.CallPlayerMethod(self.source, index, ...)
        end
    end
end

function PlayerObject:test()
    return self.source .. ' from test ' .. self.getName()
end

return sublime.GetPlayerObject	
Found table content:		
Found table content:		
Found table content:	
    __index = function(_, index)
        print(index, 'index meta')
        PlayerExports = sublime.GetPlayerExports()
        return PlayerExports[index]
    end
	
Processing item:	__index = function(_	
Kept original item:	__index = function(_	
Processing item:	index)
        print(index	
Kept original item:	index)
        print(index	
Processing item:	'index meta')
        PlayerExports = sublime.GetPlayerExports()
        return PlayerExports[index]
    end	
Kept original item:	'index meta')
        PlayerExports = sublime.GetPlayerExports()
        return PlayerExports[index]
    end	
Returning diffs count:	0	
OnSetText called with text:	local LoadResourceFile <const>, load <const> = LoadResourceFile, load

function sublime.mysql()
    local file = 'lib/MySQL.lua'
	local import = LoadResourceFile('oxmysql', file)
	local func, err = load(import, ('@@%s/%s'):format('oxmysql', file))
	if not func or err then
		return error(err or ("unable to load module '%s'"):format(file), 3)
	end

	func()
end

return sublime.mysql	
Returning diffs count:	0	
OnSetText called with text:	local function On(_, name, cb)
    AddEventHandler(name, cb)
end

sublime.on = setmetatable({}, {
    __call = On
})

function sublime.on.player(key, cb)
    AddEventHandler('sublime:cache:set:'..key, cb)
end

function sublime.on.net(key, cb)
    RegisterNetEvent(key, cb)
end	
Found table content:		
Found table content:	
    __call = On
	
Processing item:	__call = On	
Kept original item:	__call = On	
Returning diffs count:	0	
OnSetText called with text:	-- credit: ox_lib <https://github.com/overextended/ox_lib/blob/master/imports/require/shared.lua>
if lib then 
    sublime.require = lib.require
    return sublime.require 
end

local loaded = {}

package = {
    loaded = setmetatable({}, {
        __index = loaded,
        __newindex = function()  end,
        __metatable = false,
    }),
    path = './?.lua;'
}

local _require = require

---Loads the given module inside the current resource, returning any values returned by the file or `true` when `nil`.
---@param modname string
---@return unknown?
function sublime.require(modname)
    if type(modname) ~= 'string' then return end

    local module = loaded[modname]

    if not module then
        if module == false then
            error(("^1circular-dependency occurred when loading module '%s'^0"):format(modname), 2)
        end

        if not modname:find('^@') then
            local success, result = pcall(_require, modname)

            if success then
                loaded[modname] = result
                return result
            end

            local modpath = modname:gsub('%.', '/')

            for path in package.path:gmatch('[^;]+') do
                local scriptPath = path:gsub('?', modpath):gsub('%.+%/+', '')
                local resourceFile = LoadResourceFile(sublime.env, scriptPath)

                if resourceFile then
                    loaded[modname] = false
                    scriptPath = ('@@%s/%s'):format(sublime.env, scriptPath)

                    local chunk, err = load(resourceFile, scriptPath)

                    if err or not chunk then
                        loaded[modname] = nil
                        return error(err or ("unable to load module '%s'"):format(modname), 3)
                    end

                    module = chunk(modname) or true
                    loaded[modname] = module

                    return module
                end
            end
        else
            local rss, dir = modname:gsub('%.', '/'):match('^(.-)/(.+)$')

            if not rss or not dir then return error('Invalid path format: '..modname, 2) end
            rss, dir = rss:gsub('^@', ''), dir..'.lua'
            local chunk = LoadResourceFile(rss, dir)

            if chunk then
                local scriptPath = ('@@%s/%s'):format(rss, dir)
                local func, err = load(chunk, scriptPath)

                if err or not func then
                    return error(err or ("unable to load module '%s'"):format(modname), 2)
                end

                module = func(modname) or true
                loaded[modname] = module

                return module
            end
        end

        return error(("module '%s' not found"):format(modname), 2)
    end

    return module
end

return sublime.require

--[[ old method, not working with zones module because need require (glm) to calculate vector
    
local moduleLoaded = {}

local function load_module(path)
    if moduleLoaded[path] then
        return moduleLoaded[path]
    end

    local module_path = ("%s.lua"):format(path)
    local module_file = LoadResourceFile(GetCurrentResourceName(), module_path)
    if not module_file then
        error("Impossible de chargé le module : "..path)
    end

    moduleLoaded[path] = load(module_file)()
    return moduleLoaded[path]
end

local function call_module(path)
    path = path:gsub('%.', '/')
    local module = load_module(path)
    if not module then
        return error("Le module n'a pas charger : "..path)
    end
    return module
end

return {
    load = call_module
}
--]]	
Found table content:		
Found table content:	
    loaded = setmetatable({	
Processing item:	loaded = setmetatable({	
Kept original item:	loaded = setmetatable({	
Found table content:	
        __index = loaded,
        __newindex = function()  end,
        __metatable = false,
    	
Processing item:	__index = loaded	
Kept original item:	__index = loaded	
Processing item:	__newindex = function()  end	
Kept original item:	__newindex = function()  end	
Processing item:	__metatable = false	
Kept original item:	__metatable = false	
Processing item:		
Kept original item:		
Found table content:		
Found table content:	
    load = call_module
	
Processing item:	load = call_module	
Kept original item:	load = call_module	
Returning diffs count:	1	
OnSetText called with text:	local LoadResourceFile <const>, IsDuplicityVersion <const>, await <const> = LoadResourceFile, IsDuplicityVersion, Citizen.Await
local sublime_core <const>, service <const> = 'sublime_core', (IsDuplicityVersion() and 'server') or 'client'

---@param name string
---@param from? string<'client' | 'server'> default is sl.service
---@return string
-- local function FormatEvent(self, name, from)
--     return ("__sl__:%s:%s"):format(from or self.service, joaat(name))
-- end

sublime = setmetatable({
    service = service, ---@type string<'client' | 'server'>
    name = sublime_core, ---@type string<'sublime_core'>
    env = sublime_core, ---@type string<'resource_name?'>
    -- hashEvent = FormatEvent,
    await = await,
    lang = GetConvar('sublime:locale', 'fr') ---@type string<'fr' | 'en' | unknown>
}, {
    __newindex = function(self, name, value)
        rawset(self, name, value)
        if type(value) == 'function' then
            exports(name, value)
        end
    end
})

local loaded = {}
package = {
    loaded = setmetatable({}, {
        __index = loaded,
        __newindex = function() end,
        __metatable = false,
    }),
    path = './?.lua;'
}

local _require = require
function require(modname)
    local module = loaded[modname]

    if not module then
        if module == false then
            error(("^1circular-dependency occurred when loading module '%s'^0"):format(modname), 2)
        end

        local success, result = pcall(_require, modname)

        if success then
            loaded[modname] = result
            return result
        end

        local modpath = modname:gsub('%.', '/')
        local paths = { string.strsplit(';', package.path) }
        for i = 1, #paths do
            local scriptPath = paths[i]:gsub('%?', modpath):gsub('%.+%/+', '')
            local resourceFile = LoadResourceFile(sublime_core, scriptPath)
            if resourceFile then
                loaded[modname] = false
                scriptPath = ('@@%s/%s'):format(sublime_core, scriptPath)

                local chunk, err = load(resourceFile, scriptPath)

                if err or not chunk then
                    loaded[modname] = nil
                    return error(err or ("unable to load module '%s'"):format(modname), 3)
                end

                module = chunk(modname) or true
                loaded[modname] = module

                return module
            end
        end

        return error(("module '%s' not found"):format(modname), 2)
    end

    return module
end

-- require('imports.locales.shared').init() ---@load translation

if sublime.service == 'server' then
    sublime.players = {}

    print([[
^6#####################################################################################
^6#^2                _       _   _                                                      ^6#
^6#^2               | |     | | (_)                                                     ^6#
^6#^2  ___   _   _  | |__   | |  _   _ __ ___     ___        ___    ___    _ __    ___  ^6#
^6#^2 / __| | | | | | '_ \  | | | | | '_ ` _ \   / _ \      / __|  / _ \  | '__|  / _ \ ^6#
^6#^2 \__ \ | |_| | | |_) | | | | | | | | | | | |  __/^7  _ ^2 | (__  | (_) | | |    |  __/ ^6#
^6#^2 |___/  \__,_| |_.__/  |_| |_| |_| |_| |_|  \___|^7 (_)^2  \___|  \___/  |_|     \___| ^6#
^6#                                                                                   ^6#
^6#^2        ^7Github: ^4https://github.com/sublime-framework-cfx/sublime_core-fivem        ^6#
^6#####################################################################################
]])
    -- require('imports.version.server').check('github', nil, 500) ---@load version check && check update
    -- require('imports.mysql.server').init() ---@load oxmysql
end	
Found table content:	
    service = service, ---@type string<'client' | 'server'>
    name = sublime_core, ---@type string<'sublime_core'>
    env = sublime_core, ---@type string<'resource_name?'>
    -- hashEvent = FormatEvent,
    await = await,
    lang = GetConvar('sublime:locale', 'fr') ---@type string<'fr' | 'en' | unknown>
	
Processing item:	service = service	
Kept original item:	service = service	
Processing item:	---@type string<'client' | 'server'>
    name = sublime_core	
Kept original item:	---@type string<'client' | 'server'>
    name = sublime_core	
Processing item:	---@type string<'sublime_core'>
    env = sublime_core	
Kept original item:	---@type string<'sublime_core'>
    env = sublime_core	
Processing item:	---@type string<'resource_name?'>
    -- hashEvent = FormatEvent	
Kept original item:	---@type string<'resource_name?'>
    -- hashEvent = FormatEvent	
Processing item:	await = await	
Kept original item:	await = await	
Processing item:	lang = GetConvar('sublime:locale'	
Kept original item:	lang = GetConvar('sublime:locale'	
Processing item:	'fr') ---@type string<'fr' | 'en' | unknown>	
Kept original item:	'fr') ---@type string<'fr' | 'en' | unknown>	
Found table content:	
    __newindex = function(self, name, value)
        rawset(self, name, value)
        if type(value) == 'function' then
            exports(name, value)
        end
    end
	
Processing item:	__newindex = function(self	
Kept original item:	__newindex = function(self	
Processing item:	name	
Kept original item:	name	
Processing item:	value)
        rawset(self	
Kept original item:	value)
        rawset(self	
Processing item:	name	
Kept original item:	name	
Processing item:	value)
        if type(value) == 'function' then
            exports(name	
Kept original item:	value)
        if type(value) == 'function' then
            exports(name	
Processing item:	value)
        end
    end	
Kept original item:	value)
        end
    end	
Found table content:		
Found table content:	
    loaded = setmetatable({	
Processing item:	loaded = setmetatable({	
Kept original item:	loaded = setmetatable({	
Found table content:	
        __index = loaded,
        __newindex = function() end,
        __metatable = false,
    	
Processing item:	__index = loaded	
Kept original item:	__index = loaded	
Processing item:	__newindex = function() end	
Kept original item:	__newindex = function() end	
Processing item:	__metatable = false	
Kept original item:	__metatable = false	
Processing item:		
Kept original item:		
Found table content:	 string.strsplit(';', package.path) 	
Processing item:	string.strsplit(';'	
Kept original item:	string.strsplit(';'	
Processing item:	package.path)	
Kept original item:	package.path)	
Found table content:		
Returning diffs count:	1	
OnSetText called with text:	local mt_pvt, class = {
    __metatable = 'private',
    __ext = 0,
    __pack = function() return '' end,
}, {}

---@param prototype table?
---@return { new: fun(obj): table }
function class.new(prototype)
    local self = { __index = prototype }

    function self.new(obj)
        if obj.private then
            setmetatable(obj.private, mt_pvt)
        end

        return setmetatable(obj, self)
    end

    return self
end

return class	
Found table content:	
    __metatable = 'private',
    __ext = 0,
    __pack = function() return '' end,
	
Processing item:	__metatable = 'private'	
Kept original item:	__metatable = 'private'	
Processing item:	__ext = 0	
Kept original item:	__ext = 0	
Processing item:	__pack = function() return '' end	
Kept original item:	__pack = function() return '' end	
Processing item:		
Kept original item:		
Found table content:		
Found table content:	 new: fun(obj): table 	
Processing item:	new: fun(obj): table	
Kept original item:	new: fun(obj): table	
Found table content:	 __index = prototype 	
Processing item:	__index = prototype	
Kept original item:	__index = prototype	
Returning diffs count:	0	
OnSetText called with text:	if not sublime or not sublime.service then return error("Cannot load init modules", 3) end
local folders = require 'config.modules'

for i = 1, #folders do
    local folder <const> = folders[i]
    local files <const> = require(('modules.%s.index'):format(folder))

    if files.shared then
        local t <const> = files.shared
        for j = 1, #t do
            local file <const> = t[j]
            require(('modules.%s.%s.%s'):format(folder, 'shared', file))
        end
    end

    if files[sublime.service] then
        local t <const> = files[sublime.service]
        for j = 1, #t do
            local file <const> = t[j]
            require(('modules.%s.%s.%s'):format(folder, sublime.service, file))
        end
    end
end

folders = nil	
Returning diffs count:	0	
OnSetText called with text:	local player = {}

---@param key string
---@param value any
---@param force? 'ignore' | boolean
function player:set(key, value, force)
    if not self[key] or self[key] ~= value or force then
        self[key] = value
        if force and force == 'ignore' then return end
        TriggerEvent('sublime:player:set:'..key, value)
    end
end

---@param coords vec3
---@return number
function player:distance(coords)
    return #(self.coords - coords)
end

CreateThread(function()
    player:set('id', PlayerId())
    player:set('serverid', GetPlayerServerId(player.id))

    while true do
        player:set('ped', PlayerPedId())
        player:set('coords', GetEntityCoords(player.ped), 'ignore')
        player:set('vec4', vec4(player.coords.x, player.coords.y, player.coords.z, GetEntityHeading(player.ped)), 'ignore')

        local hasWeapon <const>, weaponHash <const> = GetCurrentPedWeapon(player.ped, true)
        player:set('weapon', hasWeapon and weaponHash or false)

        local vehicle <const> = GetVehiclePedIsIn(player.ped, false)
        if vehicle > 0 then
            player:set('vehicle', vehicle)

            if not player.seat or GetPedInVehicleSeat(vehicle, player.seat) ~= player.ped then
                for i = -1, GetVehicleMaxNumberOfPassengers(vehicle) - 1 do
                    if GetPedInVehicleSeat(vehicle, i) == player.ped then
                        player:set('seat', i)
                        break
                    end
                end
            end
        else
            player:set('vehicle', false)
            player:set('seat', false)
        end
    
        Wait(500)
    end
end)

---@param key string
---@return any
function sublime.GetPlayer(key)
    return player[key] or key == 'vehicle' and false or false
end

_ENV.player = player	
Found table content:		
Returning diffs count:	0	
OnSetText called with text:	return {
    client = {
        'player',
    },

    server = {
        'players',
    },
}	
Found table content:	
    client = {
        'player',
    	
Processing item:	client = {
        'player'	
Kept original item:	client = {
        'player'	
Processing item:		
Kept original item:		
Found table content:	
        'players',
    	
Processing item:	'players'	
Kept original item:	'players'	
Processing item:		
Kept original item:		
Returning diffs count:	0	
OnSetText called with text:	local PlayerClass = require 'modules.main.server.class.player'

---@param source integer
---@param data table
---@return table
function sublime.CreatePlayerObject(source, data)
    if sublime.players[source] then
        return sublime.players[source]
    end

    data.metadata = data.metadata or {}
    data.group = data.group or 'user'
    data.databaseId = data.databaseId or 0
    data.licenses = data.licenses or {}

    local object = { 
        source = source,
        private = data
    }

    local player <const> = PlayerClass.new(object)
    sublime.players[source] = player
    --sublime.playersDatabaseId[player.private.databaseId] = source

    return player
end

sublime.CreatePlayerObject(1, { name = 'John', age = 20 })
local p = sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })

p:init()


RegisterCommand('hh', function()
    local player2 = sublime.GetPlayerData(2)
    print(player2?.source)
    if not player2 then
        print('Player not found')
        return
    end

    print(player2:getName())
end)	
Found table content:		
Found table content:		
Found table content:	 
        source = source,
        private = data
    	
Processing item:	source = source	
Kept original item:	source = source	
Processing item:	private = data	
Kept original item:	private = data	
Found table content:	 name = 'John', age = 20 	
Processing item:	name = 'John'	
Kept original item:	name = 'John'	
Processing item:	age = 20	
Kept original item:	age = 20	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Returning diffs count:	1	
OnSetText called with text:	GlobalState.playersCount = 0
local PlayerExports = {}
local PlayerObject = setmetatable({}, {
    __newindex = function(self, key, value)
        rawset(self, key, value)
        print(key, value)
        PlayerExports[key] = true
    end
})

function sublime.GetPlayerExports()
    return PlayerExports
end

---@param id integer
---@param method string
---@param ... unknown?
---@return unknown?
function sublime.CallPlayerMethod(id, method, ...)
    print(id, method)
    local player = sublime.GetPlayerData(id)
    return PlayerObject[method](player, ...)
end

---@param source integer
function sublime.GetPlayerData(source)
    return sublime.players[source]
end

function sublime.RemovePlayerObject(source)
    local player = sublime.players[source]
    if player then
        sublime.players[source] = nil
        player = nil
        collectgarbage()
        TriggerEvent('sublime:player:remove', source)
    end
end

function PlayerObject:init()
    print(self.source, 'was initialized')
end

function PlayerObject:setName(name)
    self.private.name = name
end

function PlayerObject:getName()
    return self.private.name
end

---@param key string support nested keys separated by dots '.', exemple: 'metadata.name'
---@return unknown?
function PlayerObject:get(key)
    assert(key and type(key) == 'string', 'Invalid key: '..key)

    if key:find('.') then
        local keys <const> = {('.'):strsplit(key)}
        local value = self.private
        for i = 1, #keys do
            local key <const> = keys[i]
            value = value[key]
            if not value then
                return nil
            end
        end

        return value
    end

    return self.private[key]
end

local class <const> = require 'modules.handlers.shared.class'
return class.new(PlayerObject)

-----------------
--[[
function PlayerObject:init()
    GlobalState.playersCount += 1
end

function PlayerObject:__gc() -- destructor
    GlobalState.playersCount -= 1
end

function PlayerObject:save()
    -- save player in database
    return self
end

function PlayerObject:set(key, value, replicated)
    local _key, count = key:gsub('%W', '')

    if count > 0 then
        warn('Invalid key: '..key)
        key = _key
    end

    self.private.metadata[key] = value

    if replicated then
        --TriggerClientEvent('sublime:player:set', self.source, key, value)
    end
end

function PlayerObject:get(key)
    local metadata <const> = self.private.metadata
    if not key then return metadata end

    local _key, count = key:gsub('%W', '')

    if count > 0 then
        warn('Invalid key: '..key)
        key = _key
    end

    return metadata[key]
end

function PlayerObject:setName(name)
    self.private.name = name
    return self
end

function PlayerObject:getName()
    return self.private.name
end

---@param source integer
---@param data table
---@return table
function sublime.CreatePlayerObject(source, data)
    if sublime.players[source] then
        return sublime.players[source]
    end

    data.metadata = data.metadata or {}
    data.group = data.group or 'user'
    data.databaseId = data.databaseId or 0 ---@todo: get from database id
    data.licenses = data.licenses or {} ---@todo: use license manager

    local object = { 
        source = source,
        export = 'player.'..source,
        private = data
    }

    local player <const> = PlayerObject:new(object)
    sublime.players[source] = player
    --sublime.playersDatabaseId[player.private.databaseId] = source

    return player
end

---@param source integer
function sublime.RemovePlayerObject(source)
    local player = sublime.players[source]
    if player then
        sublime.players[source] = nil
        player = nil
        collectgarbage()
        TriggerEvent('sublime:player:remove', source)
    end
end

---@param source integer
function sublime.GetPlayerData(source)
    return sublime.players[source]
end]]	
Found table content:		
Found table content:		
Found table content:	
    __newindex = function(self, key, value)
        rawset(self, key, value)
        print(key, value)
        PlayerExports[key] = true
    end
	
Processing item:	__newindex = function(self	
Kept original item:	__newindex = function(self	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
        rawset(self	
Kept original item:	value)
        rawset(self	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
        print(key	
Kept original item:	value)
        print(key	
Processing item:	value)
        PlayerExports[key] = true
    end	
Kept original item:	value)
        PlayerExports[key] = true
    end	
Found table content:	('.'):strsplit(key)	
Processing item:	('.'):strsplit(key)	
Kept original item:	('.'):strsplit(key)	
Found table content:		
Found table content:		
Found table content:	 
        source = source,
        export = 'player.'..source,
        private = data
    	
Processing item:	source = source	
Kept original item:	source = source	
Processing item:	export = 'player.'..source	
Kept original item:	export = 'player.'..source	
Processing item:	private = data	
Kept original item:	private = data	
Returning diffs count:	0	
OnSetText called with text:	--This empty file causes the scheduler.lua to load clientside
--scheduler.lua when loaded inside the sessionmanager resource currently manages remote callbacks.
--Without this, callbacks will only work server->client and not client->server.	
Returning diffs count:	0	
OnSetText called with text:	-- This resource is part of the default Cfx.re asset pack (cfx-server-data)
-- Altering or recreating for local use only is strongly discouraged.

version '1.0.0'
author 'Cfx.re <root@cfx.re>'
description 'Handles the "host lock" for non-OneSync servers. Do not disable.'
repository 'https://github.com/citizenfx/cfx-server-data'

fx_version 'cerulean'
games { 'gta4', 'gta5' }

server_script 'server/host_lock.lua'
client_script 'client/empty.lua'	
Found table content:	 'gta4', 'gta5' 	
Processing item:	'gta4'	
Kept original item:	'gta4'	
Processing item:	'gta5'	
Kept original item:	'gta5'	
Returning diffs count:	1	
OnSetText called with text:	-- whitelist c2s events
RegisterServerEvent('hostingSession')
RegisterServerEvent('hostedSession')

-- event handler for pre-session 'acquire'
local currentHosting
local hostReleaseCallbacks = {}

-- TODO: add a timeout for the hosting lock to be held
-- TODO: add checks for 'fraudulent' conflict cases of hosting attempts (typically whenever the host can not be reached)
AddEventHandler('hostingSession', function()
    -- if the lock is currently held, tell the client to await further instruction
    if currentHosting then
        TriggerClientEvent('sessionHostResult', source, 'wait')

        -- register a callback for when the lock is freed
        table.insert(hostReleaseCallbacks, function()
            TriggerClientEvent('sessionHostResult', source, 'free')
        end)

        return
    end

    -- if the current host was last contacted less than a second ago
    if GetHostId() then
        if GetPlayerLastMsg(GetHostId()) < 1000 then
            TriggerClientEvent('sessionHostResult', source, 'conflict')

            return
        end
    end

    hostReleaseCallbacks = {}

    currentHosting = source

    TriggerClientEvent('sessionHostResult', source, 'go')

    -- set a timeout of 5 seconds
    SetTimeout(5000, function()
        if not currentHosting then
            return
        end

        currentHosting = nil

        for _, cb in ipairs(hostReleaseCallbacks) do
            cb()
        end
    end)
end)

AddEventHandler('hostedSession', function()
    -- check if the client is the original locker
    if currentHosting ~= source then
        -- TODO: drop client as they're clearly lying
        print(currentHosting, '~=', source)
        return
    end

    -- free the host lock (call callbacks and remove the lock value)
    for _, cb in ipairs(hostReleaseCallbacks) do
        cb()
    end

    currentHosting = nil
end)

EnableEnhancedHostSupport(true)	
Found table content:		
Found table content:		
Returning diffs count:	0	
OnSetText called with text:	-- This resource is part of the default Cfx.re asset pack (cfx-server-data)
-- Altering or recreating for local use only is strongly discouraged.

version '1.0.0'
author 'Cfx.re <root@cfx.re>'
description 'Builds resources with webpack. To learn more: https://webpack.js.org'
repository 'https://github.com/citizenfx/cfx-server-data'

dependency 'yarn'
server_script 'webpack_builder.js'

fx_version 'adamant'
game 'common'
	
Returning diffs count:	1	
OnSetText called with text:	-- This resource is part of the default Cfx.re asset pack (cfx-server-data)
-- Altering or recreating for local use only is strongly discouraged.

version '1.0.0'
author 'Cfx.re <root@cfx.re>'
description 'Builds resources with yarn. To learn more: https://classic.yarnpkg.com'
repository 'https://github.com/citizenfx/cfx-server-data'

fx_version 'adamant'
game 'common'

server_script 'yarn_builder.js'
	
Returning diffs count:	1	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, . }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, . 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.	
Found field with dot. Name:	
Creating diff. Start:	34	End:	43	
New text:	{ j = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	11	End:	21	
New text:	{ j = true, m = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .s }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	10	End:	20	
New text:	{ j = true, m = true }	
Found table content:	 .j, .s 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.s	
Found field with dot. Name:	s	
Added entry:	s = true	
Creating diff. Start:	33	End:	43	
New text:	{ j = true, s = true }	
Returning diffs count:	2	
OnSetText called with text:	---@meta coroutine

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine"])
---
---@class coroutinelib
coroutine = {}

---
---Creates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `"thread"`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.create"])
---
---@param f async fun(...):...
---@return thread
---@nodiscard
function coroutine.create(f) end

---
---Returns true when the coroutine `co` can yield. The default for `co` is the running coroutine.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.isyieldable"])
---
---@param co? thread
---@return boolean
---@nodiscard
function coroutine.isyieldable(co) end

---@version >5.4
---
---Closes coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.close"])
---
---@param co thread
---@return boolean noerror
---@return any errorobject
function coroutine.close(co) end

---
---Starts or continues the execution of coroutine `co`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.resume"])
---
---@param co    thread
---@param val1? any
---@return boolean success
---@return any ...
function coroutine.resume(co, val1, ...) end

---
---Returns the running coroutine plus a boolean, true when the running coroutine is the main one.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.running"])
---
---@return thread running
---@return boolean ismain
---@nodiscard
function coroutine.running() end

---
---Returns the status of coroutine `co`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.status"])
---
---@param co thread
---@return
---| '"running"'   # Is running.
---| '"suspended"' # Is suspended or not started.
---| '"normal"'    # Is active but not running.
---| '"dead"'      # Has finished or stopped with an error.
---@nodiscard
function coroutine.status(co) end

---
---Creates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.wrap"])
---
---@param f async fun(...):...
---@return fun(...):...
---@nodiscard
function coroutine.wrap(f) end

---
---Suspends the execution of the calling coroutine.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.yield"])
---
---@async
---@return any ...
function coroutine.yield(...) end

return coroutine
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/coroutine.lua	
OnSetText called with text:	---@meta package

---
---Loads the given module, returns any value returned by the searcher(`true` when `nil`). Besides that value, also returns as a second result the loader data returned by the searcher, which indicates how `require` found the module. (For instance, if the module came from a file, this loader data is the file path.)
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-require"])
---
---@param modname string
---@return unknown
---@return unknown loaderdata
function require(modname) end

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package"])
---
---@class packagelib
---
---The path used by `require` to search for a C loader.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.cpath"])
---
---@field cpath     string
---
---A table used by `require` to control which modules are already loaded.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.loaded"])
---
---@field loaded    table
---
---The path used by `require` to search for a Lua loader.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.path"])
---
---@field path      string
---
---A table to store loaders for specific modules.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.preload"])
---
---@field preload   table
package = {}

---
---A string describing some compile-time configurations for packages.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.config"])
---
package.config = [[
/
;
?
!
-]]

---@version <5.1
---
---A table used by `require` to control how to load modules.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.loaders"])
---
package.loaders = {}

---
---Dynamically links the host program with the C library `libname`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.loadlib"])
---
---@param libname string
---@param funcname string
---@return any
function package.loadlib(libname, funcname) end

---
---A table used by `require` to control how to load modules.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.searchers"])
---
---@version >5.2
package.searchers = {}

---
---Searches for the given `name` in the given `path`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.searchpath"])
---
---@version >5.2,JIT
---@param name string
---@param path string
---@param sep? string
---@param rep? string
---@return string? filename
---@return string? errmsg
---@nodiscard
function package.searchpath(name, path, sep, rep) end

---
---Sets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.seeall"])
---
---@version <5.1
---@param module table
function package.seeall(module) end

return package
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/package.lua	
OnSetText called with text:	---@meta string

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string"])
---
---@class stringlib
string = {}

---
---Returns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.byte"])
---
---@param s  string|number
---@param i? integer
---@param j? integer
---@return integer ...
---@nodiscard
function string.byte(s, i, j) end

---
---Returns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.char"])
---
---@param byte integer
---@param ... integer
---@return string
---@nodiscard
function string.char(byte, ...) end

---
---Returns a string containing a binary representation (a *binary chunk*) of the given function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.dump"])
---
---@param f      async fun(...):...
---@param strip? boolean
---@return string
---@nodiscard
function string.dump(f, strip) end

---
---Miss locale <string.find>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.find"])
---
---@param s       string|number
---@param pattern string|number
---@param init?   integer
---@param plain?  boolean
---@return integer|nil start
---@return integer|nil end
---@return any|nil ... captured
---@nodiscard
function string.find(s, pattern, init, plain) end

---
---Returns a formatted version of its variable number of arguments following the description given in its first argument.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.format"])
---
---@param s string|number
---@param ... any
---@return string
---@nodiscard
function string.format(s, ...) end

---
---Miss locale <string.gmatch>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.gmatch"])
---
---@param s       string|number
---@param pattern string|number
---@param init?   integer
---@return fun():string, ...
function string.gmatch(s, pattern, init) end

---
---Miss locale <string.gsub>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.gsub"])
---
---@param s       string|number
---@param pattern string|number
---@param repl    string|number|table|function
---@param n?      integer
---@return string
---@return integer count
function string.gsub(s, pattern, repl, n) end

---
---Returns its length.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.len"])
---
---@param s string|number
---@return integer
---@nodiscard
function string.len(s) end

---
---Returns a copy of this string with all uppercase letters changed to lowercase.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.lower"])
---
---@param s string|number
---@return string
---@nodiscard
function string.lower(s) end

---
---Miss locale <string.match>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.match"])
---
---@param s       string|number
---@param pattern string|number
---@param init?   integer
---@return any ...
---@nodiscard
function string.match(s, pattern, init) end

---@version >5.3
---
---Miss locale <string.pack>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.pack"])
---
---@param fmt string
---@param v1  string|number
---@param v2? string|number
---@param ... string|number
---@return string binary
---@nodiscard
function string.pack(fmt, v1, v2, ...) end

---@version >5.3
---
---Miss locale <string.packsize>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.packsize"])
---
---@param fmt string
---@return integer
---@nodiscard
function string.packsize(fmt) end

---
---Returns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.rep"])
---
---@param s    string|number
---@param n    integer
---@param sep? string|number
---@return string
---@nodiscard
function string.rep(s, n, sep) end

---
---Returns a string that is the string `s` reversed.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.reverse"])
---
---@param s string|number
---@return string
---@nodiscard
function string.reverse(s) end

---
---Returns the substring of the string that starts at `i` and continues until `j`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.sub"])
---
---@param s  string|number
---@param i  integer
---@param j? integer
---@return string
---@nodiscard
function string.sub(s, i, j) end

---@version >5.3
---
---Returns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?["en-us/54/manual.html/6.4.2"])) .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.unpack"])
---
---@param fmt  string
---@param s    string
---@param pos? integer
---@return any ...
---@nodiscard
function string.unpack(fmt, s, pos) end

---
---Returns a copy of this string with all lowercase letters changed to uppercase.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.upper"])
---
---@param s string|number
---@return string
---@nodiscard
function string.upper(s) end

return string
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/string.lua	
OnSetText called with text:	---@meta _

---@class unknown
---@class any
---@class nil
---@class boolean
---@class true: boolean
---@class false: boolean
---@class number
---@class integer: number
---@class thread
---@class table<K, V>: { [K]: V }
---@class string: stringlib
---@class userdata
---@class lightuserdata
---@class function
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/builtin.lua	
OnSetText called with text:	---@meta debug

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug"])
---
---@class debuglib
debug = {}

---@class debuginfo
---@field name            string
---@field namewhat        string
---@field source          string
---@field short_src       string
---@field linedefined     integer
---@field lastlinedefined integer
---@field what            string
---@field currentline     integer
---@field istailcall      boolean
---@field nups            integer
---@field nparams         integer
---@field isvararg        boolean
---@field func            function
---@field ftransfer       integer
---@field ntransfer       integer
---@field activelines     table

---
---Enters an interactive mode with the user, running each string that the user enters.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.debug"])
---
function debug.debug() end

---@version 5.1
---
---Returns the environment of object `o` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getfenv"])
---
---@param o any
---@return table
---@nodiscard
function debug.getfenv(o) end

---
---Returns the current hook settings of the thread.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.gethook"])
---
---@param co? thread
---@return function hook
---@return string mask
---@return integer count
---@nodiscard
function debug.gethook(co) end

---@alias infowhat string
---|+"n"     # `name` and `namewhat`
---|+"S"     # `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`
---|+"l"     # `currentline`
---|+"t"     # `istailcall`
---|+"u" # `nups`, `nparams`, and `isvararg`
---|+"f"     # `func`
---|+"r"     # `ftransfer` and `ntransfer`
---|+"L"     # `activelines`

---
---Returns a table with information about a function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getinfo"])
---
---@overload fun(f: integer|function, what?: infowhat):debuginfo
---@param thread thread
---@param f      integer|async fun(...):...
---@param what?  infowhat
---@return debuginfo
---@nodiscard
function debug.getinfo(thread, f, what) end

---
---Returns the name and the value of the local variable with index `local` of the function at level `f` of the stack.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getlocal"])
---
---@overload fun(f: integer|async fun(...):..., index: integer):string, any
---@param thread  thread
---@param f       integer|async fun(...):...
---@param index   integer
---@return string name
---@return any    value
---@nodiscard
function debug.getlocal(thread, f, index) end

---
---Returns the metatable of the given value.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getmetatable"])
---
---@param object any
---@return table metatable
---@nodiscard
function debug.getmetatable(object) end

---
---Returns the registry table.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getregistry"])
---
---@return table
---@nodiscard
function debug.getregistry() end

---
---Returns the name and the value of the upvalue with index `up` of the function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getupvalue"])
---
---@param f  async fun(...):...
---@param up integer
---@return string name
---@return any    value
---@nodiscard
function debug.getupvalue(f, up) end

---
---Returns the `n`-th user value associated
---to the userdata `u` plus a boolean,
---`false` if the userdata does not have that value.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getuservalue"])
---
---@param u  userdata
---@param n? integer
---@return any
---@return boolean
---@nodiscard
function debug.getuservalue(u, n) end

---
---### **Deprecated in `Lua 5.4.2`**
---
---Sets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.
---
---In case of success, this function returns the old limit. In case of error, it returns `false`.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setcstacklimit"])
---
---@deprecated
---@param limit integer
---@return integer|boolean
function debug.setcstacklimit(limit) end

---
---Sets the environment of the given `object` to the given `table` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setfenv"])
---
---@version 5.1
---@generic T
---@param object T
---@param env    table
---@return T object
function debug.setfenv(object, env) end

---@alias hookmask string
---|+"c" # Calls hook when Lua calls a function.
---|+"r" # Calls hook when Lua returns from a function.
---|+"l" # Calls hook when Lua enters a new line of code.

---
---Sets the given function as a hook.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.sethook"])
---
---@overload fun(hook: (async fun(...):...), mask: hookmask, count?: integer)
---@overload fun(thread: thread):...
---@overload fun(...):...
---@param thread thread
---@param hook   async fun(...):...
---@param mask   hookmask
---@param count? integer
function debug.sethook(thread, hook, mask, count) end

---
---Assigns the `value` to the local variable with index `local` of the function at `level` of the stack.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setlocal"])
---
---@overload fun(level: integer, index: integer, value: any):string
---@param thread thread
---@param level  integer
---@param index  integer
---@param value  any
---@return string name
function debug.setlocal(thread, level, index, value) end

---
---Sets the metatable for the given value to the given table (which can be `nil`).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setmetatable"])
---
---@generic T
---@param value T
---@param meta? table
---@return T value
function debug.setmetatable(value, meta) end

---
---Assigns the `value` to the upvalue with index `up` of the function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setupvalue"])
---
---@param f     async fun(...):...
---@param up    integer
---@param value any
---@return string name
function debug.setupvalue(f, up, value) end

---
---Sets the given `value` as
---the `n`-th user value associated to the given `udata`.
---`udata` must be a full userdata.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setuservalue"])
---
---@param udata userdata
---@param value any
---@param n?    integer
---@return userdata udata
function debug.setuservalue(udata, value, n) end

---
---Returns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.traceback"])
---
---@overload fun(message?: any, level?: integer): string
---@param thread   thread
---@param message? any
---@param level?   integer
---@return string  message
---@nodiscard
function debug.traceback(thread, message, level) end

---@version >5.2, JIT
---
---Returns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.upvalueid"])
---
---@param f async fun(...):...
---@param n integer
---@return lightuserdata id
---@nodiscard
function debug.upvalueid(f, n) end

---@version >5.2, JIT
---
---Make the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.upvaluejoin"])
---
---@param f1 async fun(...):...
---@param n1 integer
---@param f2 async fun(...):...
---@param n2 integer
function debug.upvaluejoin(f1, n1, f2, n2) end

return debug
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/debug.lua	
OnSetText called with text:	---@meta os

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os"])
---
---@class oslib
os = {}

---
---Returns an approximation of the amount in seconds of CPU time used by the program.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.clock"])
---
---@return number
---@nodiscard
function os.clock() end

---@class osdate:osdateparam
---
---four digits
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.year"])
---
---@field year  integer|string
---
---1-12
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.month"])
---
---@field month integer|string
---
---1-31
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.day"])
---
---@field day   integer|string
---
---0-23
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.hour"])
---
---@field hour  integer|string
---
---0-59
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.min"])
---
---@field min   integer|string
---
---0-61
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.sec"])
---
---@field sec   integer|string
---
---weekday, 1–7, Sunday is 1
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.wday"])
---
---@field wday  integer|string
---
---day of the year, 1–366
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.yday"])
---
---@field yday  integer|string
---
---daylight saving flag, a boolean
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.isdst"])
---
---@field isdst boolean

---
---Returns a string or a table containing date and time, formatted according to the given string `format`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.date"])
---
---@param format? string
---@param time?   integer
---@return string|osdate
---@nodiscard
function os.date(format, time) end

---
---Returns the difference, in seconds, from time `t1` to time `t2`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.difftime"])
---
---@param t2 integer
---@param t1 integer
---@return integer
---@nodiscard
function os.difftime(t2, t1) end

---
---Passes `command` to be executed by an operating system shell.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.execute"])
---
---@param command? string
---@return boolean?  suc
---@return exitcode? exitcode
---@return integer?  code
function os.execute(command) end

---
---Calls the ISO C function `exit` to terminate the host program.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.exit"])
---
---@param code?  boolean|integer
---@param close? boolean
function os.exit(code, close) end

---
---Returns the value of the process environment variable `varname`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.getenv"])
---
---@param varname string
---@return string?
---@nodiscard
function os.getenv(varname) end

---
---Deletes the file with the given name.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.remove"])
---
---@param filename string
---@return boolean suc
---@return string? errmsg
function os.remove(filename) end

---
---Renames the file or directory named `oldname` to `newname`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.rename"])
---
---@param oldname string
---@param newname string
---@return boolean suc
---@return string? errmsg
function os.rename(oldname, newname) end

---@alias localecategory
---|>"all"
---| "collate"
---| "ctype"
---| "monetary"
---| "numeric"
---| "time"

---
---Sets the current locale of the program.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.setlocale"])
---
---@param locale    string|nil
---@param category? localecategory
---@return string localecategory
function os.setlocale(locale, category) end

---@class osdateparam
---
---four digits
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.year"])
---
---@field year  integer|string
---
---1-12
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.month"])
---
---@field month integer|string
---
---1-31
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.day"])
---
---@field day   integer|string
---
---0-23
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.hour"])
---
---@field hour  (integer|string)?
---
---0-59
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.min"])
---
---@field min   (integer|string)?
---
---0-61
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.sec"])
---
---@field sec   (integer|string)?
---
---weekday, 1–7, Sunday is 1
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.wday"])
---
---@field wday  (integer|string)?
---
---day of the year, 1–366
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.yday"])
---
---@field yday  (integer|string)?
---
---daylight saving flag, a boolean
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.isdst"])
---
---@field isdst boolean?

---
---Returns the current time when called without arguments, or a time representing the local date and time specified by the given table.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.time"])
---
---@param date? osdateparam
---@return integer
---@nodiscard
function os.time(date) end

---
---Returns a string with a file name that can be used for a temporary file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.tmpname"])
---
---@return string
---@nodiscard
function os.tmpname() end

return os
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/os.lua	
OnSetText called with text:	---@meta io

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io"])
---
---@class iolib
---
---standard input.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.stdin"])
---
---@field stdin  file*
---
---standard output.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.stdout"])
---
---@field stdout file*
---
---standard error.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.stderr"])
---
---@field stderr file*
io = {}

---@alias openmode
---|>"r"   # Read mode.
---| "w"   # Write mode.
---| "a"   # Append mode.
---| "r+"  # Update mode, all previous data is preserved.
---| "w+"  # Update mode, all previous data is erased.
---| "a+"  # Append update mode, previous data is preserved, writing is only allowed at the end of file.
---| "rb"  # Read mode. (in binary mode.)
---| "wb"  # Write mode. (in binary mode.)
---| "ab"  # Append mode. (in binary mode.)
---| "r+b" # Update mode, all previous data is preserved. (in binary mode.)
---| "w+b" # Update mode, all previous data is erased. (in binary mode.)
---| "a+b" # Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)

---
---Close `file` or default output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.close"])
---
---@param file? file*
---@return boolean?  suc
---@return exitcode? exitcode
---@return integer?  code
function io.close(file) end

---
---Saves any written data to default output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.flush"])
---
function io.flush() end

---
---Sets `file` as the default input file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.input"])
---
---@overload fun():file*
---@param file string|file*
function io.input(file) end

---
---------
---```lua
---for c in io.lines(filename, ...) do
---    body
---end
---```
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.lines"])
---
---@param filename string?
---@param ... readmode
---@return fun():any, ...
function io.lines(filename, ...) end

---
---Opens a file, in the mode specified in the string `mode`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.open"])
---
---@param filename string
---@param mode?    openmode
---@return file*?
---@return string? errmsg
---@nodiscard
function io.open(filename, mode) end

---
---Sets `file` as the default output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.output"])
---
---@overload fun():file*
---@param file string|file*
function io.output(file) end

---@alias popenmode
---| "r" # Read data from this program by `file`.
---| "w" # Write data to this program by `file`.

---
---Starts program prog in a separated process.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.popen"])
---
---@param prog  string
---@param mode? popenmode
---@return file*?
---@return string? errmsg
function io.popen(prog, mode) end

---
---Reads the `file`, according to the given formats, which specify what to read.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.read"])
---
---@param ... readmode
---@return any
---@return any ...
---@nodiscard
function io.read(...) end

---
---In case of success, returns a handle for a temporary file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.tmpfile"])
---
---@return file*
---@nodiscard
function io.tmpfile() end

---@alias filetype
---| "file"        # Is an open file handle.
---| "closed file" # Is a closed file handle.
---| `nil`         # Is not a file handle.

---
---Checks whether `obj` is a valid file handle.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.type"])
---
---@param file file*
---@return filetype
---@nodiscard
function io.type(file) end

---
---Writes the value of each of its arguments to default output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.write"])
---
---@return file*
---@return string? errmsg
function io.write(...) end

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file"])
---
---@class file*
local file = {}

---@alias readmode integer|string
---| "n"  # Reads a numeral and returns it as number.
---| "a"  # Reads the whole file.
---|>"l"  # Reads the next line skipping the end of line.
---| "L"  # Reads the next line keeping the end of line.

---@alias exitcode "exit"|"signal"

---
---Close `file`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:close"])
---
---@return boolean?  suc
---@return exitcode? exitcode
---@return integer?  code
function file:close() end

---
---Saves any written data to `file`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:flush"])
---
function file:flush() end

---
---------
---```lua
---for c in file:lines(...) do
---    body
---end
---```
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:lines"])
---
---@param ... readmode
---@return fun():any, ...
function file:lines(...) end

---
---Reads the `file`, according to the given formats, which specify what to read.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:read"])
---
---@param ... readmode
---@return any
---@return any ...
---@nodiscard
function file:read(...) end

---@alias seekwhence
---| "set" # Base is beginning of the file.
---|>"cur" # Base is current position.
---| "end" # Base is end of file.

---
---Sets and gets the file position, measured from the beginning of the file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:seek"])
---
---@param whence? seekwhence
---@param offset? integer
---@return integer offset
---@return string? errmsg
function file:seek(whence, offset) end

---@alias vbuf
---| "no"   # Output operation appears immediately.
---| "full" # Performed only when the buffer is full.
---| "line" # Buffered until a newline is output.

---
---Sets the buffering mode for an output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:setvbuf"])
---
---@param mode vbuf
---@param size? integer
function file:setvbuf(mode, size) end

---
---Writes the value of each of its arguments to `file`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:write"])
---
---@param ... string|number
---@return file*?
---@return string? errmsg
function file:write(...) end

return io
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/io.lua	
OnSetText called with text:	---@meta table

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table"])
---
---@class tablelib
table = {}

---
---Given a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ··· sep..list[j]`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.concat"])
---
---@param list table
---@param sep? string
---@param i?   integer
---@param j?   integer
---@return string
---@nodiscard
function table.concat(list, sep, i, j) end

---
---Inserts element `value` at position `pos` in `list`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.insert"])
---
---@overload fun(list: table, value: any)
---@param list table
---@param pos integer
---@param value any
function table.insert(list, pos, value) end

---@version <5.1
---
---Returns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.maxn"])
---
---@param table table
---@return integer
---@nodiscard
function table.maxn(table) end

---@version >5.3, JIT
---
---Moves elements from table `a1` to table `a2`.
---```lua
---a2[t],··· =
---a1[f],···,a1[e]
---return a2
---```
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.move"])
---
---@param a1  table
---@param f   integer
---@param e   integer
---@param t   integer
---@param a2? table
---@return table a2
function table.move(a1, f, e, t, a2) end

---@version >5.2, JIT
---
---Returns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `"n"` with the total number of arguments.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.pack"])
---
---@return table
---@nodiscard
function table.pack(...) end

---
---Removes from `list` the element at position `pos`, returning the value of the removed element.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.remove"])
---
---@param list table
---@param pos? integer
---@return any
function table.remove(list, pos) end

---
---Sorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.sort"])
---
---@generic T
---@param list T[]
---@param comp? fun(a: T, b: T):boolean
function table.sort(list, comp) end

---@version >5.2, JIT
---
---Returns the elements from the given list. This function is equivalent to
---```lua
---    return list[i], list[i+1], ···, list[j]
---```
---By default, `i` is `1` and `j` is `#list`.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.unpack"])
---
---@generic T1, T2, T3, T4, T5, T6, T7, T8, T9, T10
---@param list {
--- [1]?: T1,
--- [2]?: T2,
--- [3]?: T3,
--- [4]?: T4,
--- [5]?: T5,
--- [6]?: T6,
--- [7]?: T7,
--- [8]?: T8,
--- [9]?: T9,
--- [10]?: T10,
---}
---@param i?   integer
---@param j?   integer
---@return T1, T2, T3, T4, T5, T6, T7, T8, T9, T10
---@nodiscard
function table.unpack(list, i, j) end

---@version <5.1, JIT
---
---Executes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.foreach"])
---
---@generic T
---@param list any
---@param callback fun(key: string, value: any):T|nil
---@return T|nil
---@deprecated
function table.foreach(list, callback) end

---@version <5.1, JIT
---
---Executes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.foreachi"])
---
---@generic T
---@param list any
---@param callback fun(key: string, value: any):T|nil
---@return T|nil
---@deprecated
function table.foreachi(list, callback) end

---@version <5.1, JIT
---
---Returns the number of elements in the table. This function is equivalent to `#list`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.getn"])
---
---@generic T
---@param list T[]
---@return integer
---@nodiscard
---@deprecated
function table.getn(list) end

return table
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/table.lua	
OnSetText called with text:	---@meta math

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math"])
---
---@class mathlib
---
---A value larger than any other numeric value.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.huge"])
---
---@field huge       number
---
---Miss locale <math.maxinteger>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.maxinteger"])
---
---@field maxinteger integer
---
---Miss locale <math.mininteger>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.mininteger"])
---
---@field mininteger integer
---
---The value of *π*.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.pi"])
---
---@field pi         number
math = {}

---
---Returns the absolute value of `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.abs"])
---
---@generic Number: number
---@param x Number
---@return Number
---@nodiscard
function math.abs(x) end

---
---Returns the arc cosine of `x` (in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.acos"])
---
---@param x number
---@return number
---@nodiscard
function math.acos(x) end

---
---Returns the arc sine of `x` (in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.asin"])
---
---@param x number
---@return number
---@nodiscard
function math.asin(x) end

---
---Returns the arc tangent of `y/x` (in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.atan"])
---
---@param y  number
---@param x? number
---@return number
---@nodiscard
function math.atan(y, x) end

---@version <5.2
---
---Returns the arc tangent of `y/x` (in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.atan2"])
---
---@param y number
---@param x number
---@return number
---@nodiscard
function math.atan2(y, x) end

---
---Returns the smallest integral value larger than or equal to `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.ceil"])
---
---@param x number
---@return integer
---@nodiscard
function math.ceil(x) end

---
---Returns the cosine of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.cos"])
---
---@param x number
---@return number
---@nodiscard
function math.cos(x) end

---@version <5.2
---
---Returns the hyperbolic cosine of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.cosh"])
---
---@param x number
---@return number
---@nodiscard
function math.cosh(x) end

---
---Converts the angle `x` from radians to degrees.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.deg"])
---
---@param x number
---@return number
---@nodiscard
function math.deg(x) end

---
---Returns the value `e^x` (where `e` is the base of natural logarithms).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.exp"])
---
---@param x number
---@return number
---@nodiscard
function math.exp(x) end

---
---Returns the largest integral value smaller than or equal to `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.floor"])
---
---@param x number
---@return integer
---@nodiscard
function math.floor(x) end

---
---Returns the remainder of the division of `x` by `y` that rounds the quotient towards zero.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.fmod"])
---
---@param x number
---@param y number
---@return number
---@nodiscard
function math.fmod(x, y) end

---@version <5.2
---
---Decompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.frexp"])
---
---@param x number
---@return number m
---@return number e
---@nodiscard
function math.frexp(x) end

---@version <5.2
---
---Returns `m * (2 ^ e)` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.ldexp"])
---
---@param m number
---@param e number
---@return number
---@nodiscard
function math.ldexp(m, e) end

---
---Returns the logarithm of `x` in the given base.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.log"])
---
---@param x     number
---@param base? integer
---@return number
---@nodiscard
function math.log(x, base) end

---@version <5.1
---
---Returns the base-10 logarithm of x.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.log10"])
---
---@param x number
---@return number
---@nodiscard
function math.log10(x) end

---
---Returns the argument with the maximum value, according to the Lua operator `<`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.max"])
---
---@generic Number: number
---@param x Number
---@param ... Number
---@return Number
---@nodiscard
function math.max(x, ...) end

---
---Returns the argument with the minimum value, according to the Lua operator `<`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.min"])
---
---@generic Number: number
---@param x Number
---@param ... Number
---@return Number
---@nodiscard
function math.min(x, ...) end

---
---Returns the integral part of `x` and the fractional part of `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.modf"])
---
---@param x number
---@return integer
---@return number
---@nodiscard
function math.modf(x) end

---@version <5.2
---
---Returns `x ^ y` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.pow"])
---
---@param x number
---@param y number
---@return number
---@nodiscard
function math.pow(x, y) end

---
---Converts the angle `x` from degrees to radians.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.rad"])
---
---@param x number
---@return number
---@nodiscard
function math.rad(x) end

---
---* `math.random()`: Returns a float in the range [0,1).
---* `math.random(n)`: Returns a integer in the range [1, n].
---* `math.random(m, n)`: Returns a integer in the range [m, n].
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.random"])
---
---@overload fun():number
---@overload fun(m: integer):integer
---@param m integer
---@param n integer
---@return integer
---@nodiscard
function math.random(m, n) end

---
---* `math.randomseed(x, y)`: Concatenate `x` and `y` into a 128-bit `seed` to reinitialize the pseudo-random generator.
---* `math.randomseed(x)`: Equate to `math.randomseed(x, 0)` .
---* `math.randomseed()`: Generates a seed with a weak attempt for randomness.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.randomseed"])
---
---@param x? integer
---@param y? integer
function math.randomseed(x, y) end

---
---Returns the sine of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.sin"])
---
---@param x number
---@return number
---@nodiscard
function math.sin(x) end

---@version <5.2
---
---Returns the hyperbolic sine of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.sinh"])
---
---@param x number
---@return number
---@nodiscard
function math.sinh(x) end

---
---Returns the square root of `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.sqrt"])
---
---@param x number
---@return number
---@nodiscard
function math.sqrt(x) end

---
---Returns the tangent of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.tan"])
---
---@param x number
---@return number
---@nodiscard
function math.tan(x) end

---@version <5.2
---
---Returns the hyperbolic tangent of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.tanh"])
---
---@param x number
---@return number
---@nodiscard
function math.tanh(x) end

---@version >5.3
---
---Miss locale <math.tointeger>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.tointeger"])
---
---@param x any
---@return integer?
---@nodiscard
function math.tointeger(x) end

---@version >5.3
---
---Miss locale <math.type>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.type"])
---
---@param x any
---@return
---| '"integer"'
---| '"float"'
---| 'nil'
---@nodiscard
function math.type(x) end

---@version >5.3
---
---Miss locale <math.ult>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.ult"])
---
---@param m integer
---@param n integer
---@return boolean
---@nodiscard
function math.ult(m, n) end

return math
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua	
OnSetText called with text:	---@meta utf8

---@version >5.3
---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8"])
---
---@class utf8lib
---
---The pattern which matches exactly one UTF-8 byte sequence, assuming that the subject is a valid UTF-8 string.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.charpattern"])
---
---@field charpattern string
utf8 = {}

---
---Receives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.char"])
---
---@param code integer
---@param ... integer
---@return string
---@nodiscard
function utf8.char(code, ...) end

---
---Returns values so that the construction
---```lua
---for p, c in utf8.codes(s) do
---    body
---end
---```
---will iterate over all UTF-8 characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.codes"])
---
---@param s    string
---@param lax? boolean
---@return fun(s: string, p: integer):integer, integer
function utf8.codes(s, lax) end

---
---Returns the codepoints (as integers) from all characters in `s` that start between byte position `i` and `j` (both included).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.codepoint"])
---
---@param s    string
---@param i?   integer
---@param j?   integer
---@param lax? boolean
---@return integer code
---@return integer ...
---@nodiscard
function utf8.codepoint(s, i, j, lax) end

---
---Returns the number of UTF-8 characters in string `s` that start between positions `i` and `j` (both inclusive).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.len"])
---
---@param s    string
---@param i?   integer
---@param j?   integer
---@param lax? boolean
---@return integer?
---@return integer? errpos
---@nodiscard
function utf8.len(s, i, j, lax) end

---
---Returns the position (in bytes) where the encoding of the `n`-th character of `s` (counting from position `i`) starts.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.offset"])
---
---@param s string
---@param n integer
---@param i? integer
---@return integer p
---@nodiscard
function utf8.offset(s, n, i) end

return utf8
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/utf8.lua	
OnSetText called with text:	---@meta _

---
---Command-line arguments of Lua Standalone.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-arg"])
---
---@type string[]
arg = {}

---
---Raises an error if the value of its argument v is false (i.e., `nil` or `false`); otherwise, returns all its arguments. In case of error, `message` is the error object; when absent, it defaults to `"assertion failed!"`
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-assert"])
---
---@generic T
---@param v? T
---@param message? any
---@param ... any
---@return T
---@return any ...
function assert(v, message, ...) end

---@alias gcoptions
---|>"collect"      # Performs a full garbage-collection cycle.
---| "stop"         # Stops automatic execution.
---| "restart"      # Restarts automatic execution.
---| "count"        # Returns the total memory in Kbytes.
---| "step"         # Performs a garbage-collection step.
---| "isrunning"    # Returns whether the collector is running.
---| "incremental"  # Change the collector mode to incremental.
---| "generational" # Change the collector mode to generational.

---
---This function is a generic interface to the garbage collector. It performs different functions according to its first argument, `opt`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-collectgarbage"])
---
---@param opt? gcoptions
---@param ... any
---@return any
function collectgarbage(opt, ...) end

---
---Opens the named file and executes its content as a Lua chunk. When called without arguments, `dofile` executes the content of the standard input (`stdin`). Returns all values returned by the chunk. In case of errors, `dofile` propagates the error to its caller. (That is, `dofile` does not run in protected mode.)
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-dofile"])
---
---@param filename? string
---@return any ...
function dofile(filename) end

---
---Terminates the last protected function called and returns message as the error object.
---
---Usually, `error` adds some information about the error position at the beginning of the message, if the message is a string.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-error"])
---
---@param message any
---@param level?  integer
function error(message, level) end

---
---A global variable (not a function) that holds the global environment (see [§2.2](command:extension.lua.doc?["en-us/54/manual.html/2.2"])). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-_G"])
---
---@class _G
_G = {}

---@version 5.1
---
---Returns the current environment in use by the function. `f` can be a Lua function or a number that specifies the function at that stack level.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-getfenv"])
---
---@param f? integer|async fun(...):...
---@return table
---@nodiscard
function getfenv(f) end

---
---If object does not have a metatable, returns nil. Otherwise, if the object's metatable has a __metatable field, returns the associated value. Otherwise, returns the metatable of the given object.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-getmetatable"])
---
---@param object any
---@return table metatable
---@nodiscard
function getmetatable(object) end

---
---Returns three values (an iterator function, the table `t`, and `0`) so that the construction
---```lua
---    for i,v in ipairs(t) do body end
---```
---will iterate over the key–value pairs `(1,t[1]), (2,t[2]), ...`, up to the first absent index.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-ipairs"])
---
---@generic T: table, V
---@param t T
---@return fun(table: V[], i?: integer):integer, V
---@return T
---@return integer i
function ipairs(t) end

---@alias loadmode
---| "b"  # Only binary chunks.
---| "t"  # Only text chunks.
---|>"bt" # Both binary and text.

---
---Loads a chunk.
---
---If `chunk` is a string, the chunk is this string. If `chunk` is a function, `load` calls it repeatedly to get the chunk pieces. Each call to `chunk` must return a string that concatenates with previous results. A return of an empty string, `nil`, or no value signals the end of the chunk.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-load"])
---
---@param chunk      string|function
---@param chunkname? string
---@param mode?      loadmode
---@param env?       table
---@return function?
---@return string?   error_message
---@nodiscard
function load(chunk, chunkname, mode, env) end

---
---Loads a chunk from file `filename` or from the standard input, if no file name is given.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-loadfile"])
---
---@param filename? string
---@param mode?     loadmode
---@param env?      table
---@return function?
---@return string?  error_message
---@nodiscard
function loadfile(filename, mode, env) end

---@version 5.1
---
---Loads a chunk from the given string.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-loadstring"])
---
---@param text       string
---@param chunkname? string
---@return function?
---@return string?   error_message
---@nodiscard
function loadstring(text, chunkname) end

---@version 5.1
---@param proxy boolean|table|userdata
---@return userdata
---@nodiscard
function newproxy(proxy) end

---@version 5.1
---
---Creates a module.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-module"])
---
---@param name string
---@param ...  any
function module(name, ...) end

---
---Allows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. A call to `next` returns the next index of the table and its associated value. When called with `nil` as its second argument, `next` returns an initial index and its associated value. When called with the last index, or with `nil` in an empty table, `next` returns `nil`. If the second argument is absent, then it is interpreted as `nil`. In particular, you can use `next(t)` to check whether a table is empty.
---
---The order in which the indices are enumerated is not specified, *even for numeric indices*. (To traverse a table in numerical order, use a numerical `for`.)
---
---The behavior of `next` is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may set existing fields to nil.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-next"])
---
---@generic K, V
---@param table table<K, V>
---@param index? K
---@return K?
---@return V?
---@nodiscard
function next(table, index) end

---
---If `t` has a metamethod `__pairs`, calls it with t as argument and returns the first three results from the call.
---
---Otherwise, returns three values: the [next](command:extension.lua.doc?["en-us/54/manual.html/pdf-next"]) function, the table `t`, and `nil`, so that the construction
---```lua
---    for k,v in pairs(t) do body end
---```
---will iterate over all key–value pairs of table `t`.
---
---See function [next](command:extension.lua.doc?["en-us/54/manual.html/pdf-next"]) for the caveats of modifying the table during its traversal.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-pairs"])
---
---@generic T: table, K, V
---@param t T
---@return fun(table: table<K, V>, index?: K):K, V
---@return T
function pairs(t) end

---
---Calls the function `f` with the given arguments in *protected mode*. This means that any error inside `f` is not propagated; instead, `pcall` catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, `pcall` also returns all results from the call, after this first result. In case of any error, `pcall` returns `false` plus the error object.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-pcall"])
---
---@param f     async fun(...):...
---@param arg1? any
---@param ...   any
---@return boolean success
---@return any result
---@return any ...
function pcall(f, arg1, ...) end

---
---Receives any number of arguments and prints their values to `stdout`, converting each argument to a string following the same rules of [tostring](command:extension.lua.doc?["en-us/54/manual.html/pdf-tostring"]).
---The function print is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use [string.format](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.format"]) and [io.write](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.write"]).
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-print"])
---
---@param ... any
function print(...) end

---
---Checks whether v1 is equal to v2, without invoking the `__eq` metamethod.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-rawequal"])
---
---@param v1 any
---@param v2 any
---@return boolean
---@nodiscard
function rawequal(v1, v2) end

---
---Gets the real value of `table[index]`, without invoking the `__index` metamethod.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-rawget"])
---
---@param table table
---@param index any
---@return any
---@nodiscard
function rawget(table, index) end

---
---Returns the length of the object `v`, without invoking the `__len` metamethod.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-rawlen"])
---
---@param v table|string
---@return integer len
---@nodiscard
function rawlen(v) end

---
---Sets the real value of `table[index]` to `value`, without using the `__newindex` metavalue. `table` must be a table, `index` any value different from `nil` and `NaN`, and `value` any Lua value.
---This function returns `table`.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-rawset"])
---
---@param table table
---@param index any
---@param value any
---@return table
function rawset(table, index, value) end

---
---If `index` is a number, returns all arguments after argument number `index`; a negative number indexes from the end (`-1` is the last argument). Otherwise, `index` must be the string `"#"`, and `select` returns the total number of extra arguments it received.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-select"])
---
---@param index integer|"#"
---@param ...   any
---@return any
---@nodiscard
function select(index, ...) end

---@version 5.1
---
---Sets the environment to be used by the given function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-setfenv"])
---
---@param f     (async fun(...):...)|integer
---@param table table
---@return function
function setfenv(f, table) end


---@class metatable
---@field __mode 'v'|'k'|'kv'|nil
---@field __metatable any|nil
---@field __tostring (fun(t):string)|nil
---@field __gc fun(t)|nil
---@field __add (fun(t1,t2):any)|nil
---@field __sub (fun(t1,t2):any)|nil
---@field __mul (fun(t1,t2):any)|nil
---@field __div (fun(t1,t2):any)|nil
---@field __mod (fun(t1,t2):any)|nil
---@field __pow (fun(t1,t2):any)|nil
---@field __unm (fun(t):any)|nil
---@field __idiv (fun(t1,t2):any)|nil
---@field __band (fun(t1,t2):any)|nil
---@field __bor (fun(t1,t2):any)|nil
---@field __bxor (fun(t1,t2):any)|nil
---@field __bnot (fun(t):any)|nil
---@field __shl (fun(t1,t2):any)|nil
---@field __shr (fun(t1,t2):any)|nil
---@field __concat (fun(t1,t2):any)|nil
---@field __len (fun(t):integer)|nil
---@field __eq (fun(t1,t2):boolean)|nil
---@field __lt (fun(t1,t2):boolean)|nil
---@field __le (fun(t1,t2):boolean)|nil
---@field __index table|(fun(t,k):any)|nil
---@field __newindex table|fun(t,k,v)|nil
---@field __call (fun(t,...):...)|nil
---@field __pairs (fun(t):((fun(t,k,v):any,any),any,any))|nil
---@field __close (fun(t,errobj):any)|nil

---
---Sets the metatable for the given table. If `metatable` is `nil`, removes the metatable of the given table. If the original metatable has a `__metatable` field, raises an error.
---
---This function returns `table`.
---
---To change the metatable of other types from Lua code, you must use the debug library ([§6.10](command:extension.lua.doc?["en-us/54/manual.html/6.10"])).
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-setmetatable"])
---
---@param table      table
---@param metatable? metatable|table
---@return table
function setmetatable(table, metatable) end

---
---When called with no `base`, `tonumber` tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then `tonumber` returns this number; otherwise, it returns `fail`.
---
---The conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see [§3.1](command:extension.lua.doc?["en-us/54/manual.html/3.1"])). The string may have leading and trailing spaces and a sign.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-tonumber"])
---
---@overload fun(e: string, base: integer):integer
---@param e any
---@return number?
---@nodiscard
function tonumber(e) end

---
---Receives a value of any type and converts it to a string in a human-readable format.
---
---If the metatable of `v` has a `__tostring` field, then `tostring` calls the corresponding value with `v` as argument, and uses the result of the call as its result. Otherwise, if the metatable of `v` has a `__name` field with a string value, `tostring` may use that string in its final result.
---
---For complete control of how numbers are converted, use [string.format](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.format"]).
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-tostring"])
---
---@param v any
---@return string
---@nodiscard
function tostring(v) end

---@alias type
---| "nil"
---| "number"
---| "string"
---| "boolean"
---| "table"
---| "function"
---| "thread"
---| "userdata"

---
---Returns the type of its only argument, coded as a string. The possible results of this function are `"nil"` (a string, not the value `nil`), `"number"`, `"string"`, `"boolean"`, `"table"`, `"function"`, `"thread"`, and `"userdata"`.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-type"])
---
---@param v any
---@return type type
---@nodiscard
function type(v) end

---
---A global variable (not a function) that holds a string containing the running Lua version.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-_VERSION"])
---
_VERSION = "Lua 5.4"

---@version >5.4
---
---Emits a warning with a message composed by the concatenation of all its arguments (which should be strings).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-warn"])
---
---@param message string
---@param ...     any
function warn(message, ...) end

---
---Calls function `f` with the given arguments in protected mode with a new message handler.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-xpcall"])
---
---@param f     async fun(...):...
---@param msgh  function
---@param arg1? any
---@param ...   any
---@return boolean success
---@return any result
---@return any ...
function xpcall(f, msgh, arg1, ...) end

---@version 5.1
---
---Returns the elements from the given `list`. This function is equivalent to
---```lua
---    return list[i], list[i+1], ···, list[j]
---```
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-unpack"])
---
---@generic T1, T2, T3, T4, T5, T6, T7, T8, T9, T10
---@param list {
--- [1]?: T1,
--- [2]?: T2,
--- [3]?: T3,
--- [4]?: T4,
--- [5]?: T5,
--- [6]?: T6,
--- [7]?: T7,
--- [8]?: T8,
--- [9]?: T9,
--- [10]?: T10,
---}
---@param i?   integer
---@param j?   integer
---@return T1, T2, T3, T4, T5, T6, T7, T8, T9, T10
---@nodiscard
function unpack(list, i, j) end

---@version 5.1
---@generic T1, T2, T3, T4, T5, T6, T7, T8, T9
---@param list {[1]: T1, [2]: T2, [3]: T3, [4]: T4, [5]: T5, [6]: T6, [7]: T7, [8]: T8, [9]: T9 }
---@return T1, T2, T3, T4, T5, T6, T7, T8, T9
---@nodiscard
function unpack(list) end
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua	
OnSetText called with text:	fx_version 'cerulean'
author 'SUP2Ak'
game 'common'
use_experimental_fxv2_oal 'yes'
repository 'https://github.com/SUP2Ak/hot-reload-fivem'
description 'Hot Reload for FiveM'
license 'MIT'
version '1.0.0'

server_only 'yes'
server_script 'dist/server.js'
dependency 'yarn'
	
Returning diffs count:	1	
OnSetText called with text:	---@todo [NEW] work in progress 0.0.2 to 0.1.0

-- loadscreen 'modules/loadscreen/client/index.html' -- loadscreen
-- loadscreen_manual_shutdown "yes" -- enable manual shutdown
-- loadscreen_cursor 'yes' -- enable cursor

fx_version 'cerulean'
game 'gta5'
lua54 'yes'
use_experimental_fxv2_oal 'yes'

name 'sublime_core (fivem)'
author 'SUBLiME'
version '0.1.0 (wip)'
repository 'https://github.com/sublime-framework-cfx/sublime_core-fivem'
description 'A new modular framework for FiveM'

shared_script '@sublime_core/import.lua'
server_script 'server.lua'	
Returning diffs count:	1	
OnSetText called with text:		
Returning diffs count:	0	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age 	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Creating diff. Start:	696	End:	711	
New text:	{ name = true, age = true }	
Returning diffs count:	2	
OnSetText called with text:	fx_version 'cerulean'
game 'common'
use_experimental_fxv2_oal 'yes'
lua54 'yes'

name 'oxmysql'
author 'Overextended'
version '2.11.2'
license 'LGPL-3.0-or-later'
repository 'https://github.com/overextended/oxmysql.git'
description 'FXServer to MySQL communication via node-mysql2'

dependencies {
    '/server:7290',
}

client_script 'ui.lua'
server_script 'dist/build.js'

files {
	'web/build/index.html',
	'web/build/**/*'
}

ui_page 'web/build/index.html'

provide 'mysql-async'
provide 'ghmattimysql'

convar_category 'OxMySQL' {
	'Configuration',
	{
		{ 'Connection string', 'mysql_connection_string', 'CV_STRING', 'mysql://user:password@localhost/database' },
		{ 'Debug', 'mysql_debug', 'CV_BOOL', 'false' }
	}
}
	
Found table content:	
    '/server:7290',
	
Processing item:	'/server:7290'	
Kept original item:	'/server:7290'	
Processing item:		
Found table content:	
	'web/build/index.html',
	'web/build/**/*'
	
Processing item:	'web/build/index.html'	
Kept original item:	'web/build/index.html'	
Processing item:	'web/build/**/*'	
Kept original item:	'web/build/**/*'	
Found table content:	
	'Configuration',
	{
		{ 'Connection string', 'mysql_connection_string', 'CV_STRING', 'mysql://user:password@localhost/database' 	
Processing item:	'Configuration'	
Kept original item:	'Configuration'	
Processing item:	{
		{ 'Connection string'	
Kept original item:	{
		{ 'Connection string'	
Processing item:	'mysql_connection_string'	
Kept original item:	'mysql_connection_string'	
Processing item:	'CV_STRING'	
Kept original item:	'CV_STRING'	
Processing item:	'mysql://user:password@localhost/database'	
Kept original item:	'mysql://user:password@localhost/database'	
Found table content:	 'Debug', 'mysql_debug', 'CV_BOOL', 'false' 	
Processing item:	'Debug'	
Kept original item:	'Debug'	
Processing item:	'mysql_debug'	
Kept original item:	'mysql_debug'	
Processing item:	'CV_BOOL'	
Kept original item:	'CV_BOOL'	
Processing item:	'false'	
Kept original item:	'false'	
Returning diffs count:	1	
OnSetText called with text:	local promise = promise
local Await = Citizen.Await
local GetCurrentResourceName = GetCurrentResourceName()
local GetResourceState = GetResourceState

local function await(fn, query, parameters)
	local p = promise.new()
	fn(nil, query, parameters, function(result, error)
		if error then
			return p:reject(error)
		end

		p:resolve(result)
	end, GetCurrentResourceName, true)
	return Await(p)
end

local type = type
local queryStore = {}

local function safeArgs(query, parameters, cb, transaction)
	local queryType = type(query)

	if queryType == 'number' then
		query = queryStore[query]
	elseif transaction then
		if queryType ~= 'table' then
			error(("First argument expected table, received '%s'"):format(query))
		end
	elseif queryType ~= 'string' then
		error(("First argument expected string, received '%s'"):format(query))
	end

	if parameters then
		local paramType = type(parameters)

		if paramType ~= 'table' and paramType ~= 'function' then
			error(("Second argument expected table or function, received '%s'"):format(parameters))
		end

		if paramType == 'function' or parameters.__cfx_functionReference then
			cb = parameters
			parameters = nil
		end
	end

	if cb and parameters then
		local cbType = type(cb)

		if cbType ~= 'function' and (cbType == 'table' and not cb.__cfx_functionReference) then
			error(("Third argument expected function, received '%s'"):format(cb))
		end
	end

	return query, parameters, cb
end

local oxmysql = exports.oxmysql

local mysql_method_mt = {
	__call = function(self, query, parameters, cb)
		query, parameters, cb = safeArgs(query, parameters, cb, self.method == 'transaction')
		return oxmysql[self.method](nil, query, parameters, cb, GetCurrentResourceName, false)
	end
}

local MySQL = setmetatable(MySQL or {}, {
	__index = function(_, index)
		return function(...)
			return oxmysql[index](nil, ...)
		end
	end
})

for _, method in pairs({
	'scalar', 'single', 'query', 'insert', 'update', 'prepare', 'transaction', 'rawExecute',
}) do
	MySQL[method] = setmetatable({
		method = method,
		await = function(query, parameters)
			query, parameters = safeArgs(query, parameters, nil, method == 'transaction')
			return await(oxmysql[method], query, parameters)
		end
	}, mysql_method_mt)
end

local alias = {
	fetchAll = 'query',
	fetchScalar = 'scalar',
	fetchSingle = 'single',
	insert = 'insert',
	execute = 'update',
	transaction = 'transaction',
	prepare = 'prepare'
}

local alias_mt = {
	__index = function(self, key)
		if alias[key] then
			local method = MySQL[alias[key]]
			MySQL.Async[key] = method
			MySQL.Sync[key] = method.await
			alias[key] = nil
			return self[key]
		end
	end
}

local function addStore(query, cb)
	assert(type(query) == 'string', 'The SQL Query must be a string')

	local storeN = #queryStore + 1
	queryStore[storeN] = query

	return cb and cb(storeN) or storeN
end

MySQL.Sync = setmetatable({ store = addStore }, alias_mt)
MySQL.Async = setmetatable({ store = addStore }, alias_mt)

local function onReady(cb)
	while GetResourceState('oxmysql') ~= 'started' do
		Wait(50)
	end

	oxmysql.awaitConnection()

	return cb and cb() or true
end

MySQL.ready = setmetatable({
	await = onReady
}, {
	__call = function(_, cb)
		Citizen.CreateThreadNow(function() onReady(cb) end)
	end,
})

_ENV.MySQL = MySQL
	
Found table content:		
Found table content:	
	__call = function(self, query, parameters, cb)
		query, parameters, cb = safeArgs(query, parameters, cb, self.method == 'transaction')
		return oxmysql[self.method](nil, query, parameters, cb, GetCurrentResourceName, false)
	end
	
Processing item:	__call = function(self	
Kept original item:	__call = function(self	
Processing item:	query	
Kept original item:	query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	cb)
		query	
Kept original item:	cb)
		query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	cb = safeArgs(query	
Kept original item:	cb = safeArgs(query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	cb	
Kept original item:	cb	
Processing item:	self.method == 'transaction')
		return oxmysql[self.method](nil	
Kept original item:	self.method == 'transaction')
		return oxmysql[self.method](nil	
Processing item:	query	
Kept original item:	query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	cb	
Kept original item:	cb	
Processing item:	GetCurrentResourceName	
Kept original item:	GetCurrentResourceName	
Processing item:	false)
	end	
Kept original item:	false)
	end	
Found table content:		
Found table content:	
	__index = function(_, index)
		return function(...)
			return oxmysql[index](nil, ...)
		end
	end
	
Processing item:	__index = function(_	
Kept original item:	__index = function(_	
Processing item:	index)
		return function(...)
			return oxmysql[index](nil	
Kept original item:	index)
		return function(...)
			return oxmysql[index](nil	
Processing item:	...)
		end
	end	
Found field with dot. Name:	
Found table content:	
	'scalar', 'single', 'query', 'insert', 'update', 'prepare', 'transaction', 'rawExecute',
	
Processing item:	'scalar'	
Kept original item:	'scalar'	
Processing item:	'single'	
Kept original item:	'single'	
Processing item:	'query'	
Kept original item:	'query'	
Processing item:	'insert'	
Kept original item:	'insert'	
Processing item:	'update'	
Kept original item:	'update'	
Processing item:	'prepare'	
Kept original item:	'prepare'	
Processing item:	'transaction'	
Kept original item:	'transaction'	
Processing item:	'rawExecute'	
Kept original item:	'rawExecute'	
Processing item:		
Found table content:	
		method = method,
		await = function(query, parameters)
			query, parameters = safeArgs(query, parameters, nil, method == 'transaction')
			return await(oxmysql[method], query, parameters)
		end
		
Processing item:	method = method	
Kept original item:	method = method	
Processing item:	await = function(query	
Kept original item:	await = function(query	
Processing item:	parameters)
			query	
Kept original item:	parameters)
			query	
Processing item:	parameters = safeArgs(query	
Kept original item:	parameters = safeArgs(query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	nil	
Kept original item:	nil	
Processing item:	method == 'transaction')
			return await(oxmysql[method]	
Kept original item:	method == 'transaction')
			return await(oxmysql[method]	
Processing item:	query	
Kept original item:	query	
Processing item:	parameters)
		end	
Kept original item:	parameters)
		end	
Found table content:	
	fetchAll = 'query',
	fetchScalar = 'scalar',
	fetchSingle = 'single',
	insert = 'insert',
	execute = 'update',
	transaction = 'transaction',
	prepare = 'prepare'
	
Processing item:	fetchAll = 'query'	
Kept original item:	fetchAll = 'query'	
Processing item:	fetchScalar = 'scalar'	
Kept original item:	fetchScalar = 'scalar'	
Processing item:	fetchSingle = 'single'	
Kept original item:	fetchSingle = 'single'	
Processing item:	insert = 'insert'	
Kept original item:	insert = 'insert'	
Processing item:	execute = 'update'	
Kept original item:	execute = 'update'	
Processing item:	transaction = 'transaction'	
Kept original item:	transaction = 'transaction'	
Processing item:	prepare = 'prepare'	
Kept original item:	prepare = 'prepare'	
Found table content:	
	__index = function(self, key)
		if alias[key] then
			local method = MySQL[alias[key]]
			MySQL.Async[key] = method
			MySQL.Sync[key] = method.await
			alias[key] = nil
			return self[key]
		end
	end
	
Processing item:	__index = function(self	
Kept original item:	__index = function(self	
Processing item:	key)
		if alias[key] then
			local method = MySQL[alias[key]]
			MySQL.Async[key] = method
			MySQL.Sync[key] = method.await
			alias[key] = nil
			return self[key]
		end
	end	
Kept original item:	key)
		if alias[key] then
			local method = MySQL[alias[key]]
			MySQL.Async[key] = method
			MySQL.Sync[key] = method.await
			alias[key] = nil
			return self[key]
		end
	end	
Found table content:	 store = addStore 	
Processing item:	store = addStore	
Kept original item:	store = addStore	
Found table content:	 store = addStore 	
Processing item:	store = addStore	
Kept original item:	store = addStore	
Found table content:	
	await = onReady
	
Processing item:	await = onReady	
Kept original item:	await = onReady	
Found table content:	
	__call = function(_, cb)
		Citizen.CreateThreadNow(function() onReady(cb) end)
	end,
	
Processing item:	__call = function(_	
Kept original item:	__call = function(_	
Processing item:	cb)
		Citizen.CreateThreadNow(function() onReady(cb) end)
	end	
Kept original item:	cb)
		Citizen.CreateThreadNow(function() onReady(cb) end)
	end	
Processing item:		
Returning diffs count:	0	
OnSetText called with text:	return {
    -- 'handlers', -- init handlers server & client
    'main', -- init main server & client
}	
Found table content:	
    -- 'handlers', -- init handlers server & client
    'main', -- init main server & client
	
Processing item:	-- 'handlers'	
Kept original item:	-- 'handlers'	
Processing item:	-- init handlers server & client
    'main'	
Kept original item:	-- init handlers server & client
    'main'	
Processing item:	-- init main server & client	
Kept original item:	-- init main server & client	
Returning diffs count:	0	
OnSetText called with text:	RegisterNetEvent('oxmysql:openUi', function(data)
    SendNUIMessage({
        action = 'openUI',
        data = data
    })
    SetNuiFocus(true, true)
end)

RegisterNUICallback('exit', function(_, cb)
    cb(true)
    SetNuiFocus(false, false)
end)

RegisterNUICallback('fetchResource', function(data, cb)
    TriggerServerEvent('oxmysql:fetchResource', data)
    cb(true)
end)

RegisterNetEvent('oxmysql:loadResource', function(data)
    SendNUIMessage({
        action = 'loadResource',
        data = data
    })
end)	
Found table content:	
        action = 'openUI',
        data = data
    	
Processing item:	action = 'openUI'	
Kept original item:	action = 'openUI'	
Processing item:	data = data	
Kept original item:	data = data	
Found table content:	
        action = 'loadResource',
        data = data
    	
Processing item:	action = 'loadResource'	
Kept original item:	action = 'loadResource'	
Processing item:	data = data	
Kept original item:	data = data	
Returning diffs count:	0	
OnSetText called with text:	local sublime_core <const> = 'sublime_core'
local IsDuplicityVersion <const>, await <const> = IsDuplicityVersion, Citizen.Await
local LoadResourceFile <const> = LoadResourceFile
local GetResourceState <const> = GetResourceState
local GetGameName <const> = GetGameName
local GetCurrentResourceName <const>, AddEventHandler <const> = GetCurrentResourceName, AddEventHandler
local export = exports[sublime_core]
local service <const> = (IsDuplicityVersion() and 'server') or 'client'

-- local function FormatEvent(self, name, from)
--     return ("__sl__:%s:%s"):format(from or service, joaat(name))
-- end

if not _VERSION:find('5.4') then
    error("^1 Vous devez activer Lua 5.4 dans la resources où vous utilisez l'import, (lua54 'yes') dans votre fxmanifest!^0", 2)
end

if not GetResourceState(sublime_core):find('start') then
	error('^1sublime_core doit être lancé avant cette ressource!^0', 2)
end

local function LoadModule(self, index)
    local func, err
    local dir <const> = ('imports/%s'):format(index)
    local chunk <const> = LoadResourceFile(sublime_core, ('%s/%s.lua'):format(dir, service))
    local shared <const> = LoadResourceFile(sublime_core, ('%s/shared.lua'):format(dir))

    if chunk or shared then
        if shared then
            func, err = load(shared, ('@@%s/%s/%s'):format(sublime_core, index, 'shared'))
        else
            func, err = load(chunk, ('@@%s/%s/%s'):format(sublime_core, index, service))
        end

        if err then error(("Erreur pendant le chargement du module\n- Provenant de : %s\n- Modules : %s\n- Service : %s\n - Erreur : %s"):format(dir, index, service, err), 3) end

        local result = func()
        rawset(self, index, result)
        return self[index]
    end
end

local function CallModule(self, index, ...)
    local module = rawget(self, index)
    if not module then
        module = LoadModule(self, index)
        if not module then
            local function method(...)
                return export[index](nil, ...)
            end

            if not ... then
                self[index] = method
            end

            return method
        end
    end
    return module
end

sublime = setmetatable({
    name = sublime_core,
    service = service,
    game = GetGameName(),
    env = GetCurrentResourceName(),
    -- lang = GetConvar('sublime:locale', 'fr'),
    cache = service == 'client' and {},
    await = await,
},
{
    __index = CallModule,
    __call = CallModule
})

if sublime.service == 'client' then
    local player = {}
    setmetatable(player, {
        __index = function(self, key)
            AddEventHandler('sublime:player:set:'..key, function(value)
                self[key] = value
                return self[key]
            end)

            rawset(self, key, export:GetPlayer(key) or false)
            return self[key]
        end
    })

    _ENV.player = player
elseif sublime.service == 'server' then
    local MySQL = {}

    setmetatable(MySQL, {
        __index = function(self, key)
            local value = rawget(self, key)
            if not value then
                sublime.mysql()
                value = MySQL[key]
            end
            return value
        end
    })

    _ENV.MySQL = MySQL
end

require = sublime.require()	
Found table content:	
    name = sublime_core,
    service = service,
    game = GetGameName(),
    env = GetCurrentResourceName(),
    -- lang = GetConvar('sublime:locale', 'fr'),
    cache = service == 'client' and {	
Processing item:	name = sublime_core	
Kept original item:	name = sublime_core	
Processing item:	service = service	
Kept original item:	service = service	
Processing item:	game = GetGameName()	
Kept original item:	game = GetGameName()	
Processing item:	env = GetCurrentResourceName()	
Kept original item:	env = GetCurrentResourceName()	
Processing item:	-- lang = GetConvar('sublime:locale'	
Kept original item:	-- lang = GetConvar('sublime:locale'	
Processing item:	'fr')	
Kept original item:	'fr')	
Processing item:	cache = service == 'client' and {	
Kept original item:	cache = service == 'client' and {	
Found table content:	
    __index = CallModule,
    __call = CallModule
	
Processing item:	__index = CallModule	
Kept original item:	__index = CallModule	
Processing item:	__call = CallModule	
Kept original item:	__call = CallModule	
Found table content:		
Found table content:	
        __index = function(self, key)
            AddEventHandler('sublime:player:set:'..key, function(value)
                self[key] = value
                return self[key]
            end)

            rawset(self, key, export:GetPlayer(key) or false)
            return self[key]
        end
    	
Processing item:	__index = function(self	
Kept original item:	__index = function(self	
Processing item:	key)
            AddEventHandler('sublime:player:set:'..key	
Kept original item:	key)
            AddEventHandler('sublime:player:set:'..key	
Processing item:	function(value)
                self[key] = value
                return self[key]
            end)

            rawset(self	
Kept original item:	function(value)
                self[key] = value
                return self[key]
            end)

            rawset(self	
Processing item:	key	
Kept original item:	key	
Processing item:	export:GetPlayer(key) or false)
            return self[key]
        end	
Kept original item:	export:GetPlayer(key) or false)
            return self[key]
        end	
Found table content:		
Found table content:	
        __index = function(self, key)
            local value = rawget(self, key)
            if not value then
                sublime.mysql()
                value = MySQL[key]
            end
            return value
        end
    	
Processing item:	__index = function(self	
Kept original item:	__index = function(self	
Processing item:	key)
            local value = rawget(self	
Kept original item:	key)
            local value = rawget(self	
Processing item:	key)
            if not value then
                sublime.mysql()
                value = MySQL[key]
            end
            return value
        end	
Kept original item:	key)
            if not value then
                sublime.mysql()
                value = MySQL[key]
            end
            return value
        end	
Returning diffs count:	0	
OnSetText called with text:	---@todo [NEW] work in progress 0.0.2 to 0.1.0

-- loadscreen 'modules/loadscreen/client/index.html' -- loadscreen
-- loadscreen_manual_shutdown "yes" -- enable manual shutdown
-- loadscreen_cursor 'yes' -- enable cursor

fx_version 'cerulean'
game 'gta5'
lua54 'yes'
use_experimental_fxv2_oal 'yes'

name 'sublime_core (fivem)'
author 'SUBLiME'
version '0.1.0 (wip)'
repository 'https://github.com/sublime-framework-cfx/sublime_core-fivem'
description 'A new modular framework for FiveM'

files {
    'config/modules.lua',
    'imports/**/shared.lua',
    'imports/**/client.lua',
    'import.lua',
    -- 'modules/**/shared/**',
    'modules/**/client/**',
}

shared_scripts {
    'init.lua',
    'modules/init.lua',
}	
Found table content:	
    'config/modules.lua',
    'imports/**/shared.lua',
    'imports/**/client.lua',
    'import.lua',
    -- 'modules/**/shared/**',
    'modules/**/client/**',
	
Processing item:	'config/modules.lua'	
Kept original item:	'config/modules.lua'	
Processing item:	'imports/**/shared.lua'	
Kept original item:	'imports/**/shared.lua'	
Processing item:	'imports/**/client.lua'	
Kept original item:	'imports/**/client.lua'	
Processing item:	'import.lua'	
Kept original item:	'import.lua'	
Processing item:	-- 'modules/**/shared/**'	
Kept original item:	-- 'modules/**/shared/**'	
Processing item:	'modules/**/client/**'	
Kept original item:	'modules/**/client/**'	
Processing item:		
Found table content:	
    'init.lua',
    'modules/init.lua',
	
Processing item:	'init.lua'	
Kept original item:	'init.lua'	
Processing item:	'modules/init.lua'	
Kept original item:	'modules/init.lua'	
Processing item:		
Returning diffs count:	1	
OnSetText called with text:	local mt_pvt = {
    __metatable = 'private',
    __ext = 0,
    __pack = function() return '' end,
}

---@param obj table
---@return table
local function NewInstance(self, obj)
    if obj.private then
        setmetatable(obj.private, mt_pvt)
    end

    setmetatable(obj, self)

    if self.init then obj:init() end

    if obj.export then
        self.__export[obj.export] = obj
    end

    return obj
end

---@param name string
---@param super? table
---@param exportMethod? boolean
---@return table
function sublime.class(name, super, exportMethod)
    if not name then return end
    if super or exportMethod then
        local self = {
            __name = name,
            new = NewInstance
        }

        self.__index = self

        if exportMethod and not super then
            self.__exportMethod = {}
            self.__export = {}

            setmetatable(self, {
                __newindex = function(_, key, value)
                    rawset(_, key, value)
                    self.__exportMethod[key] = true
                end
            })

            exports('GetExportMethod', function()
                return self.__exportMethod
            end)

            exports('CallExportMethod', function(name, method, ...)
                local export <const> = self.__export[name]
                return export[method](export, ...)
            end)
        end

        return super and setmetatable(self, {
            __index = super,
            __newindex = function(_, key, value)
                rawset(_, key, value)
                if type(value) == 'function' then
                    self.__exportMethod[key] = true
                end
            end
        }) or self
    else
        local self = {
            __index = name
        }

        function self.new(obj)
            if obj.private then
                setmetatable(obj.private, mt_pvt)
            end

            if self.init then obj:init() end

            return setmetatable(obj, self)
        end

        return self
    end
end

return sublime.class	
Found table content:	
    __metatable = 'private',
    __ext = 0,
    __pack = function() return '' end,
	
Processing item:	__metatable = 'private'	
Kept original item:	__metatable = 'private'	
Processing item:	__ext = 0	
Kept original item:	__ext = 0	
Processing item:	__pack = function() return '' end	
Kept original item:	__pack = function() return '' end	
Processing item:		
Found table content:	
            __name = name,
            new = NewInstance
        	
Processing item:	__name = name	
Kept original item:	__name = name	
Processing item:	new = NewInstance	
Kept original item:	new = NewInstance	
Found table content:		
Found table content:		
Found table content:	
                __newindex = function(_, key, value)
                    rawset(_, key, value)
                    self.__exportMethod[key] = true
                end
            	
Processing item:	__newindex = function(_	
Kept original item:	__newindex = function(_	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
                    rawset(_	
Kept original item:	value)
                    rawset(_	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
                    self.__exportMethod[key] = true
                end	
Kept original item:	value)
                    self.__exportMethod[key] = true
                end	
Found table content:	
            __index = super,
            __newindex = function(_, key, value)
                rawset(_, key, value)
                if type(value) == 'function' then
                    self.__exportMethod[key] = true
                end
            end
        	
Processing item:	__index = super	
Kept original item:	__index = super	
Processing item:	__newindex = function(_	
Kept original item:	__newindex = function(_	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
                rawset(_	
Kept original item:	value)
                rawset(_	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
                if type(value) == 'function' then
                    self.__exportMethod[key] = true
                end
            end	
Kept original item:	value)
                if type(value) == 'function' then
                    self.__exportMethod[key] = true
                end
            end	
Found table content:	
            __index = name
        	
Processing item:	__index = name	
Kept original item:	__index = name	
Returning diffs count:	0	
OnSetText called with text:	---@param export string 'resourceName.methodName'
---@param ... any
---@return void | any
local function Exports(_, export, ...)
    local resourceName <const> = export:match('(.+)%..+')
    local methodName <const> = export:match('.+%.(.+)')
    return exports[resourceName][methodName](nil, ...)
end

local ExportMethod, MyClassExport = {}, {}
sublime.exports = setmetatable({}, {
    __call = Exports
})


---@param resource string resource name you have use supv.class with exportable on true
---@param name string export identifier name
---@param prototype? table if you want add prototype
---@return table
function sublime.exports.class(resource, name, prototype)
    ExportMethod[name] = {}
    setmetatable(ExportMethod[name], {
        __index = function(_, index)
            ExportMethod[name] = exports[resource]:GetExportMethod(index)
            return ExportMethod[name][index]
        end
    })

    MyClassExport[name] = {}
    local Class = MyClassExport[name]
    function Class:__index(index)
        local method = MyClassExport[name][index]

        if method then
            return function(...)
                return method(self, ...)
            end
        end

        local export = ExportMethod[name][index]

        if export then
            return function(...)
                return exports[resource]:CallExportMethod(name, index, ...)
            end
        end
    end

    return setmetatable(prototype or {}, Class)
end

return sublime.exports	
Found table content:		
Found table content:		
Found table content:		
Found table content:	
    __call = Exports
	
Processing item:	__call = Exports	
Kept original item:	__call = Exports	
Found table content:		
Found table content:	
        __index = function(_, index)
            ExportMethod[name] = exports[resource]:GetExportMethod(index)
            return ExportMethod[name][index]
        end
    	
Processing item:	__index = function(_	
Kept original item:	__index = function(_	
Processing item:	index)
            ExportMethod[name] = exports[resource]:GetExportMethod(index)
            return ExportMethod[name][index]
        end	
Kept original item:	index)
            ExportMethod[name] = exports[resource]:GetExportMethod(index)
            return ExportMethod[name][index]
        end	
Found table content:		
Found table content:		
Returning diffs count:	0	
OnSetText called with text:	local PlayerExports, PlayerObject = {}, {}
setmetatable(PlayerExports, {
    __index = function(_, index)
        print(index, 'index meta')
        PlayerExports = sublime.GetPlayerExports()
        return PlayerExports[index]
    end
})

function sublime.GetPlayerObject(source)
    local player <const> = sublime.GetPlayerData(source)
    if not player then return end
    return setmetatable(player, PlayerObject)
end

function PlayerObject:__index(index)
    local method = PlayerObject[index]
    print(method, index)
    if method then
        return function(...)
            return method(self, ...)
        end
    end

    local export = PlayerExports[index]

    if export then
        return function(...)
            return sublime.CallPlayerMethod(self.source, index, ...)
        end
    end
end

function PlayerObject:test()
    return self.source .. ' from test ' .. self.getName()
end

return sublime.GetPlayerObject	
Found table content:		
Found table content:		
Found table content:	
    __index = function(_, index)
        print(index, 'index meta')
        PlayerExports = sublime.GetPlayerExports()
        return PlayerExports[index]
    end
	
Processing item:	__index = function(_	
Kept original item:	__index = function(_	
Processing item:	index)
        print(index	
Kept original item:	index)
        print(index	
Processing item:	'index meta')
        PlayerExports = sublime.GetPlayerExports()
        return PlayerExports[index]
    end	
Kept original item:	'index meta')
        PlayerExports = sublime.GetPlayerExports()
        return PlayerExports[index]
    end	
Returning diffs count:	0	
OnSetText called with text:	local LoadResourceFile <const>, load <const> = LoadResourceFile, load

function sublime.mysql()
    local file = 'lib/MySQL.lua'
	local import = LoadResourceFile('oxmysql', file)
	local func, err = load(import, ('@@%s/%s'):format('oxmysql', file))
	if not func or err then
		return error(err or ("unable to load module '%s'"):format(file), 3)
	end

	func()
end

return sublime.mysql	
Returning diffs count:	0	
OnSetText called with text:	local function On(_, name, cb)
    AddEventHandler(name, cb)
end

sublime.on = setmetatable({}, {
    __call = On
})

function sublime.on.player(key, cb)
    AddEventHandler('sublime:cache:set:'..key, cb)
end

function sublime.on.net(key, cb)
    RegisterNetEvent(key, cb)
end	
Found table content:		
Found table content:	
    __call = On
	
Processing item:	__call = On	
Kept original item:	__call = On	
Returning diffs count:	0	
OnSetText called with text:	-- credit: ox_lib <https://github.com/overextended/ox_lib/blob/master/imports/require/shared.lua>
if lib then 
    sublime.require = lib.require
    return sublime.require 
end

local loaded = {}

package = {
    loaded = setmetatable({}, {
        __index = loaded,
        __newindex = function()  end,
        __metatable = false,
    }),
    path = './?.lua;'
}

local _require = require

---Loads the given module inside the current resource, returning any values returned by the file or `true` when `nil`.
---@param modname string
---@return unknown?
function sublime.require(modname)
    if type(modname) ~= 'string' then return end

    local module = loaded[modname]

    if not module then
        if module == false then
            error(("^1circular-dependency occurred when loading module '%s'^0"):format(modname), 2)
        end

        if not modname:find('^@') then
            local success, result = pcall(_require, modname)

            if success then
                loaded[modname] = result
                return result
            end

            local modpath = modname:gsub('%.', '/')

            for path in package.path:gmatch('[^;]+') do
                local scriptPath = path:gsub('?', modpath):gsub('%.+%/+', '')
                local resourceFile = LoadResourceFile(sublime.env, scriptPath)

                if resourceFile then
                    loaded[modname] = false
                    scriptPath = ('@@%s/%s'):format(sublime.env, scriptPath)

                    local chunk, err = load(resourceFile, scriptPath)

                    if err or not chunk then
                        loaded[modname] = nil
                        return error(err or ("unable to load module '%s'"):format(modname), 3)
                    end

                    module = chunk(modname) or true
                    loaded[modname] = module

                    return module
                end
            end
        else
            local rss, dir = modname:gsub('%.', '/'):match('^(.-)/(.+)$')

            if not rss or not dir then return error('Invalid path format: '..modname, 2) end
            rss, dir = rss:gsub('^@', ''), dir..'.lua'
            local chunk = LoadResourceFile(rss, dir)

            if chunk then
                local scriptPath = ('@@%s/%s'):format(rss, dir)
                local func, err = load(chunk, scriptPath)

                if err or not func then
                    return error(err or ("unable to load module '%s'"):format(modname), 2)
                end

                module = func(modname) or true
                loaded[modname] = module

                return module
            end
        end

        return error(("module '%s' not found"):format(modname), 2)
    end

    return module
end

return sublime.require

--[[ old method, not working with zones module because need require (glm) to calculate vector
    
local moduleLoaded = {}

local function load_module(path)
    if moduleLoaded[path] then
        return moduleLoaded[path]
    end

    local module_path = ("%s.lua"):format(path)
    local module_file = LoadResourceFile(GetCurrentResourceName(), module_path)
    if not module_file then
        error("Impossible de chargé le module : "..path)
    end

    moduleLoaded[path] = load(module_file)()
    return moduleLoaded[path]
end

local function call_module(path)
    path = path:gsub('%.', '/')
    local module = load_module(path)
    if not module then
        return error("Le module n'a pas charger : "..path)
    end
    return module
end

return {
    load = call_module
}
--]]	
Found table content:		
Found table content:	
    loaded = setmetatable({	
Processing item:	loaded = setmetatable({	
Kept original item:	loaded = setmetatable({	
Found table content:	
        __index = loaded,
        __newindex = function()  end,
        __metatable = false,
    	
Processing item:	__index = loaded	
Kept original item:	__index = loaded	
Processing item:	__newindex = function()  end	
Kept original item:	__newindex = function()  end	
Processing item:	__metatable = false	
Kept original item:	__metatable = false	
Processing item:		
Found table content:		
Found table content:	
    load = call_module
	
Processing item:	load = call_module	
Kept original item:	load = call_module	
Returning diffs count:	1	
OnSetText called with text:	local LoadResourceFile <const>, IsDuplicityVersion <const>, await <const> = LoadResourceFile, IsDuplicityVersion, Citizen.Await
local sublime_core <const>, service <const> = 'sublime_core', (IsDuplicityVersion() and 'server') or 'client'

---@param name string
---@param from? string<'client' | 'server'> default is sl.service
---@return string
-- local function FormatEvent(self, name, from)
--     return ("__sl__:%s:%s"):format(from or self.service, joaat(name))
-- end

sublime = setmetatable({
    service = service, ---@type string<'client' | 'server'>
    name = sublime_core, ---@type string<'sublime_core'>
    env = sublime_core, ---@type string<'resource_name?'>
    -- hashEvent = FormatEvent,
    await = await,
    lang = GetConvar('sublime:locale', 'fr') ---@type string<'fr' | 'en' | unknown>
}, {
    __newindex = function(self, name, value)
        rawset(self, name, value)
        if type(value) == 'function' then
            exports(name, value)
        end
    end
})

local loaded = {}
package = {
    loaded = setmetatable({}, {
        __index = loaded,
        __newindex = function() end,
        __metatable = false,
    }),
    path = './?.lua;'
}

local _require = require
function require(modname)
    local module = loaded[modname]

    if not module then
        if module == false then
            error(("^1circular-dependency occurred when loading module '%s'^0"):format(modname), 2)
        end

        local success, result = pcall(_require, modname)

        if success then
            loaded[modname] = result
            return result
        end

        local modpath = modname:gsub('%.', '/')
        local paths = { string.strsplit(';', package.path) }
        for i = 1, #paths do
            local scriptPath = paths[i]:gsub('%?', modpath):gsub('%.+%/+', '')
            local resourceFile = LoadResourceFile(sublime_core, scriptPath)
            if resourceFile then
                loaded[modname] = false
                scriptPath = ('@@%s/%s'):format(sublime_core, scriptPath)

                local chunk, err = load(resourceFile, scriptPath)

                if err or not chunk then
                    loaded[modname] = nil
                    return error(err or ("unable to load module '%s'"):format(modname), 3)
                end

                module = chunk(modname) or true
                loaded[modname] = module

                return module
            end
        end

        return error(("module '%s' not found"):format(modname), 2)
    end

    return module
end

-- require('imports.locales.shared').init() ---@load translation

if sublime.service == 'server' then
    sublime.players = {}

    print([[
^6#####################################################################################
^6#^2                _       _   _                                                      ^6#
^6#^2               | |     | | (_)                                                     ^6#
^6#^2  ___   _   _  | |__   | |  _   _ __ ___     ___        ___    ___    _ __    ___  ^6#
^6#^2 / __| | | | | | '_ \  | | | | | '_ ` _ \   / _ \      / __|  / _ \  | '__|  / _ \ ^6#
^6#^2 \__ \ | |_| | | |_) | | | | | | | | | | | |  __/^7  _ ^2 | (__  | (_) | | |    |  __/ ^6#
^6#^2 |___/  \__,_| |_.__/  |_| |_| |_| |_| |_|  \___|^7 (_)^2  \___|  \___/  |_|     \___| ^6#
^6#                                                                                   ^6#
^6#^2        ^7Github: ^4https://github.com/sublime-framework-cfx/sublime_core-fivem        ^6#
^6#####################################################################################
]])
    -- require('imports.version.server').check('github', nil, 500) ---@load version check && check update
    -- require('imports.mysql.server').init() ---@load oxmysql
end	
Found table content:	
    service = service, ---@type string<'client' | 'server'>
    name = sublime_core, ---@type string<'sublime_core'>
    env = sublime_core, ---@type string<'resource_name?'>
    -- hashEvent = FormatEvent,
    await = await,
    lang = GetConvar('sublime:locale', 'fr') ---@type string<'fr' | 'en' | unknown>
	
Processing item:	service = service	
Kept original item:	service = service	
Processing item:	---@type string<'client' | 'server'>
    name = sublime_core	
Kept original item:	---@type string<'client' | 'server'>
    name = sublime_core	
Processing item:	---@type string<'sublime_core'>
    env = sublime_core	
Kept original item:	---@type string<'sublime_core'>
    env = sublime_core	
Processing item:	---@type string<'resource_name?'>
    -- hashEvent = FormatEvent	
Kept original item:	---@type string<'resource_name?'>
    -- hashEvent = FormatEvent	
Processing item:	await = await	
Kept original item:	await = await	
Processing item:	lang = GetConvar('sublime:locale'	
Kept original item:	lang = GetConvar('sublime:locale'	
Processing item:	'fr') ---@type string<'fr' | 'en' | unknown>	
Kept original item:	'fr') ---@type string<'fr' | 'en' | unknown>	
Found table content:	
    __newindex = function(self, name, value)
        rawset(self, name, value)
        if type(value) == 'function' then
            exports(name, value)
        end
    end
	
Processing item:	__newindex = function(self	
Kept original item:	__newindex = function(self	
Processing item:	name	
Kept original item:	name	
Processing item:	value)
        rawset(self	
Kept original item:	value)
        rawset(self	
Processing item:	name	
Kept original item:	name	
Processing item:	value)
        if type(value) == 'function' then
            exports(name	
Kept original item:	value)
        if type(value) == 'function' then
            exports(name	
Processing item:	value)
        end
    end	
Kept original item:	value)
        end
    end	
Found table content:		
Found table content:	
    loaded = setmetatable({	
Processing item:	loaded = setmetatable({	
Kept original item:	loaded = setmetatable({	
Found table content:	
        __index = loaded,
        __newindex = function() end,
        __metatable = false,
    	
Processing item:	__index = loaded	
Kept original item:	__index = loaded	
Processing item:	__newindex = function() end	
Kept original item:	__newindex = function() end	
Processing item:	__metatable = false	
Kept original item:	__metatable = false	
Processing item:		
Found table content:	 string.strsplit(';', package.path) 	
Processing item:	string.strsplit(';'	
Kept original item:	string.strsplit(';'	
Processing item:	package.path)	
Kept original item:	package.path)	
Found table content:		
Returning diffs count:	1	
OnSetText called with text:	local mt_pvt, class = {
    __metatable = 'private',
    __ext = 0,
    __pack = function() return '' end,
}, {}

---@param prototype table?
---@return { new: fun(obj): table }
function class.new(prototype)
    local self = { __index = prototype }

    function self.new(obj)
        if obj.private then
            setmetatable(obj.private, mt_pvt)
        end

        return setmetatable(obj, self)
    end

    return self
end

return class	
Found table content:	
    __metatable = 'private',
    __ext = 0,
    __pack = function() return '' end,
	
Processing item:	__metatable = 'private'	
Kept original item:	__metatable = 'private'	
Processing item:	__ext = 0	
Kept original item:	__ext = 0	
Processing item:	__pack = function() return '' end	
Kept original item:	__pack = function() return '' end	
Processing item:		
Found table content:		
Found table content:	 new: fun(obj): table 	
Processing item:	new: fun(obj): table	
Kept original item:	new: fun(obj): table	
Found table content:	 __index = prototype 	
Processing item:	__index = prototype	
Kept original item:	__index = prototype	
Returning diffs count:	0	
OnSetText called with text:	if not sublime or not sublime.service then return error("Cannot load init modules", 3) end
local folders = require 'config.modules'

for i = 1, #folders do
    local folder <const> = folders[i]
    local files <const> = require(('modules.%s.index'):format(folder))

    if files.shared then
        local t <const> = files.shared
        for j = 1, #t do
            local file <const> = t[j]
            require(('modules.%s.%s.%s'):format(folder, 'shared', file))
        end
    end

    if files[sublime.service] then
        local t <const> = files[sublime.service]
        for j = 1, #t do
            local file <const> = t[j]
            require(('modules.%s.%s.%s'):format(folder, sublime.service, file))
        end
    end
end

folders = nil	
Returning diffs count:	0	
OnSetText called with text:	local player = {}

---@param key string
---@param value any
---@param force? 'ignore' | boolean
function player:set(key, value, force)
    if not self[key] or self[key] ~= value or force then
        self[key] = value
        if force and force == 'ignore' then return end
        TriggerEvent('sublime:player:set:'..key, value)
    end
end

---@param coords vec3
---@return number
function player:distance(coords)
    return #(self.coords - coords)
end

CreateThread(function()
    player:set('id', PlayerId())
    player:set('serverid', GetPlayerServerId(player.id))

    while true do
        player:set('ped', PlayerPedId())
        player:set('coords', GetEntityCoords(player.ped), 'ignore')
        player:set('vec4', vec4(player.coords.x, player.coords.y, player.coords.z, GetEntityHeading(player.ped)), 'ignore')

        local hasWeapon <const>, weaponHash <const> = GetCurrentPedWeapon(player.ped, true)
        player:set('weapon', hasWeapon and weaponHash or false)

        local vehicle <const> = GetVehiclePedIsIn(player.ped, false)
        if vehicle > 0 then
            player:set('vehicle', vehicle)

            if not player.seat or GetPedInVehicleSeat(vehicle, player.seat) ~= player.ped then
                for i = -1, GetVehicleMaxNumberOfPassengers(vehicle) - 1 do
                    if GetPedInVehicleSeat(vehicle, i) == player.ped then
                        player:set('seat', i)
                        break
                    end
                end
            end
        else
            player:set('vehicle', false)
            player:set('seat', false)
        end
    
        Wait(500)
    end
end)

---@param key string
---@return any
function sublime.GetPlayer(key)
    return player[key] or key == 'vehicle' and false or false
end

_ENV.player = player	
Found table content:		
Returning diffs count:	0	
OnSetText called with text:	return {
    client = {
        'player',
    },

    server = {
        'players',
    },
}	
Found table content:	
    client = {
        'player',
    	
Processing item:	client = {
        'player'	
Kept original item:	client = {
        'player'	
Processing item:		
Found table content:	
        'players',
    	
Processing item:	'players'	
Kept original item:	'players'	
Processing item:		
Returning diffs count:	0	
OnSetText called with text:	GlobalState.playersCount = 0
local PlayerExports = {}
local PlayerObject = setmetatable({}, {
    __newindex = function(self, key, value)
        rawset(self, key, value)
        print(key, value)
        PlayerExports[key] = true
    end
})

function sublime.GetPlayerExports()
    return PlayerExports
end

---@param id integer
---@param method string
---@param ... unknown?
---@return unknown?
function sublime.CallPlayerMethod(id, method, ...)
    print(id, method)
    local player = sublime.GetPlayerData(id)
    return PlayerObject[method](player, ...)
end

---@param source integer
function sublime.GetPlayerData(source)
    return sublime.players[source]
end

function sublime.RemovePlayerObject(source)
    local player = sublime.players[source]
    if player then
        sublime.players[source] = nil
        player = nil
        collectgarbage()
        TriggerEvent('sublime:player:remove', source)
    end
end

function PlayerObject:init()
    print(self.source, 'was initialized')
end

function PlayerObject:setName(name)
    self.private.name = name
end

function PlayerObject:getName()
    return self.private.name
end

---@param key string support nested keys separated by dots '.', exemple: 'metadata.name'
---@return unknown?
function PlayerObject:get(key)
    assert(key and type(key) == 'string', 'Invalid key: '..key)

    if key:find('.') then
        local keys <const> = {('.'):strsplit(key)}
        local value = self.private
        for i = 1, #keys do
            local key <const> = keys[i]
            value = value[key]
            if not value then
                return nil
            end
        end

        return value
    end

    return self.private[key]
end

local class <const> = require 'modules.handlers.shared.class'
return class.new(PlayerObject)

-----------------
--[[
function PlayerObject:init()
    GlobalState.playersCount += 1
end

function PlayerObject:__gc() -- destructor
    GlobalState.playersCount -= 1
end

function PlayerObject:save()
    -- save player in database
    return self
end

function PlayerObject:set(key, value, replicated)
    local _key, count = key:gsub('%W', '')

    if count > 0 then
        warn('Invalid key: '..key)
        key = _key
    end

    self.private.metadata[key] = value

    if replicated then
        --TriggerClientEvent('sublime:player:set', self.source, key, value)
    end
end

function PlayerObject:get(key)
    local metadata <const> = self.private.metadata
    if not key then return metadata end

    local _key, count = key:gsub('%W', '')

    if count > 0 then
        warn('Invalid key: '..key)
        key = _key
    end

    return metadata[key]
end

function PlayerObject:setName(name)
    self.private.name = name
    return self
end

function PlayerObject:getName()
    return self.private.name
end

---@param source integer
---@param data table
---@return table
function sublime.CreatePlayerObject(source, data)
    if sublime.players[source] then
        return sublime.players[source]
    end

    data.metadata = data.metadata or {}
    data.group = data.group or 'user'
    data.databaseId = data.databaseId or 0 ---@todo: get from database id
    data.licenses = data.licenses or {} ---@todo: use license manager

    local object = { 
        source = source,
        export = 'player.'..source,
        private = data
    }

    local player <const> = PlayerObject:new(object)
    sublime.players[source] = player
    --sublime.playersDatabaseId[player.private.databaseId] = source

    return player
end

---@param source integer
function sublime.RemovePlayerObject(source)
    local player = sublime.players[source]
    if player then
        sublime.players[source] = nil
        player = nil
        collectgarbage()
        TriggerEvent('sublime:player:remove', source)
    end
end

---@param source integer
function sublime.GetPlayerData(source)
    return sublime.players[source]
end]]	
Found table content:		
Found table content:		
Found table content:	
    __newindex = function(self, key, value)
        rawset(self, key, value)
        print(key, value)
        PlayerExports[key] = true
    end
	
Processing item:	__newindex = function(self	
Kept original item:	__newindex = function(self	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
        rawset(self	
Kept original item:	value)
        rawset(self	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
        print(key	
Kept original item:	value)
        print(key	
Processing item:	value)
        PlayerExports[key] = true
    end	
Kept original item:	value)
        PlayerExports[key] = true
    end	
Found table content:	('.'):strsplit(key)	
Processing item:	('.'):strsplit(key)	
Kept original item:	('.'):strsplit(key)	
Found table content:		
Found table content:		
Found table content:	 
        source = source,
        export = 'player.'..source,
        private = data
    	
Processing item:	source = source	
Kept original item:	source = source	
Processing item:	export = 'player.'..source	
Kept original item:	export = 'player.'..source	
Processing item:	private = data	
Kept original item:	private = data	
Returning diffs count:	0	
OnSetText called with text:	--This empty file causes the scheduler.lua to load clientside
--scheduler.lua when loaded inside the sessionmanager resource currently manages remote callbacks.
--Without this, callbacks will only work server->client and not client->server.	
Returning diffs count:	0	
OnSetText called with text:	local PlayerClass = require 'modules.main.server.class.player'

---@param source integer
---@param data table
---@return table
function sublime.CreatePlayerObject(source, data)
    if sublime.players[source] then
        return sublime.players[source]
    end

    data.metadata = data.metadata or {}
    data.group = data.group or 'user'
    data.databaseId = data.databaseId or 0
    data.licenses = data.licenses or {}

    local object = { 
        source = source,
        private = data
    }

    local player <const> = PlayerClass.new(object)
    sublime.players[source] = player
    --sublime.playersDatabaseId[player.private.databaseId] = source

    return player
end

sublime.CreatePlayerObject(1, { name = 'John', age = 20 })
local p = sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })

p:init()


RegisterCommand('hh', function()
    local player2 = sublime.GetPlayerData(2)
    print(player2?.source)
    if not player2 then
        print('Player not found')
        return
    end

    print(player2:getName())
end)	
Found table content:		
Found table content:		
Found table content:	 
        source = source,
        private = data
    	
Processing item:	source = source	
Kept original item:	source = source	
Processing item:	private = data	
Kept original item:	private = data	
Found table content:	 name = 'John', age = 20 	
Processing item:	name = 'John'	
Kept original item:	name = 'John'	
Processing item:	age = 20	
Kept original item:	age = 20	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Returning diffs count:	1	
OnSetText called with text:	-- This resource is part of the default Cfx.re asset pack (cfx-server-data)
-- Altering or recreating for local use only is strongly discouraged.

version '1.0.0'
author 'Cfx.re <root@cfx.re>'
description 'Handles the "host lock" for non-OneSync servers. Do not disable.'
repository 'https://github.com/citizenfx/cfx-server-data'

fx_version 'cerulean'
games { 'gta4', 'gta5' }

server_script 'server/host_lock.lua'
client_script 'client/empty.lua'	
Found table content:	 'gta4', 'gta5' 	
Processing item:	'gta4'	
Kept original item:	'gta4'	
Processing item:	'gta5'	
Kept original item:	'gta5'	
Returning diffs count:	1	
OnSetText called with text:	-- This resource is part of the default Cfx.re asset pack (cfx-server-data)
-- Altering or recreating for local use only is strongly discouraged.

version '1.0.0'
author 'Cfx.re <root@cfx.re>'
description 'Builds resources with webpack. To learn more: https://webpack.js.org'
repository 'https://github.com/citizenfx/cfx-server-data'

dependency 'yarn'
server_script 'webpack_builder.js'

fx_version 'adamant'
game 'common'
	
Returning diffs count:	1	
OnSetText called with text:	-- whitelist c2s events
RegisterServerEvent('hostingSession')
RegisterServerEvent('hostedSession')

-- event handler for pre-session 'acquire'
local currentHosting
local hostReleaseCallbacks = {}

-- TODO: add a timeout for the hosting lock to be held
-- TODO: add checks for 'fraudulent' conflict cases of hosting attempts (typically whenever the host can not be reached)
AddEventHandler('hostingSession', function()
    -- if the lock is currently held, tell the client to await further instruction
    if currentHosting then
        TriggerClientEvent('sessionHostResult', source, 'wait')

        -- register a callback for when the lock is freed
        table.insert(hostReleaseCallbacks, function()
            TriggerClientEvent('sessionHostResult', source, 'free')
        end)

        return
    end

    -- if the current host was last contacted less than a second ago
    if GetHostId() then
        if GetPlayerLastMsg(GetHostId()) < 1000 then
            TriggerClientEvent('sessionHostResult', source, 'conflict')

            return
        end
    end

    hostReleaseCallbacks = {}

    currentHosting = source

    TriggerClientEvent('sessionHostResult', source, 'go')

    -- set a timeout of 5 seconds
    SetTimeout(5000, function()
        if not currentHosting then
            return
        end

        currentHosting = nil

        for _, cb in ipairs(hostReleaseCallbacks) do
            cb()
        end
    end)
end)

AddEventHandler('hostedSession', function()
    -- check if the client is the original locker
    if currentHosting ~= source then
        -- TODO: drop client as they're clearly lying
        print(currentHosting, '~=', source)
        return
    end

    -- free the host lock (call callbacks and remove the lock value)
    for _, cb in ipairs(hostReleaseCallbacks) do
        cb()
    end

    currentHosting = nil
end)

EnableEnhancedHostSupport(true)	
Found table content:		
Found table content:		
Returning diffs count:	0	
OnSetText called with text:	-- This resource is part of the default Cfx.re asset pack (cfx-server-data)
-- Altering or recreating for local use only is strongly discouraged.

version '1.0.0'
author 'Cfx.re <root@cfx.re>'
description 'Builds resources with yarn. To learn more: https://classic.yarnpkg.com'
repository 'https://github.com/citizenfx/cfx-server-data'

fx_version 'adamant'
game 'common'

server_script 'yarn_builder.js'
	
Returning diffs count:	1	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, . }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	10	End:	20	
New text:	{ j = true, m = true }	
Found table content:	 .j, . 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.	
Found field with dot. Name:	
Creating diff. Start:	33	End:	42	
New text:	{ j = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	10	End:	20	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	33	End:	43	
New text:	{ j = true, m = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m, }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	10	End:	20	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m, 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Processing item:		
Creating diff. Start:	33	End:	44	
New text:	{ j = true, m = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m,  }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	10	End:	20	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m,  	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Processing item:		
Creating diff. Start:	33	End:	45	
New text:	{ j = true, m = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m, z }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	10	End:	20	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m, z 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Processing item:	z	
Kept original item:	z	
Creating diff. Start:	33	End:	46	
New text:	{ j = true, m = true, z }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m,  }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	10	End:	20	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m,  	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Processing item:		
Creating diff. Start:	33	End:	45	
New text:	{ j = true, m = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m, . }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	10	End:	20	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m, . 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Processing item:	.	
Found field with dot. Name:	
Creating diff. Start:	33	End:	46	
New text:	{ j = true, m = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m }
local t2 = { .j, .m, .z }	
Found table content:	 .j, .m 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Creating diff. Start:	10	End:	20	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m, .z 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Processing item:	.z	
Found field with dot. Name:	z	
Added entry:	z = true	
Creating diff. Start:	33	End:	47	
New text:	{ j = true, m = true, z = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m, }
local t2 = { .j, .m, .z }	
Found table content:	 .j, .m, 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Processing item:		
Creating diff. Start:	10	End:	21	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m, .z 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Processing item:	.z	
Found field with dot. Name:	z	
Added entry:	z = true	
Creating diff. Start:	34	End:	48	
New text:	{ j = true, m = true, z = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m,  }
local t2 = { .j, .m, .z }	
Found table content:	 .j, .m,  	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Processing item:		
Creating diff. Start:	10	End:	22	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m, .z 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Processing item:	.z	
Found field with dot. Name:	z	
Added entry:	z = true	
Creating diff. Start:	35	End:	49	
New text:	{ j = true, m = true, z = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m, . }
local t2 = { .j, .m, .z }	
Found table content:	 .j, .m, . 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Processing item:	.	
Found field with dot. Name:	
Creating diff. Start:	10	End:	23	
New text:	{ j = true, m = true }	
Found table content:	 .j, .m, .z 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Processing item:	.z	
Found field with dot. Name:	z	
Added entry:	z = true	
Creating diff. Start:	36	End:	50	
New text:	{ j = true, m = true, z = true }	
Returning diffs count:	2	
OnSetText called with text:	local t = { .j, .m, .z }
local t2 = { .j, .m, .z }	
Found table content:	 .j, .m, .z 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Processing item:	.z	
Found field with dot. Name:	z	
Added entry:	z = true	
Creating diff. Start:	10	End:	24	
New text:	{ j = true, m = true, z = true }	
Found table content:	 .j, .m, .z 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Processing item:	.z	
Found field with dot. Name:	z	
Added entry:	z = true	
Creating diff. Start:	37	End:	51	
New text:	{ j = true, m = true, z = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, 	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:		
Creating diff. Start:	696	End:	712	
New text:	{ name = true, age = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age,  }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age,  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:		
Creating diff. Start:	696	End:	713	
New text:	{ name = true, age = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, 	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:		
Creating diff. Start:	696	End:	712	
New text:	{ name = true, age = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .}

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.	
Found field with dot. Name:	
Creating diff. Start:	696	End:	713	
New text:	{ name = true, age = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .t}

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .t	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.t	
Found field with dot. Name:	t	
Added entry:	t = true	
Creating diff. Start:	696	End:	714	
New text:	{ name = true, age = true, t = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .te}

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .te	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.te	
Found field with dot. Name:	te	
Added entry:	te = true	
Creating diff. Start:	696	End:	715	
New text:	{ name = true, age = true, te = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .tes}

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .tes	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.tes	
Found field with dot. Name:	tes	
Added entry:	tes = true	
Creating diff. Start:	696	End:	716	
New text:	{ name = true, age = true, tes = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test}

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Creating diff. Start:	696	End:	717	
New text:	{ name = true, age = true, test = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, .test2 }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, .test2 	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:	.test2	
Found field with dot. Name:	test2	
Added entry:	test2 = true	
Creating diff. Start:	696	End:	755	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true, test2 = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, 	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Creating diff. Start:	696	End:	748	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName,  }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName,  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Creating diff. Start:	696	End:	749	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , 	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Processing item:		
Creating diff. Start:	696	End:	750	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, ,  }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, ,  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Processing item:		
Creating diff. Start:	696	End:	751	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , 	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Processing item:		
Processing item:		
Creating diff. Start:	696	End:	752	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , ,  }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , ,  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Processing item:		
Processing item:		
Creating diff. Start:	696	End:	753	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , , }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , , 	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Processing item:		
Processing item:		
Processing item:		
Creating diff. Start:	696	End:	754	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,  }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Processing item:		
Processing item:		
Processing item:		
Creating diff. Start:	696	End:	755	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , , }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , , 	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Processing item:		
Processing item:		
Processing item:		
Creating diff. Start:	696	End:	754	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , ,  }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , ,  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Processing item:		
Processing item:		
Creating diff. Start:	696	End:	753	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , 	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Processing item:		
Processing item:		
Creating diff. Start:	696	End:	752	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, ,  }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, ,  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Processing item:		
Creating diff. Start:	696	End:	751	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , 	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Processing item:		
Creating diff. Start:	696	End:	750	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName,  }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName,  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Creating diff. Start:	696	End:	749	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, 	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Creating diff. Start:	696	End:	748	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,  }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Processing item:		
Processing item:		
Processing item:		
Creating diff. Start:	696	End:	755	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	---@meta coroutine

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine"])
---
---@class coroutinelib
coroutine = {}

---
---Creates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `"thread"`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.create"])
---
---@param f async fun(...):...
---@return thread
---@nodiscard
function coroutine.create(f) end

---
---Returns true when the coroutine `co` can yield. The default for `co` is the running coroutine.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.isyieldable"])
---
---@param co? thread
---@return boolean
---@nodiscard
function coroutine.isyieldable(co) end

---@version >5.4
---
---Closes coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.close"])
---
---@param co thread
---@return boolean noerror
---@return any errorobject
function coroutine.close(co) end

---
---Starts or continues the execution of coroutine `co`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.resume"])
---
---@param co    thread
---@param val1? any
---@return boolean success
---@return any ...
function coroutine.resume(co, val1, ...) end

---
---Returns the running coroutine plus a boolean, true when the running coroutine is the main one.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.running"])
---
---@return thread running
---@return boolean ismain
---@nodiscard
function coroutine.running() end

---
---Returns the status of coroutine `co`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.status"])
---
---@param co thread
---@return
---| '"running"'   # Is running.
---| '"suspended"' # Is suspended or not started.
---| '"normal"'    # Is active but not running.
---| '"dead"'      # Has finished or stopped with an error.
---@nodiscard
function coroutine.status(co) end

---
---Creates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.wrap"])
---
---@param f async fun(...):...
---@return fun(...):...
---@nodiscard
function coroutine.wrap(f) end

---
---Suspends the execution of the calling coroutine.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.yield"])
---
---@async
---@return any ...
function coroutine.yield(...) end

return coroutine
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/coroutine.lua	
OnSetText called with text:	---@meta package

---
---Loads the given module, returns any value returned by the searcher(`true` when `nil`). Besides that value, also returns as a second result the loader data returned by the searcher, which indicates how `require` found the module. (For instance, if the module came from a file, this loader data is the file path.)
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-require"])
---
---@param modname string
---@return unknown
---@return unknown loaderdata
function require(modname) end

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package"])
---
---@class packagelib
---
---The path used by `require` to search for a C loader.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.cpath"])
---
---@field cpath     string
---
---A table used by `require` to control which modules are already loaded.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.loaded"])
---
---@field loaded    table
---
---The path used by `require` to search for a Lua loader.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.path"])
---
---@field path      string
---
---A table to store loaders for specific modules.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.preload"])
---
---@field preload   table
package = {}

---
---A string describing some compile-time configurations for packages.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.config"])
---
package.config = [[
/
;
?
!
-]]

---@version <5.1
---
---A table used by `require` to control how to load modules.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.loaders"])
---
package.loaders = {}

---
---Dynamically links the host program with the C library `libname`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.loadlib"])
---
---@param libname string
---@param funcname string
---@return any
function package.loadlib(libname, funcname) end

---
---A table used by `require` to control how to load modules.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.searchers"])
---
---@version >5.2
package.searchers = {}

---
---Searches for the given `name` in the given `path`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.searchpath"])
---
---@version >5.2,JIT
---@param name string
---@param path string
---@param sep? string
---@param rep? string
---@return string? filename
---@return string? errmsg
---@nodiscard
function package.searchpath(name, path, sep, rep) end

---
---Sets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.seeall"])
---
---@version <5.1
---@param module table
function package.seeall(module) end

return package
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/package.lua	
OnSetText called with text:	---@meta string

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string"])
---
---@class stringlib
string = {}

---
---Returns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.byte"])
---
---@param s  string|number
---@param i? integer
---@param j? integer
---@return integer ...
---@nodiscard
function string.byte(s, i, j) end

---
---Returns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.char"])
---
---@param byte integer
---@param ... integer
---@return string
---@nodiscard
function string.char(byte, ...) end

---
---Returns a string containing a binary representation (a *binary chunk*) of the given function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.dump"])
---
---@param f      async fun(...):...
---@param strip? boolean
---@return string
---@nodiscard
function string.dump(f, strip) end

---
---Miss locale <string.find>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.find"])
---
---@param s       string|number
---@param pattern string|number
---@param init?   integer
---@param plain?  boolean
---@return integer|nil start
---@return integer|nil end
---@return any|nil ... captured
---@nodiscard
function string.find(s, pattern, init, plain) end

---
---Returns a formatted version of its variable number of arguments following the description given in its first argument.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.format"])
---
---@param s string|number
---@param ... any
---@return string
---@nodiscard
function string.format(s, ...) end

---
---Miss locale <string.gmatch>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.gmatch"])
---
---@param s       string|number
---@param pattern string|number
---@param init?   integer
---@return fun():string, ...
function string.gmatch(s, pattern, init) end

---
---Miss locale <string.gsub>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.gsub"])
---
---@param s       string|number
---@param pattern string|number
---@param repl    string|number|table|function
---@param n?      integer
---@return string
---@return integer count
function string.gsub(s, pattern, repl, n) end

---
---Returns its length.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.len"])
---
---@param s string|number
---@return integer
---@nodiscard
function string.len(s) end

---
---Returns a copy of this string with all uppercase letters changed to lowercase.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.lower"])
---
---@param s string|number
---@return string
---@nodiscard
function string.lower(s) end

---
---Miss locale <string.match>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.match"])
---
---@param s       string|number
---@param pattern string|number
---@param init?   integer
---@return any ...
---@nodiscard
function string.match(s, pattern, init) end

---@version >5.3
---
---Miss locale <string.pack>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.pack"])
---
---@param fmt string
---@param v1  string|number
---@param v2? string|number
---@param ... string|number
---@return string binary
---@nodiscard
function string.pack(fmt, v1, v2, ...) end

---@version >5.3
---
---Miss locale <string.packsize>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.packsize"])
---
---@param fmt string
---@return integer
---@nodiscard
function string.packsize(fmt) end

---
---Returns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.rep"])
---
---@param s    string|number
---@param n    integer
---@param sep? string|number
---@return string
---@nodiscard
function string.rep(s, n, sep) end

---
---Returns a string that is the string `s` reversed.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.reverse"])
---
---@param s string|number
---@return string
---@nodiscard
function string.reverse(s) end

---
---Returns the substring of the string that starts at `i` and continues until `j`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.sub"])
---
---@param s  string|number
---@param i  integer
---@param j? integer
---@return string
---@nodiscard
function string.sub(s, i, j) end

---@version >5.3
---
---Returns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?["en-us/54/manual.html/6.4.2"])) .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.unpack"])
---
---@param fmt  string
---@param s    string
---@param pos? integer
---@return any ...
---@nodiscard
function string.unpack(fmt, s, pos) end

---
---Returns a copy of this string with all lowercase letters changed to uppercase.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.upper"])
---
---@param s string|number
---@return string
---@nodiscard
function string.upper(s) end

return string
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/string.lua	
OnSetText called with text:	---@meta _

---@class unknown
---@class any
---@class nil
---@class boolean
---@class true: boolean
---@class false: boolean
---@class number
---@class integer: number
---@class thread
---@class table<K, V>: { [K]: V }
---@class string: stringlib
---@class userdata
---@class lightuserdata
---@class function
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/builtin.lua	
OnSetText called with text:	---@meta debug

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug"])
---
---@class debuglib
debug = {}

---@class debuginfo
---@field name            string
---@field namewhat        string
---@field source          string
---@field short_src       string
---@field linedefined     integer
---@field lastlinedefined integer
---@field what            string
---@field currentline     integer
---@field istailcall      boolean
---@field nups            integer
---@field nparams         integer
---@field isvararg        boolean
---@field func            function
---@field ftransfer       integer
---@field ntransfer       integer
---@field activelines     table

---
---Enters an interactive mode with the user, running each string that the user enters.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.debug"])
---
function debug.debug() end

---@version 5.1
---
---Returns the environment of object `o` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getfenv"])
---
---@param o any
---@return table
---@nodiscard
function debug.getfenv(o) end

---
---Returns the current hook settings of the thread.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.gethook"])
---
---@param co? thread
---@return function hook
---@return string mask
---@return integer count
---@nodiscard
function debug.gethook(co) end

---@alias infowhat string
---|+"n"     # `name` and `namewhat`
---|+"S"     # `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`
---|+"l"     # `currentline`
---|+"t"     # `istailcall`
---|+"u" # `nups`, `nparams`, and `isvararg`
---|+"f"     # `func`
---|+"r"     # `ftransfer` and `ntransfer`
---|+"L"     # `activelines`

---
---Returns a table with information about a function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getinfo"])
---
---@overload fun(f: integer|function, what?: infowhat):debuginfo
---@param thread thread
---@param f      integer|async fun(...):...
---@param what?  infowhat
---@return debuginfo
---@nodiscard
function debug.getinfo(thread, f, what) end

---
---Returns the name and the value of the local variable with index `local` of the function at level `f` of the stack.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getlocal"])
---
---@overload fun(f: integer|async fun(...):..., index: integer):string, any
---@param thread  thread
---@param f       integer|async fun(...):...
---@param index   integer
---@return string name
---@return any    value
---@nodiscard
function debug.getlocal(thread, f, index) end

---
---Returns the metatable of the given value.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getmetatable"])
---
---@param object any
---@return table metatable
---@nodiscard
function debug.getmetatable(object) end

---
---Returns the registry table.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getregistry"])
---
---@return table
---@nodiscard
function debug.getregistry() end

---
---Returns the name and the value of the upvalue with index `up` of the function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getupvalue"])
---
---@param f  async fun(...):...
---@param up integer
---@return string name
---@return any    value
---@nodiscard
function debug.getupvalue(f, up) end

---
---Returns the `n`-th user value associated
---to the userdata `u` plus a boolean,
---`false` if the userdata does not have that value.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getuservalue"])
---
---@param u  userdata
---@param n? integer
---@return any
---@return boolean
---@nodiscard
function debug.getuservalue(u, n) end

---
---### **Deprecated in `Lua 5.4.2`**
---
---Sets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.
---
---In case of success, this function returns the old limit. In case of error, it returns `false`.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setcstacklimit"])
---
---@deprecated
---@param limit integer
---@return integer|boolean
function debug.setcstacklimit(limit) end

---
---Sets the environment of the given `object` to the given `table` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setfenv"])
---
---@version 5.1
---@generic T
---@param object T
---@param env    table
---@return T object
function debug.setfenv(object, env) end

---@alias hookmask string
---|+"c" # Calls hook when Lua calls a function.
---|+"r" # Calls hook when Lua returns from a function.
---|+"l" # Calls hook when Lua enters a new line of code.

---
---Sets the given function as a hook.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.sethook"])
---
---@overload fun(hook: (async fun(...):...), mask: hookmask, count?: integer)
---@overload fun(thread: thread):...
---@overload fun(...):...
---@param thread thread
---@param hook   async fun(...):...
---@param mask   hookmask
---@param count? integer
function debug.sethook(thread, hook, mask, count) end

---
---Assigns the `value` to the local variable with index `local` of the function at `level` of the stack.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setlocal"])
---
---@overload fun(level: integer, index: integer, value: any):string
---@param thread thread
---@param level  integer
---@param index  integer
---@param value  any
---@return string name
function debug.setlocal(thread, level, index, value) end

---
---Sets the metatable for the given value to the given table (which can be `nil`).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setmetatable"])
---
---@generic T
---@param value T
---@param meta? table
---@return T value
function debug.setmetatable(value, meta) end

---
---Assigns the `value` to the upvalue with index `up` of the function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setupvalue"])
---
---@param f     async fun(...):...
---@param up    integer
---@param value any
---@return string name
function debug.setupvalue(f, up, value) end

---
---Sets the given `value` as
---the `n`-th user value associated to the given `udata`.
---`udata` must be a full userdata.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setuservalue"])
---
---@param udata userdata
---@param value any
---@param n?    integer
---@return userdata udata
function debug.setuservalue(udata, value, n) end

---
---Returns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.traceback"])
---
---@overload fun(message?: any, level?: integer): string
---@param thread   thread
---@param message? any
---@param level?   integer
---@return string  message
---@nodiscard
function debug.traceback(thread, message, level) end

---@version >5.2, JIT
---
---Returns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.upvalueid"])
---
---@param f async fun(...):...
---@param n integer
---@return lightuserdata id
---@nodiscard
function debug.upvalueid(f, n) end

---@version >5.2, JIT
---
---Make the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.upvaluejoin"])
---
---@param f1 async fun(...):...
---@param n1 integer
---@param f2 async fun(...):...
---@param n2 integer
function debug.upvaluejoin(f1, n1, f2, n2) end

return debug
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/debug.lua	
OnSetText called with text:	---@meta os

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os"])
---
---@class oslib
os = {}

---
---Returns an approximation of the amount in seconds of CPU time used by the program.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.clock"])
---
---@return number
---@nodiscard
function os.clock() end

---@class osdate:osdateparam
---
---four digits
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.year"])
---
---@field year  integer|string
---
---1-12
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.month"])
---
---@field month integer|string
---
---1-31
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.day"])
---
---@field day   integer|string
---
---0-23
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.hour"])
---
---@field hour  integer|string
---
---0-59
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.min"])
---
---@field min   integer|string
---
---0-61
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.sec"])
---
---@field sec   integer|string
---
---weekday, 1–7, Sunday is 1
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.wday"])
---
---@field wday  integer|string
---
---day of the year, 1–366
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.yday"])
---
---@field yday  integer|string
---
---daylight saving flag, a boolean
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.isdst"])
---
---@field isdst boolean

---
---Returns a string or a table containing date and time, formatted according to the given string `format`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.date"])
---
---@param format? string
---@param time?   integer
---@return string|osdate
---@nodiscard
function os.date(format, time) end

---
---Returns the difference, in seconds, from time `t1` to time `t2`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.difftime"])
---
---@param t2 integer
---@param t1 integer
---@return integer
---@nodiscard
function os.difftime(t2, t1) end

---
---Passes `command` to be executed by an operating system shell.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.execute"])
---
---@param command? string
---@return boolean?  suc
---@return exitcode? exitcode
---@return integer?  code
function os.execute(command) end

---
---Calls the ISO C function `exit` to terminate the host program.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.exit"])
---
---@param code?  boolean|integer
---@param close? boolean
function os.exit(code, close) end

---
---Returns the value of the process environment variable `varname`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.getenv"])
---
---@param varname string
---@return string?
---@nodiscard
function os.getenv(varname) end

---
---Deletes the file with the given name.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.remove"])
---
---@param filename string
---@return boolean suc
---@return string? errmsg
function os.remove(filename) end

---
---Renames the file or directory named `oldname` to `newname`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.rename"])
---
---@param oldname string
---@param newname string
---@return boolean suc
---@return string? errmsg
function os.rename(oldname, newname) end

---@alias localecategory
---|>"all"
---| "collate"
---| "ctype"
---| "monetary"
---| "numeric"
---| "time"

---
---Sets the current locale of the program.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.setlocale"])
---
---@param locale    string|nil
---@param category? localecategory
---@return string localecategory
function os.setlocale(locale, category) end

---@class osdateparam
---
---four digits
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.year"])
---
---@field year  integer|string
---
---1-12
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.month"])
---
---@field month integer|string
---
---1-31
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.day"])
---
---@field day   integer|string
---
---0-23
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.hour"])
---
---@field hour  (integer|string)?
---
---0-59
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.min"])
---
---@field min   (integer|string)?
---
---0-61
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.sec"])
---
---@field sec   (integer|string)?
---
---weekday, 1–7, Sunday is 1
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.wday"])
---
---@field wday  (integer|string)?
---
---day of the year, 1–366
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.yday"])
---
---@field yday  (integer|string)?
---
---daylight saving flag, a boolean
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.isdst"])
---
---@field isdst boolean?

---
---Returns the current time when called without arguments, or a time representing the local date and time specified by the given table.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.time"])
---
---@param date? osdateparam
---@return integer
---@nodiscard
function os.time(date) end

---
---Returns a string with a file name that can be used for a temporary file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.tmpname"])
---
---@return string
---@nodiscard
function os.tmpname() end

return os
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/os.lua	
OnSetText called with text:	---@meta io

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io"])
---
---@class iolib
---
---standard input.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.stdin"])
---
---@field stdin  file*
---
---standard output.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.stdout"])
---
---@field stdout file*
---
---standard error.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.stderr"])
---
---@field stderr file*
io = {}

---@alias openmode
---|>"r"   # Read mode.
---| "w"   # Write mode.
---| "a"   # Append mode.
---| "r+"  # Update mode, all previous data is preserved.
---| "w+"  # Update mode, all previous data is erased.
---| "a+"  # Append update mode, previous data is preserved, writing is only allowed at the end of file.
---| "rb"  # Read mode. (in binary mode.)
---| "wb"  # Write mode. (in binary mode.)
---| "ab"  # Append mode. (in binary mode.)
---| "r+b" # Update mode, all previous data is preserved. (in binary mode.)
---| "w+b" # Update mode, all previous data is erased. (in binary mode.)
---| "a+b" # Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)

---
---Close `file` or default output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.close"])
---
---@param file? file*
---@return boolean?  suc
---@return exitcode? exitcode
---@return integer?  code
function io.close(file) end

---
---Saves any written data to default output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.flush"])
---
function io.flush() end

---
---Sets `file` as the default input file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.input"])
---
---@overload fun():file*
---@param file string|file*
function io.input(file) end

---
---------
---```lua
---for c in io.lines(filename, ...) do
---    body
---end
---```
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.lines"])
---
---@param filename string?
---@param ... readmode
---@return fun():any, ...
function io.lines(filename, ...) end

---
---Opens a file, in the mode specified in the string `mode`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.open"])
---
---@param filename string
---@param mode?    openmode
---@return file*?
---@return string? errmsg
---@nodiscard
function io.open(filename, mode) end

---
---Sets `file` as the default output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.output"])
---
---@overload fun():file*
---@param file string|file*
function io.output(file) end

---@alias popenmode
---| "r" # Read data from this program by `file`.
---| "w" # Write data to this program by `file`.

---
---Starts program prog in a separated process.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.popen"])
---
---@param prog  string
---@param mode? popenmode
---@return file*?
---@return string? errmsg
function io.popen(prog, mode) end

---
---Reads the `file`, according to the given formats, which specify what to read.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.read"])
---
---@param ... readmode
---@return any
---@return any ...
---@nodiscard
function io.read(...) end

---
---In case of success, returns a handle for a temporary file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.tmpfile"])
---
---@return file*
---@nodiscard
function io.tmpfile() end

---@alias filetype
---| "file"        # Is an open file handle.
---| "closed file" # Is a closed file handle.
---| `nil`         # Is not a file handle.

---
---Checks whether `obj` is a valid file handle.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.type"])
---
---@param file file*
---@return filetype
---@nodiscard
function io.type(file) end

---
---Writes the value of each of its arguments to default output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.write"])
---
---@return file*
---@return string? errmsg
function io.write(...) end

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file"])
---
---@class file*
local file = {}

---@alias readmode integer|string
---| "n"  # Reads a numeral and returns it as number.
---| "a"  # Reads the whole file.
---|>"l"  # Reads the next line skipping the end of line.
---| "L"  # Reads the next line keeping the end of line.

---@alias exitcode "exit"|"signal"

---
---Close `file`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:close"])
---
---@return boolean?  suc
---@return exitcode? exitcode
---@return integer?  code
function file:close() end

---
---Saves any written data to `file`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:flush"])
---
function file:flush() end

---
---------
---```lua
---for c in file:lines(...) do
---    body
---end
---```
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:lines"])
---
---@param ... readmode
---@return fun():any, ...
function file:lines(...) end

---
---Reads the `file`, according to the given formats, which specify what to read.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:read"])
---
---@param ... readmode
---@return any
---@return any ...
---@nodiscard
function file:read(...) end

---@alias seekwhence
---| "set" # Base is beginning of the file.
---|>"cur" # Base is current position.
---| "end" # Base is end of file.

---
---Sets and gets the file position, measured from the beginning of the file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:seek"])
---
---@param whence? seekwhence
---@param offset? integer
---@return integer offset
---@return string? errmsg
function file:seek(whence, offset) end

---@alias vbuf
---| "no"   # Output operation appears immediately.
---| "full" # Performed only when the buffer is full.
---| "line" # Buffered until a newline is output.

---
---Sets the buffering mode for an output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:setvbuf"])
---
---@param mode vbuf
---@param size? integer
function file:setvbuf(mode, size) end

---
---Writes the value of each of its arguments to `file`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:write"])
---
---@param ... string|number
---@return file*?
---@return string? errmsg
function file:write(...) end

return io
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/io.lua	
OnSetText called with text:	---@meta table

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table"])
---
---@class tablelib
table = {}

---
---Given a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ··· sep..list[j]`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.concat"])
---
---@param list table
---@param sep? string
---@param i?   integer
---@param j?   integer
---@return string
---@nodiscard
function table.concat(list, sep, i, j) end

---
---Inserts element `value` at position `pos` in `list`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.insert"])
---
---@overload fun(list: table, value: any)
---@param list table
---@param pos integer
---@param value any
function table.insert(list, pos, value) end

---@version <5.1
---
---Returns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.maxn"])
---
---@param table table
---@return integer
---@nodiscard
function table.maxn(table) end

---@version >5.3, JIT
---
---Moves elements from table `a1` to table `a2`.
---```lua
---a2[t],··· =
---a1[f],···,a1[e]
---return a2
---```
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.move"])
---
---@param a1  table
---@param f   integer
---@param e   integer
---@param t   integer
---@param a2? table
---@return table a2
function table.move(a1, f, e, t, a2) end

---@version >5.2, JIT
---
---Returns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `"n"` with the total number of arguments.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.pack"])
---
---@return table
---@nodiscard
function table.pack(...) end

---
---Removes from `list` the element at position `pos`, returning the value of the removed element.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.remove"])
---
---@param list table
---@param pos? integer
---@return any
function table.remove(list, pos) end

---
---Sorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.sort"])
---
---@generic T
---@param list T[]
---@param comp? fun(a: T, b: T):boolean
function table.sort(list, comp) end

---@version >5.2, JIT
---
---Returns the elements from the given list. This function is equivalent to
---```lua
---    return list[i], list[i+1], ···, list[j]
---```
---By default, `i` is `1` and `j` is `#list`.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.unpack"])
---
---@generic T1, T2, T3, T4, T5, T6, T7, T8, T9, T10
---@param list {
--- [1]?: T1,
--- [2]?: T2,
--- [3]?: T3,
--- [4]?: T4,
--- [5]?: T5,
--- [6]?: T6,
--- [7]?: T7,
--- [8]?: T8,
--- [9]?: T9,
--- [10]?: T10,
---}
---@param i?   integer
---@param j?   integer
---@return T1, T2, T3, T4, T5, T6, T7, T8, T9, T10
---@nodiscard
function table.unpack(list, i, j) end

---@version <5.1, JIT
---
---Executes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.foreach"])
---
---@generic T
---@param list any
---@param callback fun(key: string, value: any):T|nil
---@return T|nil
---@deprecated
function table.foreach(list, callback) end

---@version <5.1, JIT
---
---Executes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.foreachi"])
---
---@generic T
---@param list any
---@param callback fun(key: string, value: any):T|nil
---@return T|nil
---@deprecated
function table.foreachi(list, callback) end

---@version <5.1, JIT
---
---Returns the number of elements in the table. This function is equivalent to `#list`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.getn"])
---
---@generic T
---@param list T[]
---@return integer
---@nodiscard
---@deprecated
function table.getn(list) end

return table
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/table.lua	
OnSetText called with text:	---@meta math

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math"])
---
---@class mathlib
---
---A value larger than any other numeric value.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.huge"])
---
---@field huge       number
---
---Miss locale <math.maxinteger>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.maxinteger"])
---
---@field maxinteger integer
---
---Miss locale <math.mininteger>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.mininteger"])
---
---@field mininteger integer
---
---The value of *π*.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.pi"])
---
---@field pi         number
math = {}

---
---Returns the absolute value of `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.abs"])
---
---@generic Number: number
---@param x Number
---@return Number
---@nodiscard
function math.abs(x) end

---
---Returns the arc cosine of `x` (in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.acos"])
---
---@param x number
---@return number
---@nodiscard
function math.acos(x) end

---
---Returns the arc sine of `x` (in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.asin"])
---
---@param x number
---@return number
---@nodiscard
function math.asin(x) end

---
---Returns the arc tangent of `y/x` (in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.atan"])
---
---@param y  number
---@param x? number
---@return number
---@nodiscard
function math.atan(y, x) end

---@version <5.2
---
---Returns the arc tangent of `y/x` (in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.atan2"])
---
---@param y number
---@param x number
---@return number
---@nodiscard
function math.atan2(y, x) end

---
---Returns the smallest integral value larger than or equal to `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.ceil"])
---
---@param x number
---@return integer
---@nodiscard
function math.ceil(x) end

---
---Returns the cosine of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.cos"])
---
---@param x number
---@return number
---@nodiscard
function math.cos(x) end

---@version <5.2
---
---Returns the hyperbolic cosine of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.cosh"])
---
---@param x number
---@return number
---@nodiscard
function math.cosh(x) end

---
---Converts the angle `x` from radians to degrees.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.deg"])
---
---@param x number
---@return number
---@nodiscard
function math.deg(x) end

---
---Returns the value `e^x` (where `e` is the base of natural logarithms).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.exp"])
---
---@param x number
---@return number
---@nodiscard
function math.exp(x) end

---
---Returns the largest integral value smaller than or equal to `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.floor"])
---
---@param x number
---@return integer
---@nodiscard
function math.floor(x) end

---
---Returns the remainder of the division of `x` by `y` that rounds the quotient towards zero.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.fmod"])
---
---@param x number
---@param y number
---@return number
---@nodiscard
function math.fmod(x, y) end

---@version <5.2
---
---Decompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.frexp"])
---
---@param x number
---@return number m
---@return number e
---@nodiscard
function math.frexp(x) end

---@version <5.2
---
---Returns `m * (2 ^ e)` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.ldexp"])
---
---@param m number
---@param e number
---@return number
---@nodiscard
function math.ldexp(m, e) end

---
---Returns the logarithm of `x` in the given base.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.log"])
---
---@param x     number
---@param base? integer
---@return number
---@nodiscard
function math.log(x, base) end

---@version <5.1
---
---Returns the base-10 logarithm of x.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.log10"])
---
---@param x number
---@return number
---@nodiscard
function math.log10(x) end

---
---Returns the argument with the maximum value, according to the Lua operator `<`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.max"])
---
---@generic Number: number
---@param x Number
---@param ... Number
---@return Number
---@nodiscard
function math.max(x, ...) end

---
---Returns the argument with the minimum value, according to the Lua operator `<`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.min"])
---
---@generic Number: number
---@param x Number
---@param ... Number
---@return Number
---@nodiscard
function math.min(x, ...) end

---
---Returns the integral part of `x` and the fractional part of `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.modf"])
---
---@param x number
---@return integer
---@return number
---@nodiscard
function math.modf(x) end

---@version <5.2
---
---Returns `x ^ y` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.pow"])
---
---@param x number
---@param y number
---@return number
---@nodiscard
function math.pow(x, y) end

---
---Converts the angle `x` from degrees to radians.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.rad"])
---
---@param x number
---@return number
---@nodiscard
function math.rad(x) end

---
---* `math.random()`: Returns a float in the range [0,1).
---* `math.random(n)`: Returns a integer in the range [1, n].
---* `math.random(m, n)`: Returns a integer in the range [m, n].
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.random"])
---
---@overload fun():number
---@overload fun(m: integer):integer
---@param m integer
---@param n integer
---@return integer
---@nodiscard
function math.random(m, n) end

---
---* `math.randomseed(x, y)`: Concatenate `x` and `y` into a 128-bit `seed` to reinitialize the pseudo-random generator.
---* `math.randomseed(x)`: Equate to `math.randomseed(x, 0)` .
---* `math.randomseed()`: Generates a seed with a weak attempt for randomness.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.randomseed"])
---
---@param x? integer
---@param y? integer
function math.randomseed(x, y) end

---
---Returns the sine of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.sin"])
---
---@param x number
---@return number
---@nodiscard
function math.sin(x) end

---@version <5.2
---
---Returns the hyperbolic sine of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.sinh"])
---
---@param x number
---@return number
---@nodiscard
function math.sinh(x) end

---
---Returns the square root of `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.sqrt"])
---
---@param x number
---@return number
---@nodiscard
function math.sqrt(x) end

---
---Returns the tangent of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.tan"])
---
---@param x number
---@return number
---@nodiscard
function math.tan(x) end

---@version <5.2
---
---Returns the hyperbolic tangent of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.tanh"])
---
---@param x number
---@return number
---@nodiscard
function math.tanh(x) end

---@version >5.3
---
---Miss locale <math.tointeger>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.tointeger"])
---
---@param x any
---@return integer?
---@nodiscard
function math.tointeger(x) end

---@version >5.3
---
---Miss locale <math.type>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.type"])
---
---@param x any
---@return
---| '"integer"'
---| '"float"'
---| 'nil'
---@nodiscard
function math.type(x) end

---@version >5.3
---
---Miss locale <math.ult>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.ult"])
---
---@param m integer
---@param n integer
---@return boolean
---@nodiscard
function math.ult(m, n) end

return math
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua	
OnSetText called with text:	---@meta utf8

---@version >5.3
---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8"])
---
---@class utf8lib
---
---The pattern which matches exactly one UTF-8 byte sequence, assuming that the subject is a valid UTF-8 string.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.charpattern"])
---
---@field charpattern string
utf8 = {}

---
---Receives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.char"])
---
---@param code integer
---@param ... integer
---@return string
---@nodiscard
function utf8.char(code, ...) end

---
---Returns values so that the construction
---```lua
---for p, c in utf8.codes(s) do
---    body
---end
---```
---will iterate over all UTF-8 characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.codes"])
---
---@param s    string
---@param lax? boolean
---@return fun(s: string, p: integer):integer, integer
function utf8.codes(s, lax) end

---
---Returns the codepoints (as integers) from all characters in `s` that start between byte position `i` and `j` (both included).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.codepoint"])
---
---@param s    string
---@param i?   integer
---@param j?   integer
---@param lax? boolean
---@return integer code
---@return integer ...
---@nodiscard
function utf8.codepoint(s, i, j, lax) end

---
---Returns the number of UTF-8 characters in string `s` that start between positions `i` and `j` (both inclusive).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.len"])
---
---@param s    string
---@param i?   integer
---@param j?   integer
---@param lax? boolean
---@return integer?
---@return integer? errpos
---@nodiscard
function utf8.len(s, i, j, lax) end

---
---Returns the position (in bytes) where the encoding of the `n`-th character of `s` (counting from position `i`) starts.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.offset"])
---
---@param s string
---@param n integer
---@param i? integer
---@return integer p
---@nodiscard
function utf8.offset(s, n, i) end

return utf8
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/utf8.lua	
OnSetText called with text:	---@meta _

---
---Command-line arguments of Lua Standalone.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-arg"])
---
---@type string[]
arg = {}

---
---Raises an error if the value of its argument v is false (i.e., `nil` or `false`); otherwise, returns all its arguments. In case of error, `message` is the error object; when absent, it defaults to `"assertion failed!"`
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-assert"])
---
---@generic T
---@param v? T
---@param message? any
---@param ... any
---@return T
---@return any ...
function assert(v, message, ...) end

---@alias gcoptions
---|>"collect"      # Performs a full garbage-collection cycle.
---| "stop"         # Stops automatic execution.
---| "restart"      # Restarts automatic execution.
---| "count"        # Returns the total memory in Kbytes.
---| "step"         # Performs a garbage-collection step.
---| "isrunning"    # Returns whether the collector is running.
---| "incremental"  # Change the collector mode to incremental.
---| "generational" # Change the collector mode to generational.

---
---This function is a generic interface to the garbage collector. It performs different functions according to its first argument, `opt`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-collectgarbage"])
---
---@param opt? gcoptions
---@param ... any
---@return any
function collectgarbage(opt, ...) end

---
---Opens the named file and executes its content as a Lua chunk. When called without arguments, `dofile` executes the content of the standard input (`stdin`). Returns all values returned by the chunk. In case of errors, `dofile` propagates the error to its caller. (That is, `dofile` does not run in protected mode.)
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-dofile"])
---
---@param filename? string
---@return any ...
function dofile(filename) end

---
---Terminates the last protected function called and returns message as the error object.
---
---Usually, `error` adds some information about the error position at the beginning of the message, if the message is a string.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-error"])
---
---@param message any
---@param level?  integer
function error(message, level) end

---
---A global variable (not a function) that holds the global environment (see [§2.2](command:extension.lua.doc?["en-us/54/manual.html/2.2"])). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-_G"])
---
---@class _G
_G = {}

---@version 5.1
---
---Returns the current environment in use by the function. `f` can be a Lua function or a number that specifies the function at that stack level.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-getfenv"])
---
---@param f? integer|async fun(...):...
---@return table
---@nodiscard
function getfenv(f) end

---
---If object does not have a metatable, returns nil. Otherwise, if the object's metatable has a __metatable field, returns the associated value. Otherwise, returns the metatable of the given object.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-getmetatable"])
---
---@param object any
---@return table metatable
---@nodiscard
function getmetatable(object) end

---
---Returns three values (an iterator function, the table `t`, and `0`) so that the construction
---```lua
---    for i,v in ipairs(t) do body end
---```
---will iterate over the key–value pairs `(1,t[1]), (2,t[2]), ...`, up to the first absent index.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-ipairs"])
---
---@generic T: table, V
---@param t T
---@return fun(table: V[], i?: integer):integer, V
---@return T
---@return integer i
function ipairs(t) end

---@alias loadmode
---| "b"  # Only binary chunks.
---| "t"  # Only text chunks.
---|>"bt" # Both binary and text.

---
---Loads a chunk.
---
---If `chunk` is a string, the chunk is this string. If `chunk` is a function, `load` calls it repeatedly to get the chunk pieces. Each call to `chunk` must return a string that concatenates with previous results. A return of an empty string, `nil`, or no value signals the end of the chunk.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-load"])
---
---@param chunk      string|function
---@param chunkname? string
---@param mode?      loadmode
---@param env?       table
---@return function?
---@return string?   error_message
---@nodiscard
function load(chunk, chunkname, mode, env) end

---
---Loads a chunk from file `filename` or from the standard input, if no file name is given.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-loadfile"])
---
---@param filename? string
---@param mode?     loadmode
---@param env?      table
---@return function?
---@return string?  error_message
---@nodiscard
function loadfile(filename, mode, env) end

---@version 5.1
---
---Loads a chunk from the given string.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-loadstring"])
---
---@param text       string
---@param chunkname? string
---@return function?
---@return string?   error_message
---@nodiscard
function loadstring(text, chunkname) end

---@version 5.1
---@param proxy boolean|table|userdata
---@return userdata
---@nodiscard
function newproxy(proxy) end

---@version 5.1
---
---Creates a module.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-module"])
---
---@param name string
---@param ...  any
function module(name, ...) end

---
---Allows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. A call to `next` returns the next index of the table and its associated value. When called with `nil` as its second argument, `next` returns an initial index and its associated value. When called with the last index, or with `nil` in an empty table, `next` returns `nil`. If the second argument is absent, then it is interpreted as `nil`. In particular, you can use `next(t)` to check whether a table is empty.
---
---The order in which the indices are enumerated is not specified, *even for numeric indices*. (To traverse a table in numerical order, use a numerical `for`.)
---
---The behavior of `next` is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may set existing fields to nil.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-next"])
---
---@generic K, V
---@param table table<K, V>
---@param index? K
---@return K?
---@return V?
---@nodiscard
function next(table, index) end

---
---If `t` has a metamethod `__pairs`, calls it with t as argument and returns the first three results from the call.
---
---Otherwise, returns three values: the [next](command:extension.lua.doc?["en-us/54/manual.html/pdf-next"]) function, the table `t`, and `nil`, so that the construction
---```lua
---    for k,v in pairs(t) do body end
---```
---will iterate over all key–value pairs of table `t`.
---
---See function [next](command:extension.lua.doc?["en-us/54/manual.html/pdf-next"]) for the caveats of modifying the table during its traversal.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-pairs"])
---
---@generic T: table, K, V
---@param t T
---@return fun(table: table<K, V>, index?: K):K, V
---@return T
function pairs(t) end

---
---Calls the function `f` with the given arguments in *protected mode*. This means that any error inside `f` is not propagated; instead, `pcall` catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, `pcall` also returns all results from the call, after this first result. In case of any error, `pcall` returns `false` plus the error object.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-pcall"])
---
---@param f     async fun(...):...
---@param arg1? any
---@param ...   any
---@return boolean success
---@return any result
---@return any ...
function pcall(f, arg1, ...) end

---
---Receives any number of arguments and prints their values to `stdout`, converting each argument to a string following the same rules of [tostring](command:extension.lua.doc?["en-us/54/manual.html/pdf-tostring"]).
---The function print is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use [string.format](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.format"]) and [io.write](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.write"]).
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-print"])
---
---@param ... any
function print(...) end

---
---Checks whether v1 is equal to v2, without invoking the `__eq` metamethod.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-rawequal"])
---
---@param v1 any
---@param v2 any
---@return boolean
---@nodiscard
function rawequal(v1, v2) end

---
---Gets the real value of `table[index]`, without invoking the `__index` metamethod.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-rawget"])
---
---@param table table
---@param index any
---@return any
---@nodiscard
function rawget(table, index) end

---
---Returns the length of the object `v`, without invoking the `__len` metamethod.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-rawlen"])
---
---@param v table|string
---@return integer len
---@nodiscard
function rawlen(v) end

---
---Sets the real value of `table[index]` to `value`, without using the `__newindex` metavalue. `table` must be a table, `index` any value different from `nil` and `NaN`, and `value` any Lua value.
---This function returns `table`.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-rawset"])
---
---@param table table
---@param index any
---@param value any
---@return table
function rawset(table, index, value) end

---
---If `index` is a number, returns all arguments after argument number `index`; a negative number indexes from the end (`-1` is the last argument). Otherwise, `index` must be the string `"#"`, and `select` returns the total number of extra arguments it received.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-select"])
---
---@param index integer|"#"
---@param ...   any
---@return any
---@nodiscard
function select(index, ...) end

---@version 5.1
---
---Sets the environment to be used by the given function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-setfenv"])
---
---@param f     (async fun(...):...)|integer
---@param table table
---@return function
function setfenv(f, table) end


---@class metatable
---@field __mode 'v'|'k'|'kv'|nil
---@field __metatable any|nil
---@field __tostring (fun(t):string)|nil
---@field __gc fun(t)|nil
---@field __add (fun(t1,t2):any)|nil
---@field __sub (fun(t1,t2):any)|nil
---@field __mul (fun(t1,t2):any)|nil
---@field __div (fun(t1,t2):any)|nil
---@field __mod (fun(t1,t2):any)|nil
---@field __pow (fun(t1,t2):any)|nil
---@field __unm (fun(t):any)|nil
---@field __idiv (fun(t1,t2):any)|nil
---@field __band (fun(t1,t2):any)|nil
---@field __bor (fun(t1,t2):any)|nil
---@field __bxor (fun(t1,t2):any)|nil
---@field __bnot (fun(t):any)|nil
---@field __shl (fun(t1,t2):any)|nil
---@field __shr (fun(t1,t2):any)|nil
---@field __concat (fun(t1,t2):any)|nil
---@field __len (fun(t):integer)|nil
---@field __eq (fun(t1,t2):boolean)|nil
---@field __lt (fun(t1,t2):boolean)|nil
---@field __le (fun(t1,t2):boolean)|nil
---@field __index table|(fun(t,k):any)|nil
---@field __newindex table|fun(t,k,v)|nil
---@field __call (fun(t,...):...)|nil
---@field __pairs (fun(t):((fun(t,k,v):any,any),any,any))|nil
---@field __close (fun(t,errobj):any)|nil

---
---Sets the metatable for the given table. If `metatable` is `nil`, removes the metatable of the given table. If the original metatable has a `__metatable` field, raises an error.
---
---This function returns `table`.
---
---To change the metatable of other types from Lua code, you must use the debug library ([§6.10](command:extension.lua.doc?["en-us/54/manual.html/6.10"])).
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-setmetatable"])
---
---@param table      table
---@param metatable? metatable|table
---@return table
function setmetatable(table, metatable) end

---
---When called with no `base`, `tonumber` tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then `tonumber` returns this number; otherwise, it returns `fail`.
---
---The conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see [§3.1](command:extension.lua.doc?["en-us/54/manual.html/3.1"])). The string may have leading and trailing spaces and a sign.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-tonumber"])
---
---@overload fun(e: string, base: integer):integer
---@param e any
---@return number?
---@nodiscard
function tonumber(e) end

---
---Receives a value of any type and converts it to a string in a human-readable format.
---
---If the metatable of `v` has a `__tostring` field, then `tostring` calls the corresponding value with `v` as argument, and uses the result of the call as its result. Otherwise, if the metatable of `v` has a `__name` field with a string value, `tostring` may use that string in its final result.
---
---For complete control of how numbers are converted, use [string.format](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.format"]).
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-tostring"])
---
---@param v any
---@return string
---@nodiscard
function tostring(v) end

---@alias type
---| "nil"
---| "number"
---| "string"
---| "boolean"
---| "table"
---| "function"
---| "thread"
---| "userdata"

---
---Returns the type of its only argument, coded as a string. The possible results of this function are `"nil"` (a string, not the value `nil`), `"number"`, `"string"`, `"boolean"`, `"table"`, `"function"`, `"thread"`, and `"userdata"`.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-type"])
---
---@param v any
---@return type type
---@nodiscard
function type(v) end

---
---A global variable (not a function) that holds a string containing the running Lua version.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-_VERSION"])
---
_VERSION = "Lua 5.4"

---@version >5.4
---
---Emits a warning with a message composed by the concatenation of all its arguments (which should be strings).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-warn"])
---
---@param message string
---@param ...     any
function warn(message, ...) end

---
---Calls function `f` with the given arguments in protected mode with a new message handler.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-xpcall"])
---
---@param f     async fun(...):...
---@param msgh  function
---@param arg1? any
---@param ...   any
---@return boolean success
---@return any result
---@return any ...
function xpcall(f, msgh, arg1, ...) end

---@version 5.1
---
---Returns the elements from the given `list`. This function is equivalent to
---```lua
---    return list[i], list[i+1], ···, list[j]
---```
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-unpack"])
---
---@generic T1, T2, T3, T4, T5, T6, T7, T8, T9, T10
---@param list {
--- [1]?: T1,
--- [2]?: T2,
--- [3]?: T3,
--- [4]?: T4,
--- [5]?: T5,
--- [6]?: T6,
--- [7]?: T7,
--- [8]?: T8,
--- [9]?: T9,
--- [10]?: T10,
---}
---@param i?   integer
---@param j?   integer
---@return T1, T2, T3, T4, T5, T6, T7, T8, T9, T10
---@nodiscard
function unpack(list, i, j) end

---@version 5.1
---@generic T1, T2, T3, T4, T5, T6, T7, T8, T9
---@param list {[1]: T1, [2]: T2, [3]: T3, [4]: T4, [5]: T5, [6]: T6, [7]: T7, [8]: T8, [9]: T9 }
---@return T1, T2, T3, T4, T5, T6, T7, T8, T9
---@nodiscard
function unpack(list) end
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua	
OnSetText called with text:	fx_version 'cerulean'
author 'SUP2Ak'
game 'common'
use_experimental_fxv2_oal 'yes'
repository 'https://github.com/SUP2Ak/hot-reload-fivem'
description 'Hot Reload for FiveM'
license 'MIT'
version '1.0.0'

server_only 'yes'
server_script 'dist/server.js'
dependency 'yarn'
	
Returning diffs count:	1	
OnSetText called with text:	---@todo [NEW] work in progress 0.0.2 to 0.1.0

-- loadscreen 'modules/loadscreen/client/index.html' -- loadscreen
-- loadscreen_manual_shutdown "yes" -- enable manual shutdown
-- loadscreen_cursor 'yes' -- enable cursor

fx_version 'cerulean'
game 'gta5'
lua54 'yes'
use_experimental_fxv2_oal 'yes'

name 'sublime_core (fivem)'
author 'SUBLiME'
version '0.1.0 (wip)'
repository 'https://github.com/sublime-framework-cfx/sublime_core-fivem'
description 'A new modular framework for FiveM'

shared_script '@sublime_core/import.lua'
server_script 'server.lua'	
Returning diffs count:	1	
OnSetText called with text:		
Returning diffs count:	0	
OnSetText called with text:	local t = { .j, .m, .z }
local t2 = { .j, .m, .z }	
Found table content:	 .j, .m, .z 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Processing item:	.z	
Found field with dot. Name:	z	
Added entry:	z = true	
Creating diff. Start:	10	End:	24	
New text:	{ j = true, m = true, z = true }	
Found table content:	 .j, .m, .z 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Processing item:	.z	
Found field with dot. Name:	z	
Added entry:	z = true	
Creating diff. Start:	37	End:	51	
New text:	{ j = true, m = true, z = true }	
Returning diffs count:	2	
OnSetText called with text:	fx_version 'cerulean'
game 'common'
use_experimental_fxv2_oal 'yes'
lua54 'yes'

name 'oxmysql'
author 'Overextended'
version '2.11.2'
license 'LGPL-3.0-or-later'
repository 'https://github.com/overextended/oxmysql.git'
description 'FXServer to MySQL communication via node-mysql2'

dependencies {
    '/server:7290',
}

client_script 'ui.lua'
server_script 'dist/build.js'

files {
	'web/build/index.html',
	'web/build/**/*'
}

ui_page 'web/build/index.html'

provide 'mysql-async'
provide 'ghmattimysql'

convar_category 'OxMySQL' {
	'Configuration',
	{
		{ 'Connection string', 'mysql_connection_string', 'CV_STRING', 'mysql://user:password@localhost/database' },
		{ 'Debug', 'mysql_debug', 'CV_BOOL', 'false' }
	}
}
	
Found table content:	
    '/server:7290',
	
Processing item:	'/server:7290'	
Kept original item:	'/server:7290'	
Processing item:		
Found table content:	
	'web/build/index.html',
	'web/build/**/*'
	
Processing item:	'web/build/index.html'	
Kept original item:	'web/build/index.html'	
Processing item:	'web/build/**/*'	
Kept original item:	'web/build/**/*'	
Found table content:	
	'Configuration',
	{
		{ 'Connection string', 'mysql_connection_string', 'CV_STRING', 'mysql://user:password@localhost/database' 	
Processing item:	'Configuration'	
Kept original item:	'Configuration'	
Processing item:	{
		{ 'Connection string'	
Kept original item:	{
		{ 'Connection string'	
Processing item:	'mysql_connection_string'	
Kept original item:	'mysql_connection_string'	
Processing item:	'CV_STRING'	
Kept original item:	'CV_STRING'	
Processing item:	'mysql://user:password@localhost/database'	
Kept original item:	'mysql://user:password@localhost/database'	
Found table content:	 'Debug', 'mysql_debug', 'CV_BOOL', 'false' 	
Processing item:	'Debug'	
Kept original item:	'Debug'	
Processing item:	'mysql_debug'	
Kept original item:	'mysql_debug'	
Processing item:	'CV_BOOL'	
Kept original item:	'CV_BOOL'	
Processing item:	'false'	
Kept original item:	'false'	
Returning diffs count:	1	
OnSetText called with text:	local promise = promise
local Await = Citizen.Await
local GetCurrentResourceName = GetCurrentResourceName()
local GetResourceState = GetResourceState

local function await(fn, query, parameters)
	local p = promise.new()
	fn(nil, query, parameters, function(result, error)
		if error then
			return p:reject(error)
		end

		p:resolve(result)
	end, GetCurrentResourceName, true)
	return Await(p)
end

local type = type
local queryStore = {}

local function safeArgs(query, parameters, cb, transaction)
	local queryType = type(query)

	if queryType == 'number' then
		query = queryStore[query]
	elseif transaction then
		if queryType ~= 'table' then
			error(("First argument expected table, received '%s'"):format(query))
		end
	elseif queryType ~= 'string' then
		error(("First argument expected string, received '%s'"):format(query))
	end

	if parameters then
		local paramType = type(parameters)

		if paramType ~= 'table' and paramType ~= 'function' then
			error(("Second argument expected table or function, received '%s'"):format(parameters))
		end

		if paramType == 'function' or parameters.__cfx_functionReference then
			cb = parameters
			parameters = nil
		end
	end

	if cb and parameters then
		local cbType = type(cb)

		if cbType ~= 'function' and (cbType == 'table' and not cb.__cfx_functionReference) then
			error(("Third argument expected function, received '%s'"):format(cb))
		end
	end

	return query, parameters, cb
end

local oxmysql = exports.oxmysql

local mysql_method_mt = {
	__call = function(self, query, parameters, cb)
		query, parameters, cb = safeArgs(query, parameters, cb, self.method == 'transaction')
		return oxmysql[self.method](nil, query, parameters, cb, GetCurrentResourceName, false)
	end
}

local MySQL = setmetatable(MySQL or {}, {
	__index = function(_, index)
		return function(...)
			return oxmysql[index](nil, ...)
		end
	end
})

for _, method in pairs({
	'scalar', 'single', 'query', 'insert', 'update', 'prepare', 'transaction', 'rawExecute',
}) do
	MySQL[method] = setmetatable({
		method = method,
		await = function(query, parameters)
			query, parameters = safeArgs(query, parameters, nil, method == 'transaction')
			return await(oxmysql[method], query, parameters)
		end
	}, mysql_method_mt)
end

local alias = {
	fetchAll = 'query',
	fetchScalar = 'scalar',
	fetchSingle = 'single',
	insert = 'insert',
	execute = 'update',
	transaction = 'transaction',
	prepare = 'prepare'
}

local alias_mt = {
	__index = function(self, key)
		if alias[key] then
			local method = MySQL[alias[key]]
			MySQL.Async[key] = method
			MySQL.Sync[key] = method.await
			alias[key] = nil
			return self[key]
		end
	end
}

local function addStore(query, cb)
	assert(type(query) == 'string', 'The SQL Query must be a string')

	local storeN = #queryStore + 1
	queryStore[storeN] = query

	return cb and cb(storeN) or storeN
end

MySQL.Sync = setmetatable({ store = addStore }, alias_mt)
MySQL.Async = setmetatable({ store = addStore }, alias_mt)

local function onReady(cb)
	while GetResourceState('oxmysql') ~= 'started' do
		Wait(50)
	end

	oxmysql.awaitConnection()

	return cb and cb() or true
end

MySQL.ready = setmetatable({
	await = onReady
}, {
	__call = function(_, cb)
		Citizen.CreateThreadNow(function() onReady(cb) end)
	end,
})

_ENV.MySQL = MySQL
	
Found table content:		
Found table content:	
	__call = function(self, query, parameters, cb)
		query, parameters, cb = safeArgs(query, parameters, cb, self.method == 'transaction')
		return oxmysql[self.method](nil, query, parameters, cb, GetCurrentResourceName, false)
	end
	
Processing item:	__call = function(self	
Kept original item:	__call = function(self	
Processing item:	query	
Kept original item:	query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	cb)
		query	
Kept original item:	cb)
		query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	cb = safeArgs(query	
Kept original item:	cb = safeArgs(query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	cb	
Kept original item:	cb	
Processing item:	self.method == 'transaction')
		return oxmysql[self.method](nil	
Kept original item:	self.method == 'transaction')
		return oxmysql[self.method](nil	
Processing item:	query	
Kept original item:	query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	cb	
Kept original item:	cb	
Processing item:	GetCurrentResourceName	
Kept original item:	GetCurrentResourceName	
Processing item:	false)
	end	
Kept original item:	false)
	end	
Found table content:		
Found table content:	
	__index = function(_, index)
		return function(...)
			return oxmysql[index](nil, ...)
		end
	end
	
Processing item:	__index = function(_	
Kept original item:	__index = function(_	
Processing item:	index)
		return function(...)
			return oxmysql[index](nil	
Kept original item:	index)
		return function(...)
			return oxmysql[index](nil	
Processing item:	...)
		end
	end	
Found field with dot. Name:	
Found table content:	
	'scalar', 'single', 'query', 'insert', 'update', 'prepare', 'transaction', 'rawExecute',
	
Processing item:	'scalar'	
Kept original item:	'scalar'	
Processing item:	'single'	
Kept original item:	'single'	
Processing item:	'query'	
Kept original item:	'query'	
Processing item:	'insert'	
Kept original item:	'insert'	
Processing item:	'update'	
Kept original item:	'update'	
Processing item:	'prepare'	
Kept original item:	'prepare'	
Processing item:	'transaction'	
Kept original item:	'transaction'	
Processing item:	'rawExecute'	
Kept original item:	'rawExecute'	
Processing item:		
Found table content:	
		method = method,
		await = function(query, parameters)
			query, parameters = safeArgs(query, parameters, nil, method == 'transaction')
			return await(oxmysql[method], query, parameters)
		end
		
Processing item:	method = method	
Kept original item:	method = method	
Processing item:	await = function(query	
Kept original item:	await = function(query	
Processing item:	parameters)
			query	
Kept original item:	parameters)
			query	
Processing item:	parameters = safeArgs(query	
Kept original item:	parameters = safeArgs(query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	nil	
Kept original item:	nil	
Processing item:	method == 'transaction')
			return await(oxmysql[method]	
Kept original item:	method == 'transaction')
			return await(oxmysql[method]	
Processing item:	query	
Kept original item:	query	
Processing item:	parameters)
		end	
Kept original item:	parameters)
		end	
Found table content:	
	fetchAll = 'query',
	fetchScalar = 'scalar',
	fetchSingle = 'single',
	insert = 'insert',
	execute = 'update',
	transaction = 'transaction',
	prepare = 'prepare'
	
Processing item:	fetchAll = 'query'	
Kept original item:	fetchAll = 'query'	
Processing item:	fetchScalar = 'scalar'	
Kept original item:	fetchScalar = 'scalar'	
Processing item:	fetchSingle = 'single'	
Kept original item:	fetchSingle = 'single'	
Processing item:	insert = 'insert'	
Kept original item:	insert = 'insert'	
Processing item:	execute = 'update'	
Kept original item:	execute = 'update'	
Processing item:	transaction = 'transaction'	
Kept original item:	transaction = 'transaction'	
Processing item:	prepare = 'prepare'	
Kept original item:	prepare = 'prepare'	
Found table content:	
	__index = function(self, key)
		if alias[key] then
			local method = MySQL[alias[key]]
			MySQL.Async[key] = method
			MySQL.Sync[key] = method.await
			alias[key] = nil
			return self[key]
		end
	end
	
Processing item:	__index = function(self	
Kept original item:	__index = function(self	
Processing item:	key)
		if alias[key] then
			local method = MySQL[alias[key]]
			MySQL.Async[key] = method
			MySQL.Sync[key] = method.await
			alias[key] = nil
			return self[key]
		end
	end	
Kept original item:	key)
		if alias[key] then
			local method = MySQL[alias[key]]
			MySQL.Async[key] = method
			MySQL.Sync[key] = method.await
			alias[key] = nil
			return self[key]
		end
	end	
Found table content:	 store = addStore 	
Processing item:	store = addStore	
Kept original item:	store = addStore	
Found table content:	 store = addStore 	
Processing item:	store = addStore	
Kept original item:	store = addStore	
Found table content:	
	await = onReady
	
Processing item:	await = onReady	
Kept original item:	await = onReady	
Found table content:	
	__call = function(_, cb)
		Citizen.CreateThreadNow(function() onReady(cb) end)
	end,
	
Processing item:	__call = function(_	
Kept original item:	__call = function(_	
Processing item:	cb)
		Citizen.CreateThreadNow(function() onReady(cb) end)
	end	
Kept original item:	cb)
		Citizen.CreateThreadNow(function() onReady(cb) end)
	end	
Processing item:		
Returning diffs count:	0	
OnSetText called with text:	RegisterNetEvent('oxmysql:openUi', function(data)
    SendNUIMessage({
        action = 'openUI',
        data = data
    })
    SetNuiFocus(true, true)
end)

RegisterNUICallback('exit', function(_, cb)
    cb(true)
    SetNuiFocus(false, false)
end)

RegisterNUICallback('fetchResource', function(data, cb)
    TriggerServerEvent('oxmysql:fetchResource', data)
    cb(true)
end)

RegisterNetEvent('oxmysql:loadResource', function(data)
    SendNUIMessage({
        action = 'loadResource',
        data = data
    })
end)	
Found table content:	
        action = 'openUI',
        data = data
    	
Processing item:	action = 'openUI'	
Kept original item:	action = 'openUI'	
Processing item:	data = data	
Kept original item:	data = data	
Found table content:	
        action = 'loadResource',
        data = data
    	
Processing item:	action = 'loadResource'	
Kept original item:	action = 'loadResource'	
Processing item:	data = data	
Kept original item:	data = data	
Returning diffs count:	0	
OnSetText called with text:	return {
    -- 'handlers', -- init handlers server & client
    'main', -- init main server & client
}	
Found table content:	
    -- 'handlers', -- init handlers server & client
    'main', -- init main server & client
	
Processing item:	-- 'handlers'	
Kept original item:	-- 'handlers'	
Processing item:	-- init handlers server & client
    'main'	
Kept original item:	-- init handlers server & client
    'main'	
Processing item:	-- init main server & client	
Kept original item:	-- init main server & client	
Returning diffs count:	0	
OnSetText called with text:	---@todo [NEW] work in progress 0.0.2 to 0.1.0

-- loadscreen 'modules/loadscreen/client/index.html' -- loadscreen
-- loadscreen_manual_shutdown "yes" -- enable manual shutdown
-- loadscreen_cursor 'yes' -- enable cursor

fx_version 'cerulean'
game 'gta5'
lua54 'yes'
use_experimental_fxv2_oal 'yes'

name 'sublime_core (fivem)'
author 'SUBLiME'
version '0.1.0 (wip)'
repository 'https://github.com/sublime-framework-cfx/sublime_core-fivem'
description 'A new modular framework for FiveM'

files {
    'config/modules.lua',
    'imports/**/shared.lua',
    'imports/**/client.lua',
    'import.lua',
    -- 'modules/**/shared/**',
    'modules/**/client/**',
}

shared_scripts {
    'init.lua',
    'modules/init.lua',
}	
Found table content:	
    'config/modules.lua',
    'imports/**/shared.lua',
    'imports/**/client.lua',
    'import.lua',
    -- 'modules/**/shared/**',
    'modules/**/client/**',
	
Processing item:	'config/modules.lua'	
Kept original item:	'config/modules.lua'	
Processing item:	'imports/**/shared.lua'	
Kept original item:	'imports/**/shared.lua'	
Processing item:	'imports/**/client.lua'	
Kept original item:	'imports/**/client.lua'	
Processing item:	'import.lua'	
Kept original item:	'import.lua'	
Processing item:	-- 'modules/**/shared/**'	
Kept original item:	-- 'modules/**/shared/**'	
Processing item:	'modules/**/client/**'	
Kept original item:	'modules/**/client/**'	
Processing item:		
Found table content:	
    'init.lua',
    'modules/init.lua',
	
Processing item:	'init.lua'	
Kept original item:	'init.lua'	
Processing item:	'modules/init.lua'	
Kept original item:	'modules/init.lua'	
Processing item:		
Returning diffs count:	1	
OnSetText called with text:	local mt_pvt = {
    __metatable = 'private',
    __ext = 0,
    __pack = function() return '' end,
}

---@param obj table
---@return table
local function NewInstance(self, obj)
    if obj.private then
        setmetatable(obj.private, mt_pvt)
    end

    setmetatable(obj, self)

    if self.init then obj:init() end

    if obj.export then
        self.__export[obj.export] = obj
    end

    return obj
end

---@param name string
---@param super? table
---@param exportMethod? boolean
---@return table
function sublime.class(name, super, exportMethod)
    if not name then return end
    if super or exportMethod then
        local self = {
            __name = name,
            new = NewInstance
        }

        self.__index = self

        if exportMethod and not super then
            self.__exportMethod = {}
            self.__export = {}

            setmetatable(self, {
                __newindex = function(_, key, value)
                    rawset(_, key, value)
                    self.__exportMethod[key] = true
                end
            })

            exports('GetExportMethod', function()
                return self.__exportMethod
            end)

            exports('CallExportMethod', function(name, method, ...)
                local export <const> = self.__export[name]
                return export[method](export, ...)
            end)
        end

        return super and setmetatable(self, {
            __index = super,
            __newindex = function(_, key, value)
                rawset(_, key, value)
                if type(value) == 'function' then
                    self.__exportMethod[key] = true
                end
            end
        }) or self
    else
        local self = {
            __index = name
        }

        function self.new(obj)
            if obj.private then
                setmetatable(obj.private, mt_pvt)
            end

            if self.init then obj:init() end

            return setmetatable(obj, self)
        end

        return self
    end
end

return sublime.class	
Found table content:	
    __metatable = 'private',
    __ext = 0,
    __pack = function() return '' end,
	
Processing item:	__metatable = 'private'	
Kept original item:	__metatable = 'private'	
Processing item:	__ext = 0	
Kept original item:	__ext = 0	
Processing item:	__pack = function() return '' end	
Kept original item:	__pack = function() return '' end	
Processing item:		
Found table content:	
            __name = name,
            new = NewInstance
        	
Processing item:	__name = name	
Kept original item:	__name = name	
Processing item:	new = NewInstance	
Kept original item:	new = NewInstance	
Found table content:		
Found table content:		
Found table content:	
                __newindex = function(_, key, value)
                    rawset(_, key, value)
                    self.__exportMethod[key] = true
                end
            	
Processing item:	__newindex = function(_	
Kept original item:	__newindex = function(_	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
                    rawset(_	
Kept original item:	value)
                    rawset(_	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
                    self.__exportMethod[key] = true
                end	
Kept original item:	value)
                    self.__exportMethod[key] = true
                end	
Found table content:	
            __index = super,
            __newindex = function(_, key, value)
                rawset(_, key, value)
                if type(value) == 'function' then
                    self.__exportMethod[key] = true
                end
            end
        	
Processing item:	__index = super	
Kept original item:	__index = super	
Processing item:	__newindex = function(_	
Kept original item:	__newindex = function(_	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
                rawset(_	
Kept original item:	value)
                rawset(_	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
                if type(value) == 'function' then
                    self.__exportMethod[key] = true
                end
            end	
Kept original item:	value)
                if type(value) == 'function' then
                    self.__exportMethod[key] = true
                end
            end	
Found table content:	
            __index = name
        	
Processing item:	__index = name	
Kept original item:	__index = name	
Returning diffs count:	0	
OnSetText called with text:	local sublime_core <const> = 'sublime_core'
local IsDuplicityVersion <const>, await <const> = IsDuplicityVersion, Citizen.Await
local LoadResourceFile <const> = LoadResourceFile
local GetResourceState <const> = GetResourceState
local GetGameName <const> = GetGameName
local GetCurrentResourceName <const>, AddEventHandler <const> = GetCurrentResourceName, AddEventHandler
local export = exports[sublime_core]
local service <const> = (IsDuplicityVersion() and 'server') or 'client'

-- local function FormatEvent(self, name, from)
--     return ("__sl__:%s:%s"):format(from or service, joaat(name))
-- end

if not _VERSION:find('5.4') then
    error("^1 Vous devez activer Lua 5.4 dans la resources où vous utilisez l'import, (lua54 'yes') dans votre fxmanifest!^0", 2)
end

if not GetResourceState(sublime_core):find('start') then
	error('^1sublime_core doit être lancé avant cette ressource!^0', 2)
end

local function LoadModule(self, index)
    local func, err
    local dir <const> = ('imports/%s'):format(index)
    local chunk <const> = LoadResourceFile(sublime_core, ('%s/%s.lua'):format(dir, service))
    local shared <const> = LoadResourceFile(sublime_core, ('%s/shared.lua'):format(dir))

    if chunk or shared then
        if shared then
            func, err = load(shared, ('@@%s/%s/%s'):format(sublime_core, index, 'shared'))
        else
            func, err = load(chunk, ('@@%s/%s/%s'):format(sublime_core, index, service))
        end

        if err then error(("Erreur pendant le chargement du module\n- Provenant de : %s\n- Modules : %s\n- Service : %s\n - Erreur : %s"):format(dir, index, service, err), 3) end

        local result = func()
        rawset(self, index, result)
        return self[index]
    end
end

local function CallModule(self, index, ...)
    local module = rawget(self, index)
    if not module then
        module = LoadModule(self, index)
        if not module then
            local function method(...)
                return export[index](nil, ...)
            end

            if not ... then
                self[index] = method
            end

            return method
        end
    end
    return module
end

sublime = setmetatable({
    name = sublime_core,
    service = service,
    game = GetGameName(),
    env = GetCurrentResourceName(),
    -- lang = GetConvar('sublime:locale', 'fr'),
    cache = service == 'client' and {},
    await = await,
},
{
    __index = CallModule,
    __call = CallModule
})

if sublime.service == 'client' then
    local player = {}
    setmetatable(player, {
        __index = function(self, key)
            AddEventHandler('sublime:player:set:'..key, function(value)
                self[key] = value
                return self[key]
            end)

            rawset(self, key, export:GetPlayer(key) or false)
            return self[key]
        end
    })

    _ENV.player = player
elseif sublime.service == 'server' then
    local MySQL = {}

    setmetatable(MySQL, {
        __index = function(self, key)
            local value = rawget(self, key)
            if not value then
                sublime.mysql()
                value = MySQL[key]
            end
            return value
        end
    })

    _ENV.MySQL = MySQL
end

require = sublime.require()	
Found table content:	
    name = sublime_core,
    service = service,
    game = GetGameName(),
    env = GetCurrentResourceName(),
    -- lang = GetConvar('sublime:locale', 'fr'),
    cache = service == 'client' and {	
Processing item:	name = sublime_core	
Kept original item:	name = sublime_core	
Processing item:	service = service	
Kept original item:	service = service	
Processing item:	game = GetGameName()	
Kept original item:	game = GetGameName()	
Processing item:	env = GetCurrentResourceName()	
Kept original item:	env = GetCurrentResourceName()	
Processing item:	-- lang = GetConvar('sublime:locale'	
Kept original item:	-- lang = GetConvar('sublime:locale'	
Processing item:	'fr')	
Kept original item:	'fr')	
Processing item:	cache = service == 'client' and {	
Kept original item:	cache = service == 'client' and {	
Found table content:	
    __index = CallModule,
    __call = CallModule
	
Processing item:	__index = CallModule	
Kept original item:	__index = CallModule	
Processing item:	__call = CallModule	
Kept original item:	__call = CallModule	
Found table content:		
Found table content:	
        __index = function(self, key)
            AddEventHandler('sublime:player:set:'..key, function(value)
                self[key] = value
                return self[key]
            end)

            rawset(self, key, export:GetPlayer(key) or false)
            return self[key]
        end
    	
Processing item:	__index = function(self	
Kept original item:	__index = function(self	
Processing item:	key)
            AddEventHandler('sublime:player:set:'..key	
Kept original item:	key)
            AddEventHandler('sublime:player:set:'..key	
Processing item:	function(value)
                self[key] = value
                return self[key]
            end)

            rawset(self	
Kept original item:	function(value)
                self[key] = value
                return self[key]
            end)

            rawset(self	
Processing item:	key	
Kept original item:	key	
Processing item:	export:GetPlayer(key) or false)
            return self[key]
        end	
Kept original item:	export:GetPlayer(key) or false)
            return self[key]
        end	
Found table content:		
Found table content:	
        __index = function(self, key)
            local value = rawget(self, key)
            if not value then
                sublime.mysql()
                value = MySQL[key]
            end
            return value
        end
    	
Processing item:	__index = function(self	
Kept original item:	__index = function(self	
Processing item:	key)
            local value = rawget(self	
Kept original item:	key)
            local value = rawget(self	
Processing item:	key)
            if not value then
                sublime.mysql()
                value = MySQL[key]
            end
            return value
        end	
Kept original item:	key)
            if not value then
                sublime.mysql()
                value = MySQL[key]
            end
            return value
        end	
Returning diffs count:	0	
OnSetText called with text:	---@param export string 'resourceName.methodName'
---@param ... any
---@return void | any
local function Exports(_, export, ...)
    local resourceName <const> = export:match('(.+)%..+')
    local methodName <const> = export:match('.+%.(.+)')
    return exports[resourceName][methodName](nil, ...)
end

local ExportMethod, MyClassExport = {}, {}
sublime.exports = setmetatable({}, {
    __call = Exports
})


---@param resource string resource name you have use supv.class with exportable on true
---@param name string export identifier name
---@param prototype? table if you want add prototype
---@return table
function sublime.exports.class(resource, name, prototype)
    ExportMethod[name] = {}
    setmetatable(ExportMethod[name], {
        __index = function(_, index)
            ExportMethod[name] = exports[resource]:GetExportMethod(index)
            return ExportMethod[name][index]
        end
    })

    MyClassExport[name] = {}
    local Class = MyClassExport[name]
    function Class:__index(index)
        local method = MyClassExport[name][index]

        if method then
            return function(...)
                return method(self, ...)
            end
        end

        local export = ExportMethod[name][index]

        if export then
            return function(...)
                return exports[resource]:CallExportMethod(name, index, ...)
            end
        end
    end

    return setmetatable(prototype or {}, Class)
end

return sublime.exports	
Found table content:		
Found table content:		
Found table content:		
Found table content:	
    __call = Exports
	
Processing item:	__call = Exports	
Kept original item:	__call = Exports	
Found table content:		
Found table content:	
        __index = function(_, index)
            ExportMethod[name] = exports[resource]:GetExportMethod(index)
            return ExportMethod[name][index]
        end
    	
Processing item:	__index = function(_	
Kept original item:	__index = function(_	
Processing item:	index)
            ExportMethod[name] = exports[resource]:GetExportMethod(index)
            return ExportMethod[name][index]
        end	
Kept original item:	index)
            ExportMethod[name] = exports[resource]:GetExportMethod(index)
            return ExportMethod[name][index]
        end	
Found table content:		
Found table content:		
Returning diffs count:	0	
OnSetText called with text:	local PlayerExports, PlayerObject = {}, {}
setmetatable(PlayerExports, {
    __index = function(_, index)
        print(index, 'index meta')
        PlayerExports = sublime.GetPlayerExports()
        return PlayerExports[index]
    end
})

function sublime.GetPlayerObject(source)
    local player <const> = sublime.GetPlayerData(source)
    if not player then return end
    return setmetatable(player, PlayerObject)
end

function PlayerObject:__index(index)
    local method = PlayerObject[index]
    print(method, index)
    if method then
        return function(...)
            return method(self, ...)
        end
    end

    local export = PlayerExports[index]

    if export then
        return function(...)
            return sublime.CallPlayerMethod(self.source, index, ...)
        end
    end
end

function PlayerObject:test()
    return self.source .. ' from test ' .. self.getName()
end

return sublime.GetPlayerObject	
Found table content:		
Found table content:		
Found table content:	
    __index = function(_, index)
        print(index, 'index meta')
        PlayerExports = sublime.GetPlayerExports()
        return PlayerExports[index]
    end
	
Processing item:	__index = function(_	
Kept original item:	__index = function(_	
Processing item:	index)
        print(index	
Kept original item:	index)
        print(index	
Processing item:	'index meta')
        PlayerExports = sublime.GetPlayerExports()
        return PlayerExports[index]
    end	
Kept original item:	'index meta')
        PlayerExports = sublime.GetPlayerExports()
        return PlayerExports[index]
    end	
Returning diffs count:	0	
OnSetText called with text:	local LoadResourceFile <const>, load <const> = LoadResourceFile, load

function sublime.mysql()
    local file = 'lib/MySQL.lua'
	local import = LoadResourceFile('oxmysql', file)
	local func, err = load(import, ('@@%s/%s'):format('oxmysql', file))
	if not func or err then
		return error(err or ("unable to load module '%s'"):format(file), 3)
	end

	func()
end

return sublime.mysql	
Returning diffs count:	0	
OnSetText called with text:	local function On(_, name, cb)
    AddEventHandler(name, cb)
end

sublime.on = setmetatable({}, {
    __call = On
})

function sublime.on.player(key, cb)
    AddEventHandler('sublime:cache:set:'..key, cb)
end

function sublime.on.net(key, cb)
    RegisterNetEvent(key, cb)
end	
Found table content:		
Found table content:	
    __call = On
	
Processing item:	__call = On	
Kept original item:	__call = On	
Returning diffs count:	0	
OnSetText called with text:	-- credit: ox_lib <https://github.com/overextended/ox_lib/blob/master/imports/require/shared.lua>
if lib then 
    sublime.require = lib.require
    return sublime.require 
end

local loaded = {}

package = {
    loaded = setmetatable({}, {
        __index = loaded,
        __newindex = function()  end,
        __metatable = false,
    }),
    path = './?.lua;'
}

local _require = require

---Loads the given module inside the current resource, returning any values returned by the file or `true` when `nil`.
---@param modname string
---@return unknown?
function sublime.require(modname)
    if type(modname) ~= 'string' then return end

    local module = loaded[modname]

    if not module then
        if module == false then
            error(("^1circular-dependency occurred when loading module '%s'^0"):format(modname), 2)
        end

        if not modname:find('^@') then
            local success, result = pcall(_require, modname)

            if success then
                loaded[modname] = result
                return result
            end

            local modpath = modname:gsub('%.', '/')

            for path in package.path:gmatch('[^;]+') do
                local scriptPath = path:gsub('?', modpath):gsub('%.+%/+', '')
                local resourceFile = LoadResourceFile(sublime.env, scriptPath)

                if resourceFile then
                    loaded[modname] = false
                    scriptPath = ('@@%s/%s'):format(sublime.env, scriptPath)

                    local chunk, err = load(resourceFile, scriptPath)

                    if err or not chunk then
                        loaded[modname] = nil
                        return error(err or ("unable to load module '%s'"):format(modname), 3)
                    end

                    module = chunk(modname) or true
                    loaded[modname] = module

                    return module
                end
            end
        else
            local rss, dir = modname:gsub('%.', '/'):match('^(.-)/(.+)$')

            if not rss or not dir then return error('Invalid path format: '..modname, 2) end
            rss, dir = rss:gsub('^@', ''), dir..'.lua'
            local chunk = LoadResourceFile(rss, dir)

            if chunk then
                local scriptPath = ('@@%s/%s'):format(rss, dir)
                local func, err = load(chunk, scriptPath)

                if err or not func then
                    return error(err or ("unable to load module '%s'"):format(modname), 2)
                end

                module = func(modname) or true
                loaded[modname] = module

                return module
            end
        end

        return error(("module '%s' not found"):format(modname), 2)
    end

    return module
end

return sublime.require

--[[ old method, not working with zones module because need require (glm) to calculate vector
    
local moduleLoaded = {}

local function load_module(path)
    if moduleLoaded[path] then
        return moduleLoaded[path]
    end

    local module_path = ("%s.lua"):format(path)
    local module_file = LoadResourceFile(GetCurrentResourceName(), module_path)
    if not module_file then
        error("Impossible de chargé le module : "..path)
    end

    moduleLoaded[path] = load(module_file)()
    return moduleLoaded[path]
end

local function call_module(path)
    path = path:gsub('%.', '/')
    local module = load_module(path)
    if not module then
        return error("Le module n'a pas charger : "..path)
    end
    return module
end

return {
    load = call_module
}
--]]	
Found table content:		
Found table content:	
    loaded = setmetatable({	
Processing item:	loaded = setmetatable({	
Kept original item:	loaded = setmetatable({	
Found table content:	
        __index = loaded,
        __newindex = function()  end,
        __metatable = false,
    	
Processing item:	__index = loaded	
Kept original item:	__index = loaded	
Processing item:	__newindex = function()  end	
Kept original item:	__newindex = function()  end	
Processing item:	__metatable = false	
Kept original item:	__metatable = false	
Processing item:		
Found table content:		
Found table content:	
    load = call_module
	
Processing item:	load = call_module	
Kept original item:	load = call_module	
Returning diffs count:	1	
OnSetText called with text:	local LoadResourceFile <const>, IsDuplicityVersion <const>, await <const> = LoadResourceFile, IsDuplicityVersion, Citizen.Await
local sublime_core <const>, service <const> = 'sublime_core', (IsDuplicityVersion() and 'server') or 'client'

---@param name string
---@param from? string<'client' | 'server'> default is sl.service
---@return string
-- local function FormatEvent(self, name, from)
--     return ("__sl__:%s:%s"):format(from or self.service, joaat(name))
-- end

sublime = setmetatable({
    service = service, ---@type string<'client' | 'server'>
    name = sublime_core, ---@type string<'sublime_core'>
    env = sublime_core, ---@type string<'resource_name?'>
    -- hashEvent = FormatEvent,
    await = await,
    lang = GetConvar('sublime:locale', 'fr') ---@type string<'fr' | 'en' | unknown>
}, {
    __newindex = function(self, name, value)
        rawset(self, name, value)
        if type(value) == 'function' then
            exports(name, value)
        end
    end
})

local loaded = {}
package = {
    loaded = setmetatable({}, {
        __index = loaded,
        __newindex = function() end,
        __metatable = false,
    }),
    path = './?.lua;'
}

local _require = require
function require(modname)
    local module = loaded[modname]

    if not module then
        if module == false then
            error(("^1circular-dependency occurred when loading module '%s'^0"):format(modname), 2)
        end

        local success, result = pcall(_require, modname)

        if success then
            loaded[modname] = result
            return result
        end

        local modpath = modname:gsub('%.', '/')
        local paths = { string.strsplit(';', package.path) }
        for i = 1, #paths do
            local scriptPath = paths[i]:gsub('%?', modpath):gsub('%.+%/+', '')
            local resourceFile = LoadResourceFile(sublime_core, scriptPath)
            if resourceFile then
                loaded[modname] = false
                scriptPath = ('@@%s/%s'):format(sublime_core, scriptPath)

                local chunk, err = load(resourceFile, scriptPath)

                if err or not chunk then
                    loaded[modname] = nil
                    return error(err or ("unable to load module '%s'"):format(modname), 3)
                end

                module = chunk(modname) or true
                loaded[modname] = module

                return module
            end
        end

        return error(("module '%s' not found"):format(modname), 2)
    end

    return module
end

-- require('imports.locales.shared').init() ---@load translation

if sublime.service == 'server' then
    sublime.players = {}

    print([[
^6#####################################################################################
^6#^2                _       _   _                                                      ^6#
^6#^2               | |     | | (_)                                                     ^6#
^6#^2  ___   _   _  | |__   | |  _   _ __ ___     ___        ___    ___    _ __    ___  ^6#
^6#^2 / __| | | | | | '_ \  | | | | | '_ ` _ \   / _ \      / __|  / _ \  | '__|  / _ \ ^6#
^6#^2 \__ \ | |_| | | |_) | | | | | | | | | | | |  __/^7  _ ^2 | (__  | (_) | | |    |  __/ ^6#
^6#^2 |___/  \__,_| |_.__/  |_| |_| |_| |_| |_|  \___|^7 (_)^2  \___|  \___/  |_|     \___| ^6#
^6#                                                                                   ^6#
^6#^2        ^7Github: ^4https://github.com/sublime-framework-cfx/sublime_core-fivem        ^6#
^6#####################################################################################
]])
    -- require('imports.version.server').check('github', nil, 500) ---@load version check && check update
    -- require('imports.mysql.server').init() ---@load oxmysql
end	
Found table content:	
    service = service, ---@type string<'client' | 'server'>
    name = sublime_core, ---@type string<'sublime_core'>
    env = sublime_core, ---@type string<'resource_name?'>
    -- hashEvent = FormatEvent,
    await = await,
    lang = GetConvar('sublime:locale', 'fr') ---@type string<'fr' | 'en' | unknown>
	
Processing item:	service = service	
Kept original item:	service = service	
Processing item:	---@type string<'client' | 'server'>
    name = sublime_core	
Kept original item:	---@type string<'client' | 'server'>
    name = sublime_core	
Processing item:	---@type string<'sublime_core'>
    env = sublime_core	
Kept original item:	---@type string<'sublime_core'>
    env = sublime_core	
Processing item:	---@type string<'resource_name?'>
    -- hashEvent = FormatEvent	
Kept original item:	---@type string<'resource_name?'>
    -- hashEvent = FormatEvent	
Processing item:	await = await	
Kept original item:	await = await	
Processing item:	lang = GetConvar('sublime:locale'	
Kept original item:	lang = GetConvar('sublime:locale'	
Processing item:	'fr') ---@type string<'fr' | 'en' | unknown>	
Kept original item:	'fr') ---@type string<'fr' | 'en' | unknown>	
Found table content:	
    __newindex = function(self, name, value)
        rawset(self, name, value)
        if type(value) == 'function' then
            exports(name, value)
        end
    end
	
Processing item:	__newindex = function(self	
Kept original item:	__newindex = function(self	
Processing item:	name	
Kept original item:	name	
Processing item:	value)
        rawset(self	
Kept original item:	value)
        rawset(self	
Processing item:	name	
Kept original item:	name	
Processing item:	value)
        if type(value) == 'function' then
            exports(name	
Kept original item:	value)
        if type(value) == 'function' then
            exports(name	
Processing item:	value)
        end
    end	
Kept original item:	value)
        end
    end	
Found table content:		
Found table content:	
    loaded = setmetatable({	
Processing item:	loaded = setmetatable({	
Kept original item:	loaded = setmetatable({	
Found table content:	
        __index = loaded,
        __newindex = function() end,
        __metatable = false,
    	
Processing item:	__index = loaded	
Kept original item:	__index = loaded	
Processing item:	__newindex = function() end	
Kept original item:	__newindex = function() end	
Processing item:	__metatable = false	
Kept original item:	__metatable = false	
Processing item:		
Found table content:	 string.strsplit(';', package.path) 	
Processing item:	string.strsplit(';'	
Kept original item:	string.strsplit(';'	
Processing item:	package.path)	
Kept original item:	package.path)	
Found table content:		
Returning diffs count:	1	
OnSetText called with text:	local mt_pvt, class = {
    __metatable = 'private',
    __ext = 0,
    __pack = function() return '' end,
}, {}

---@param prototype table?
---@return { new: fun(obj): table }
function class.new(prototype)
    local self = { __index = prototype }

    function self.new(obj)
        if obj.private then
            setmetatable(obj.private, mt_pvt)
        end

        return setmetatable(obj, self)
    end

    return self
end

return class	
Found table content:	
    __metatable = 'private',
    __ext = 0,
    __pack = function() return '' end,
	
Processing item:	__metatable = 'private'	
Kept original item:	__metatable = 'private'	
Processing item:	__ext = 0	
Kept original item:	__ext = 0	
Processing item:	__pack = function() return '' end	
Kept original item:	__pack = function() return '' end	
Processing item:		
Found table content:		
Found table content:	 new: fun(obj): table 	
Processing item:	new: fun(obj): table	
Kept original item:	new: fun(obj): table	
Found table content:	 __index = prototype 	
Processing item:	__index = prototype	
Kept original item:	__index = prototype	
Returning diffs count:	0	
OnSetText called with text:	if not sublime or not sublime.service then return error("Cannot load init modules", 3) end
local folders = require 'config.modules'

for i = 1, #folders do
    local folder <const> = folders[i]
    local files <const> = require(('modules.%s.index'):format(folder))

    if files.shared then
        local t <const> = files.shared
        for j = 1, #t do
            local file <const> = t[j]
            require(('modules.%s.%s.%s'):format(folder, 'shared', file))
        end
    end

    if files[sublime.service] then
        local t <const> = files[sublime.service]
        for j = 1, #t do
            local file <const> = t[j]
            require(('modules.%s.%s.%s'):format(folder, sublime.service, file))
        end
    end
end

folders = nil	
Returning diffs count:	0	
OnSetText called with text:	local player = {}

---@param key string
---@param value any
---@param force? 'ignore' | boolean
function player:set(key, value, force)
    if not self[key] or self[key] ~= value or force then
        self[key] = value
        if force and force == 'ignore' then return end
        TriggerEvent('sublime:player:set:'..key, value)
    end
end

---@param coords vec3
---@return number
function player:distance(coords)
    return #(self.coords - coords)
end

CreateThread(function()
    player:set('id', PlayerId())
    player:set('serverid', GetPlayerServerId(player.id))

    while true do
        player:set('ped', PlayerPedId())
        player:set('coords', GetEntityCoords(player.ped), 'ignore')
        player:set('vec4', vec4(player.coords.x, player.coords.y, player.coords.z, GetEntityHeading(player.ped)), 'ignore')

        local hasWeapon <const>, weaponHash <const> = GetCurrentPedWeapon(player.ped, true)
        player:set('weapon', hasWeapon and weaponHash or false)

        local vehicle <const> = GetVehiclePedIsIn(player.ped, false)
        if vehicle > 0 then
            player:set('vehicle', vehicle)

            if not player.seat or GetPedInVehicleSeat(vehicle, player.seat) ~= player.ped then
                for i = -1, GetVehicleMaxNumberOfPassengers(vehicle) - 1 do
                    if GetPedInVehicleSeat(vehicle, i) == player.ped then
                        player:set('seat', i)
                        break
                    end
                end
            end
        else
            player:set('vehicle', false)
            player:set('seat', false)
        end
    
        Wait(500)
    end
end)

---@param key string
---@return any
function sublime.GetPlayer(key)
    return player[key] or key == 'vehicle' and false or false
end

_ENV.player = player	
Found table content:		
Returning diffs count:	0	
OnSetText called with text:	return {
    client = {
        'player',
    },

    server = {
        'players',
    },
}	
Found table content:	
    client = {
        'player',
    	
Processing item:	client = {
        'player'	
Kept original item:	client = {
        'player'	
Processing item:		
Found table content:	
        'players',
    	
Processing item:	'players'	
Kept original item:	'players'	
Processing item:		
Returning diffs count:	0	
OnSetText called with text:	GlobalState.playersCount = 0
local PlayerExports = {}
local PlayerObject = setmetatable({}, {
    __newindex = function(self, key, value)
        rawset(self, key, value)
        print(key, value)
        PlayerExports[key] = true
    end
})

function sublime.GetPlayerExports()
    return PlayerExports
end

---@param id integer
---@param method string
---@param ... unknown?
---@return unknown?
function sublime.CallPlayerMethod(id, method, ...)
    print(id, method)
    local player = sublime.GetPlayerData(id)
    return PlayerObject[method](player, ...)
end

---@param source integer
function sublime.GetPlayerData(source)
    return sublime.players[source]
end

function sublime.RemovePlayerObject(source)
    local player = sublime.players[source]
    if player then
        sublime.players[source] = nil
        player = nil
        collectgarbage()
        TriggerEvent('sublime:player:remove', source)
    end
end

function PlayerObject:init()
    print(self.source, 'was initialized')
end

function PlayerObject:setName(name)
    self.private.name = name
end

function PlayerObject:getName()
    return self.private.name
end

---@param key string support nested keys separated by dots '.', exemple: 'metadata.name'
---@return unknown?
function PlayerObject:get(key)
    assert(key and type(key) == 'string', 'Invalid key: '..key)

    if key:find('.') then
        local keys <const> = {('.'):strsplit(key)}
        local value = self.private
        for i = 1, #keys do
            local key <const> = keys[i]
            value = value[key]
            if not value then
                return nil
            end
        end

        return value
    end

    return self.private[key]
end

local class <const> = require 'modules.handlers.shared.class'
return class.new(PlayerObject)

-----------------
--[[
function PlayerObject:init()
    GlobalState.playersCount += 1
end

function PlayerObject:__gc() -- destructor
    GlobalState.playersCount -= 1
end

function PlayerObject:save()
    -- save player in database
    return self
end

function PlayerObject:set(key, value, replicated)
    local _key, count = key:gsub('%W', '')

    if count > 0 then
        warn('Invalid key: '..key)
        key = _key
    end

    self.private.metadata[key] = value

    if replicated then
        --TriggerClientEvent('sublime:player:set', self.source, key, value)
    end
end

function PlayerObject:get(key)
    local metadata <const> = self.private.metadata
    if not key then return metadata end

    local _key, count = key:gsub('%W', '')

    if count > 0 then
        warn('Invalid key: '..key)
        key = _key
    end

    return metadata[key]
end

function PlayerObject:setName(name)
    self.private.name = name
    return self
end

function PlayerObject:getName()
    return self.private.name
end

---@param source integer
---@param data table
---@return table
function sublime.CreatePlayerObject(source, data)
    if sublime.players[source] then
        return sublime.players[source]
    end

    data.metadata = data.metadata or {}
    data.group = data.group or 'user'
    data.databaseId = data.databaseId or 0 ---@todo: get from database id
    data.licenses = data.licenses or {} ---@todo: use license manager

    local object = { 
        source = source,
        export = 'player.'..source,
        private = data
    }

    local player <const> = PlayerObject:new(object)
    sublime.players[source] = player
    --sublime.playersDatabaseId[player.private.databaseId] = source

    return player
end

---@param source integer
function sublime.RemovePlayerObject(source)
    local player = sublime.players[source]
    if player then
        sublime.players[source] = nil
        player = nil
        collectgarbage()
        TriggerEvent('sublime:player:remove', source)
    end
end

---@param source integer
function sublime.GetPlayerData(source)
    return sublime.players[source]
end]]	
Found table content:		
Found table content:		
Found table content:	
    __newindex = function(self, key, value)
        rawset(self, key, value)
        print(key, value)
        PlayerExports[key] = true
    end
	
Processing item:	__newindex = function(self	
Kept original item:	__newindex = function(self	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
        rawset(self	
Kept original item:	value)
        rawset(self	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
        print(key	
Kept original item:	value)
        print(key	
Processing item:	value)
        PlayerExports[key] = true
    end	
Kept original item:	value)
        PlayerExports[key] = true
    end	
Found table content:	('.'):strsplit(key)	
Processing item:	('.'):strsplit(key)	
Kept original item:	('.'):strsplit(key)	
Found table content:		
Found table content:		
Found table content:	 
        source = source,
        export = 'player.'..source,
        private = data
    	
Processing item:	source = source	
Kept original item:	source = source	
Processing item:	export = 'player.'..source	
Kept original item:	export = 'player.'..source	
Processing item:	private = data	
Kept original item:	private = data	
Returning diffs count:	0	
OnSetText called with text:	local PlayerClass = require 'modules.main.server.class.player'

---@param source integer
---@param data table
---@return table
function sublime.CreatePlayerObject(source, data)
    if sublime.players[source] then
        return sublime.players[source]
    end

    data.metadata = data.metadata or {}
    data.group = data.group or 'user'
    data.databaseId = data.databaseId or 0
    data.licenses = data.licenses or {}

    local object = { 
        source = source,
        private = data
    }

    local player <const> = PlayerClass.new(object)
    sublime.players[source] = player
    --sublime.playersDatabaseId[player.private.databaseId] = source

    return player
end

sublime.CreatePlayerObject(1, { name = 'John', age = 20 })
local p = sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })

p:init()


RegisterCommand('hh', function()
    local player2 = sublime.GetPlayerData(2)
    print(player2?.source)
    if not player2 then
        print('Player not found')
        return
    end

    print(player2:getName())
end)	
Found table content:		
Found table content:		
Found table content:	 
        source = source,
        private = data
    	
Processing item:	source = source	
Kept original item:	source = source	
Processing item:	private = data	
Kept original item:	private = data	
Found table content:	 name = 'John', age = 20 	
Processing item:	name = 'John'	
Kept original item:	name = 'John'	
Processing item:	age = 20	
Kept original item:	age = 20	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Returning diffs count:	1	
OnSetText called with text:	--This empty file causes the scheduler.lua to load clientside
--scheduler.lua when loaded inside the sessionmanager resource currently manages remote callbacks.
--Without this, callbacks will only work server->client and not client->server.	
Returning diffs count:	0	
OnSetText called with text:	-- This resource is part of the default Cfx.re asset pack (cfx-server-data)
-- Altering or recreating for local use only is strongly discouraged.

version '1.0.0'
author 'Cfx.re <root@cfx.re>'
description 'Handles the "host lock" for non-OneSync servers. Do not disable.'
repository 'https://github.com/citizenfx/cfx-server-data'

fx_version 'cerulean'
games { 'gta4', 'gta5' }

server_script 'server/host_lock.lua'
client_script 'client/empty.lua'	
Found table content:	 'gta4', 'gta5' 	
Processing item:	'gta4'	
Kept original item:	'gta4'	
Processing item:	'gta5'	
Kept original item:	'gta5'	
Returning diffs count:	1	
OnSetText called with text:	-- This resource is part of the default Cfx.re asset pack (cfx-server-data)
-- Altering or recreating for local use only is strongly discouraged.

version '1.0.0'
author 'Cfx.re <root@cfx.re>'
description 'Builds resources with webpack. To learn more: https://webpack.js.org'
repository 'https://github.com/citizenfx/cfx-server-data'

dependency 'yarn'
server_script 'webpack_builder.js'

fx_version 'adamant'
game 'common'
	
Returning diffs count:	1	
OnSetText called with text:	-- whitelist c2s events
RegisterServerEvent('hostingSession')
RegisterServerEvent('hostedSession')

-- event handler for pre-session 'acquire'
local currentHosting
local hostReleaseCallbacks = {}

-- TODO: add a timeout for the hosting lock to be held
-- TODO: add checks for 'fraudulent' conflict cases of hosting attempts (typically whenever the host can not be reached)
AddEventHandler('hostingSession', function()
    -- if the lock is currently held, tell the client to await further instruction
    if currentHosting then
        TriggerClientEvent('sessionHostResult', source, 'wait')

        -- register a callback for when the lock is freed
        table.insert(hostReleaseCallbacks, function()
            TriggerClientEvent('sessionHostResult', source, 'free')
        end)

        return
    end

    -- if the current host was last contacted less than a second ago
    if GetHostId() then
        if GetPlayerLastMsg(GetHostId()) < 1000 then
            TriggerClientEvent('sessionHostResult', source, 'conflict')

            return
        end
    end

    hostReleaseCallbacks = {}

    currentHosting = source

    TriggerClientEvent('sessionHostResult', source, 'go')

    -- set a timeout of 5 seconds
    SetTimeout(5000, function()
        if not currentHosting then
            return
        end

        currentHosting = nil

        for _, cb in ipairs(hostReleaseCallbacks) do
            cb()
        end
    end)
end)

AddEventHandler('hostedSession', function()
    -- check if the client is the original locker
    if currentHosting ~= source then
        -- TODO: drop client as they're clearly lying
        print(currentHosting, '~=', source)
        return
    end

    -- free the host lock (call callbacks and remove the lock value)
    for _, cb in ipairs(hostReleaseCallbacks) do
        cb()
    end

    currentHosting = nil
end)

EnableEnhancedHostSupport(true)	
Found table content:		
Found table content:		
Returning diffs count:	0	
OnSetText called with text:	-- This resource is part of the default Cfx.re asset pack (cfx-server-data)
-- Altering or recreating for local use only is strongly discouraged.

version '1.0.0'
author 'Cfx.re <root@cfx.re>'
description 'Builds resources with yarn. To learn more: https://classic.yarnpkg.com'
repository 'https://github.com/citizenfx/cfx-server-data'

fx_version 'adamant'
game 'common'

server_script 'yarn_builder.js'
	
Returning diffs count:	1	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , ,   }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Processing item:		
Processing item:		
Creating diff. Start:	696	End:	754	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , ,  }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , ,  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Processing item:		
Processing item:		
Creating diff. Start:	696	End:	753	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, ,   }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Processing item:		
Creating diff. Start:	696	End:	752	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, ,  }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, ,  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Processing item:		
Creating diff. Start:	696	End:	751	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName,   }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Creating diff. Start:	696	End:	750	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName,  }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName,  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Creating diff. Start:	696	End:	749	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName  }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	748	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName,  }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName,  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Creating diff. Start:	696	End:	749	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName,   }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Creating diff. Start:	696	End:	750	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, ,  }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, ,  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Processing item:		
Creating diff. Start:	696	End:	751	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, ,   }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Processing item:		
Creating diff. Start:	696	End:	752	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , ,  }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , ,  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Processing item:		
Processing item:		
Creating diff. Start:	696	End:	753	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , ,   }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Processing item:		
Processing item:		
Creating diff. Start:	696	End:	754	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,  }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Processing item:		
Processing item:		
Processing item:		
Creating diff. Start:	696	End:	755	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Processing item:		
Processing item:		
Processing item:		
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	---@meta coroutine

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine"])
---
---@class coroutinelib
coroutine = {}

---
---Creates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `"thread"`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.create"])
---
---@param f async fun(...):...
---@return thread
---@nodiscard
function coroutine.create(f) end

---
---Returns true when the coroutine `co` can yield. The default for `co` is the running coroutine.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.isyieldable"])
---
---@param co? thread
---@return boolean
---@nodiscard
function coroutine.isyieldable(co) end

---@version >5.4
---
---Closes coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.close"])
---
---@param co thread
---@return boolean noerror
---@return any errorobject
function coroutine.close(co) end

---
---Starts or continues the execution of coroutine `co`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.resume"])
---
---@param co    thread
---@param val1? any
---@return boolean success
---@return any ...
function coroutine.resume(co, val1, ...) end

---
---Returns the running coroutine plus a boolean, true when the running coroutine is the main one.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.running"])
---
---@return thread running
---@return boolean ismain
---@nodiscard
function coroutine.running() end

---
---Returns the status of coroutine `co`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.status"])
---
---@param co thread
---@return
---| '"running"'   # Is running.
---| '"suspended"' # Is suspended or not started.
---| '"normal"'    # Is active but not running.
---| '"dead"'      # Has finished or stopped with an error.
---@nodiscard
function coroutine.status(co) end

---
---Creates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.wrap"])
---
---@param f async fun(...):...
---@return fun(...):...
---@nodiscard
function coroutine.wrap(f) end

---
---Suspends the execution of the calling coroutine.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.yield"])
---
---@async
---@return any ...
function coroutine.yield(...) end

return coroutine
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/coroutine.lua	
OnSetText called with text:	---@meta package

---
---Loads the given module, returns any value returned by the searcher(`true` when `nil`). Besides that value, also returns as a second result the loader data returned by the searcher, which indicates how `require` found the module. (For instance, if the module came from a file, this loader data is the file path.)
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-require"])
---
---@param modname string
---@return unknown
---@return unknown loaderdata
function require(modname) end

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package"])
---
---@class packagelib
---
---The path used by `require` to search for a C loader.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.cpath"])
---
---@field cpath     string
---
---A table used by `require` to control which modules are already loaded.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.loaded"])
---
---@field loaded    table
---
---The path used by `require` to search for a Lua loader.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.path"])
---
---@field path      string
---
---A table to store loaders for specific modules.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.preload"])
---
---@field preload   table
package = {}

---
---A string describing some compile-time configurations for packages.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.config"])
---
package.config = [[
/
;
?
!
-]]

---@version <5.1
---
---A table used by `require` to control how to load modules.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.loaders"])
---
package.loaders = {}

---
---Dynamically links the host program with the C library `libname`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.loadlib"])
---
---@param libname string
---@param funcname string
---@return any
function package.loadlib(libname, funcname) end

---
---A table used by `require` to control how to load modules.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.searchers"])
---
---@version >5.2
package.searchers = {}

---
---Searches for the given `name` in the given `path`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.searchpath"])
---
---@version >5.2,JIT
---@param name string
---@param path string
---@param sep? string
---@param rep? string
---@return string? filename
---@return string? errmsg
---@nodiscard
function package.searchpath(name, path, sep, rep) end

---
---Sets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.seeall"])
---
---@version <5.1
---@param module table
function package.seeall(module) end

return package
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/package.lua	
OnSetText called with text:	---@meta string

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string"])
---
---@class stringlib
string = {}

---
---Returns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.byte"])
---
---@param s  string|number
---@param i? integer
---@param j? integer
---@return integer ...
---@nodiscard
function string.byte(s, i, j) end

---
---Returns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.char"])
---
---@param byte integer
---@param ... integer
---@return string
---@nodiscard
function string.char(byte, ...) end

---
---Returns a string containing a binary representation (a *binary chunk*) of the given function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.dump"])
---
---@param f      async fun(...):...
---@param strip? boolean
---@return string
---@nodiscard
function string.dump(f, strip) end

---
---Miss locale <string.find>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.find"])
---
---@param s       string|number
---@param pattern string|number
---@param init?   integer
---@param plain?  boolean
---@return integer|nil start
---@return integer|nil end
---@return any|nil ... captured
---@nodiscard
function string.find(s, pattern, init, plain) end

---
---Returns a formatted version of its variable number of arguments following the description given in its first argument.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.format"])
---
---@param s string|number
---@param ... any
---@return string
---@nodiscard
function string.format(s, ...) end

---
---Miss locale <string.gmatch>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.gmatch"])
---
---@param s       string|number
---@param pattern string|number
---@param init?   integer
---@return fun():string, ...
function string.gmatch(s, pattern, init) end

---
---Miss locale <string.gsub>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.gsub"])
---
---@param s       string|number
---@param pattern string|number
---@param repl    string|number|table|function
---@param n?      integer
---@return string
---@return integer count
function string.gsub(s, pattern, repl, n) end

---
---Returns its length.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.len"])
---
---@param s string|number
---@return integer
---@nodiscard
function string.len(s) end

---
---Returns a copy of this string with all uppercase letters changed to lowercase.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.lower"])
---
---@param s string|number
---@return string
---@nodiscard
function string.lower(s) end

---
---Miss locale <string.match>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.match"])
---
---@param s       string|number
---@param pattern string|number
---@param init?   integer
---@return any ...
---@nodiscard
function string.match(s, pattern, init) end

---@version >5.3
---
---Miss locale <string.pack>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.pack"])
---
---@param fmt string
---@param v1  string|number
---@param v2? string|number
---@param ... string|number
---@return string binary
---@nodiscard
function string.pack(fmt, v1, v2, ...) end

---@version >5.3
---
---Miss locale <string.packsize>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.packsize"])
---
---@param fmt string
---@return integer
---@nodiscard
function string.packsize(fmt) end

---
---Returns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.rep"])
---
---@param s    string|number
---@param n    integer
---@param sep? string|number
---@return string
---@nodiscard
function string.rep(s, n, sep) end

---
---Returns a string that is the string `s` reversed.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.reverse"])
---
---@param s string|number
---@return string
---@nodiscard
function string.reverse(s) end

---
---Returns the substring of the string that starts at `i` and continues until `j`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.sub"])
---
---@param s  string|number
---@param i  integer
---@param j? integer
---@return string
---@nodiscard
function string.sub(s, i, j) end

---@version >5.3
---
---Returns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?["en-us/54/manual.html/6.4.2"])) .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.unpack"])
---
---@param fmt  string
---@param s    string
---@param pos? integer
---@return any ...
---@nodiscard
function string.unpack(fmt, s, pos) end

---
---Returns a copy of this string with all lowercase letters changed to uppercase.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.upper"])
---
---@param s string|number
---@return string
---@nodiscard
function string.upper(s) end

return string
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/string.lua	
OnSetText called with text:	---@meta _

---@class unknown
---@class any
---@class nil
---@class boolean
---@class true: boolean
---@class false: boolean
---@class number
---@class integer: number
---@class thread
---@class table<K, V>: { [K]: V }
---@class string: stringlib
---@class userdata
---@class lightuserdata
---@class function
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/builtin.lua	
OnSetText called with text:	---@meta debug

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug"])
---
---@class debuglib
debug = {}

---@class debuginfo
---@field name            string
---@field namewhat        string
---@field source          string
---@field short_src       string
---@field linedefined     integer
---@field lastlinedefined integer
---@field what            string
---@field currentline     integer
---@field istailcall      boolean
---@field nups            integer
---@field nparams         integer
---@field isvararg        boolean
---@field func            function
---@field ftransfer       integer
---@field ntransfer       integer
---@field activelines     table

---
---Enters an interactive mode with the user, running each string that the user enters.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.debug"])
---
function debug.debug() end

---@version 5.1
---
---Returns the environment of object `o` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getfenv"])
---
---@param o any
---@return table
---@nodiscard
function debug.getfenv(o) end

---
---Returns the current hook settings of the thread.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.gethook"])
---
---@param co? thread
---@return function hook
---@return string mask
---@return integer count
---@nodiscard
function debug.gethook(co) end

---@alias infowhat string
---|+"n"     # `name` and `namewhat`
---|+"S"     # `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`
---|+"l"     # `currentline`
---|+"t"     # `istailcall`
---|+"u" # `nups`, `nparams`, and `isvararg`
---|+"f"     # `func`
---|+"r"     # `ftransfer` and `ntransfer`
---|+"L"     # `activelines`

---
---Returns a table with information about a function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getinfo"])
---
---@overload fun(f: integer|function, what?: infowhat):debuginfo
---@param thread thread
---@param f      integer|async fun(...):...
---@param what?  infowhat
---@return debuginfo
---@nodiscard
function debug.getinfo(thread, f, what) end

---
---Returns the name and the value of the local variable with index `local` of the function at level `f` of the stack.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getlocal"])
---
---@overload fun(f: integer|async fun(...):..., index: integer):string, any
---@param thread  thread
---@param f       integer|async fun(...):...
---@param index   integer
---@return string name
---@return any    value
---@nodiscard
function debug.getlocal(thread, f, index) end

---
---Returns the metatable of the given value.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getmetatable"])
---
---@param object any
---@return table metatable
---@nodiscard
function debug.getmetatable(object) end

---
---Returns the registry table.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getregistry"])
---
---@return table
---@nodiscard
function debug.getregistry() end

---
---Returns the name and the value of the upvalue with index `up` of the function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getupvalue"])
---
---@param f  async fun(...):...
---@param up integer
---@return string name
---@return any    value
---@nodiscard
function debug.getupvalue(f, up) end

---
---Returns the `n`-th user value associated
---to the userdata `u` plus a boolean,
---`false` if the userdata does not have that value.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getuservalue"])
---
---@param u  userdata
---@param n? integer
---@return any
---@return boolean
---@nodiscard
function debug.getuservalue(u, n) end

---
---### **Deprecated in `Lua 5.4.2`**
---
---Sets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.
---
---In case of success, this function returns the old limit. In case of error, it returns `false`.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setcstacklimit"])
---
---@deprecated
---@param limit integer
---@return integer|boolean
function debug.setcstacklimit(limit) end

---
---Sets the environment of the given `object` to the given `table` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setfenv"])
---
---@version 5.1
---@generic T
---@param object T
---@param env    table
---@return T object
function debug.setfenv(object, env) end

---@alias hookmask string
---|+"c" # Calls hook when Lua calls a function.
---|+"r" # Calls hook when Lua returns from a function.
---|+"l" # Calls hook when Lua enters a new line of code.

---
---Sets the given function as a hook.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.sethook"])
---
---@overload fun(hook: (async fun(...):...), mask: hookmask, count?: integer)
---@overload fun(thread: thread):...
---@overload fun(...):...
---@param thread thread
---@param hook   async fun(...):...
---@param mask   hookmask
---@param count? integer
function debug.sethook(thread, hook, mask, count) end

---
---Assigns the `value` to the local variable with index `local` of the function at `level` of the stack.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setlocal"])
---
---@overload fun(level: integer, index: integer, value: any):string
---@param thread thread
---@param level  integer
---@param index  integer
---@param value  any
---@return string name
function debug.setlocal(thread, level, index, value) end

---
---Sets the metatable for the given value to the given table (which can be `nil`).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setmetatable"])
---
---@generic T
---@param value T
---@param meta? table
---@return T value
function debug.setmetatable(value, meta) end

---
---Assigns the `value` to the upvalue with index `up` of the function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setupvalue"])
---
---@param f     async fun(...):...
---@param up    integer
---@param value any
---@return string name
function debug.setupvalue(f, up, value) end

---
---Sets the given `value` as
---the `n`-th user value associated to the given `udata`.
---`udata` must be a full userdata.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setuservalue"])
---
---@param udata userdata
---@param value any
---@param n?    integer
---@return userdata udata
function debug.setuservalue(udata, value, n) end

---
---Returns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.traceback"])
---
---@overload fun(message?: any, level?: integer): string
---@param thread   thread
---@param message? any
---@param level?   integer
---@return string  message
---@nodiscard
function debug.traceback(thread, message, level) end

---@version >5.2, JIT
---
---Returns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.upvalueid"])
---
---@param f async fun(...):...
---@param n integer
---@return lightuserdata id
---@nodiscard
function debug.upvalueid(f, n) end

---@version >5.2, JIT
---
---Make the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.upvaluejoin"])
---
---@param f1 async fun(...):...
---@param n1 integer
---@param f2 async fun(...):...
---@param n2 integer
function debug.upvaluejoin(f1, n1, f2, n2) end

return debug
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/debug.lua	
OnSetText called with text:	---@meta os

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os"])
---
---@class oslib
os = {}

---
---Returns an approximation of the amount in seconds of CPU time used by the program.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.clock"])
---
---@return number
---@nodiscard
function os.clock() end

---@class osdate:osdateparam
---
---four digits
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.year"])
---
---@field year  integer|string
---
---1-12
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.month"])
---
---@field month integer|string
---
---1-31
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.day"])
---
---@field day   integer|string
---
---0-23
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.hour"])
---
---@field hour  integer|string
---
---0-59
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.min"])
---
---@field min   integer|string
---
---0-61
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.sec"])
---
---@field sec   integer|string
---
---weekday, 1–7, Sunday is 1
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.wday"])
---
---@field wday  integer|string
---
---day of the year, 1–366
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.yday"])
---
---@field yday  integer|string
---
---daylight saving flag, a boolean
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.isdst"])
---
---@field isdst boolean

---
---Returns a string or a table containing date and time, formatted according to the given string `format`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.date"])
---
---@param format? string
---@param time?   integer
---@return string|osdate
---@nodiscard
function os.date(format, time) end

---
---Returns the difference, in seconds, from time `t1` to time `t2`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.difftime"])
---
---@param t2 integer
---@param t1 integer
---@return integer
---@nodiscard
function os.difftime(t2, t1) end

---
---Passes `command` to be executed by an operating system shell.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.execute"])
---
---@param command? string
---@return boolean?  suc
---@return exitcode? exitcode
---@return integer?  code
function os.execute(command) end

---
---Calls the ISO C function `exit` to terminate the host program.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.exit"])
---
---@param code?  boolean|integer
---@param close? boolean
function os.exit(code, close) end

---
---Returns the value of the process environment variable `varname`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.getenv"])
---
---@param varname string
---@return string?
---@nodiscard
function os.getenv(varname) end

---
---Deletes the file with the given name.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.remove"])
---
---@param filename string
---@return boolean suc
---@return string? errmsg
function os.remove(filename) end

---
---Renames the file or directory named `oldname` to `newname`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.rename"])
---
---@param oldname string
---@param newname string
---@return boolean suc
---@return string? errmsg
function os.rename(oldname, newname) end

---@alias localecategory
---|>"all"
---| "collate"
---| "ctype"
---| "monetary"
---| "numeric"
---| "time"

---
---Sets the current locale of the program.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.setlocale"])
---
---@param locale    string|nil
---@param category? localecategory
---@return string localecategory
function os.setlocale(locale, category) end

---@class osdateparam
---
---four digits
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.year"])
---
---@field year  integer|string
---
---1-12
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.month"])
---
---@field month integer|string
---
---1-31
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.day"])
---
---@field day   integer|string
---
---0-23
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.hour"])
---
---@field hour  (integer|string)?
---
---0-59
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.min"])
---
---@field min   (integer|string)?
---
---0-61
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.sec"])
---
---@field sec   (integer|string)?
---
---weekday, 1–7, Sunday is 1
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.wday"])
---
---@field wday  (integer|string)?
---
---day of the year, 1–366
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.yday"])
---
---@field yday  (integer|string)?
---
---daylight saving flag, a boolean
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.isdst"])
---
---@field isdst boolean?

---
---Returns the current time when called without arguments, or a time representing the local date and time specified by the given table.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.time"])
---
---@param date? osdateparam
---@return integer
---@nodiscard
function os.time(date) end

---
---Returns a string with a file name that can be used for a temporary file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.tmpname"])
---
---@return string
---@nodiscard
function os.tmpname() end

return os
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/os.lua	
OnSetText called with text:	---@meta io

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io"])
---
---@class iolib
---
---standard input.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.stdin"])
---
---@field stdin  file*
---
---standard output.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.stdout"])
---
---@field stdout file*
---
---standard error.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.stderr"])
---
---@field stderr file*
io = {}

---@alias openmode
---|>"r"   # Read mode.
---| "w"   # Write mode.
---| "a"   # Append mode.
---| "r+"  # Update mode, all previous data is preserved.
---| "w+"  # Update mode, all previous data is erased.
---| "a+"  # Append update mode, previous data is preserved, writing is only allowed at the end of file.
---| "rb"  # Read mode. (in binary mode.)
---| "wb"  # Write mode. (in binary mode.)
---| "ab"  # Append mode. (in binary mode.)
---| "r+b" # Update mode, all previous data is preserved. (in binary mode.)
---| "w+b" # Update mode, all previous data is erased. (in binary mode.)
---| "a+b" # Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)

---
---Close `file` or default output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.close"])
---
---@param file? file*
---@return boolean?  suc
---@return exitcode? exitcode
---@return integer?  code
function io.close(file) end

---
---Saves any written data to default output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.flush"])
---
function io.flush() end

---
---Sets `file` as the default input file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.input"])
---
---@overload fun():file*
---@param file string|file*
function io.input(file) end

---
---------
---```lua
---for c in io.lines(filename, ...) do
---    body
---end
---```
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.lines"])
---
---@param filename string?
---@param ... readmode
---@return fun():any, ...
function io.lines(filename, ...) end

---
---Opens a file, in the mode specified in the string `mode`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.open"])
---
---@param filename string
---@param mode?    openmode
---@return file*?
---@return string? errmsg
---@nodiscard
function io.open(filename, mode) end

---
---Sets `file` as the default output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.output"])
---
---@overload fun():file*
---@param file string|file*
function io.output(file) end

---@alias popenmode
---| "r" # Read data from this program by `file`.
---| "w" # Write data to this program by `file`.

---
---Starts program prog in a separated process.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.popen"])
---
---@param prog  string
---@param mode? popenmode
---@return file*?
---@return string? errmsg
function io.popen(prog, mode) end

---
---Reads the `file`, according to the given formats, which specify what to read.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.read"])
---
---@param ... readmode
---@return any
---@return any ...
---@nodiscard
function io.read(...) end

---
---In case of success, returns a handle for a temporary file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.tmpfile"])
---
---@return file*
---@nodiscard
function io.tmpfile() end

---@alias filetype
---| "file"        # Is an open file handle.
---| "closed file" # Is a closed file handle.
---| `nil`         # Is not a file handle.

---
---Checks whether `obj` is a valid file handle.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.type"])
---
---@param file file*
---@return filetype
---@nodiscard
function io.type(file) end

---
---Writes the value of each of its arguments to default output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.write"])
---
---@return file*
---@return string? errmsg
function io.write(...) end

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file"])
---
---@class file*
local file = {}

---@alias readmode integer|string
---| "n"  # Reads a numeral and returns it as number.
---| "a"  # Reads the whole file.
---|>"l"  # Reads the next line skipping the end of line.
---| "L"  # Reads the next line keeping the end of line.

---@alias exitcode "exit"|"signal"

---
---Close `file`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:close"])
---
---@return boolean?  suc
---@return exitcode? exitcode
---@return integer?  code
function file:close() end

---
---Saves any written data to `file`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:flush"])
---
function file:flush() end

---
---------
---```lua
---for c in file:lines(...) do
---    body
---end
---```
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:lines"])
---
---@param ... readmode
---@return fun():any, ...
function file:lines(...) end

---
---Reads the `file`, according to the given formats, which specify what to read.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:read"])
---
---@param ... readmode
---@return any
---@return any ...
---@nodiscard
function file:read(...) end

---@alias seekwhence
---| "set" # Base is beginning of the file.
---|>"cur" # Base is current position.
---| "end" # Base is end of file.

---
---Sets and gets the file position, measured from the beginning of the file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:seek"])
---
---@param whence? seekwhence
---@param offset? integer
---@return integer offset
---@return string? errmsg
function file:seek(whence, offset) end

---@alias vbuf
---| "no"   # Output operation appears immediately.
---| "full" # Performed only when the buffer is full.
---| "line" # Buffered until a newline is output.

---
---Sets the buffering mode for an output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:setvbuf"])
---
---@param mode vbuf
---@param size? integer
function file:setvbuf(mode, size) end

---
---Writes the value of each of its arguments to `file`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:write"])
---
---@param ... string|number
---@return file*?
---@return string? errmsg
function file:write(...) end

return io
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/io.lua	
OnSetText called with text:	---@meta table

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table"])
---
---@class tablelib
table = {}

---
---Given a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ··· sep..list[j]`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.concat"])
---
---@param list table
---@param sep? string
---@param i?   integer
---@param j?   integer
---@return string
---@nodiscard
function table.concat(list, sep, i, j) end

---
---Inserts element `value` at position `pos` in `list`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.insert"])
---
---@overload fun(list: table, value: any)
---@param list table
---@param pos integer
---@param value any
function table.insert(list, pos, value) end

---@version <5.1
---
---Returns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.maxn"])
---
---@param table table
---@return integer
---@nodiscard
function table.maxn(table) end

---@version >5.3, JIT
---
---Moves elements from table `a1` to table `a2`.
---```lua
---a2[t],··· =
---a1[f],···,a1[e]
---return a2
---```
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.move"])
---
---@param a1  table
---@param f   integer
---@param e   integer
---@param t   integer
---@param a2? table
---@return table a2
function table.move(a1, f, e, t, a2) end

---@version >5.2, JIT
---
---Returns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `"n"` with the total number of arguments.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.pack"])
---
---@return table
---@nodiscard
function table.pack(...) end

---
---Removes from `list` the element at position `pos`, returning the value of the removed element.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.remove"])
---
---@param list table
---@param pos? integer
---@return any
function table.remove(list, pos) end

---
---Sorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.sort"])
---
---@generic T
---@param list T[]
---@param comp? fun(a: T, b: T):boolean
function table.sort(list, comp) end

---@version >5.2, JIT
---
---Returns the elements from the given list. This function is equivalent to
---```lua
---    return list[i], list[i+1], ···, list[j]
---```
---By default, `i` is `1` and `j` is `#list`.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.unpack"])
---
---@generic T1, T2, T3, T4, T5, T6, T7, T8, T9, T10
---@param list {
--- [1]?: T1,
--- [2]?: T2,
--- [3]?: T3,
--- [4]?: T4,
--- [5]?: T5,
--- [6]?: T6,
--- [7]?: T7,
--- [8]?: T8,
--- [9]?: T9,
--- [10]?: T10,
---}
---@param i?   integer
---@param j?   integer
---@return T1, T2, T3, T4, T5, T6, T7, T8, T9, T10
---@nodiscard
function table.unpack(list, i, j) end

---@version <5.1, JIT
---
---Executes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.foreach"])
---
---@generic T
---@param list any
---@param callback fun(key: string, value: any):T|nil
---@return T|nil
---@deprecated
function table.foreach(list, callback) end

---@version <5.1, JIT
---
---Executes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.foreachi"])
---
---@generic T
---@param list any
---@param callback fun(key: string, value: any):T|nil
---@return T|nil
---@deprecated
function table.foreachi(list, callback) end

---@version <5.1, JIT
---
---Returns the number of elements in the table. This function is equivalent to `#list`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.getn"])
---
---@generic T
---@param list T[]
---@return integer
---@nodiscard
---@deprecated
function table.getn(list) end

return table
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/table.lua	
OnSetText called with text:	---@meta math

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math"])
---
---@class mathlib
---
---A value larger than any other numeric value.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.huge"])
---
---@field huge       number
---
---Miss locale <math.maxinteger>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.maxinteger"])
---
---@field maxinteger integer
---
---Miss locale <math.mininteger>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.mininteger"])
---
---@field mininteger integer
---
---The value of *π*.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.pi"])
---
---@field pi         number
math = {}

---
---Returns the absolute value of `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.abs"])
---
---@generic Number: number
---@param x Number
---@return Number
---@nodiscard
function math.abs(x) end

---
---Returns the arc cosine of `x` (in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.acos"])
---
---@param x number
---@return number
---@nodiscard
function math.acos(x) end

---
---Returns the arc sine of `x` (in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.asin"])
---
---@param x number
---@return number
---@nodiscard
function math.asin(x) end

---
---Returns the arc tangent of `y/x` (in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.atan"])
---
---@param y  number
---@param x? number
---@return number
---@nodiscard
function math.atan(y, x) end

---@version <5.2
---
---Returns the arc tangent of `y/x` (in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.atan2"])
---
---@param y number
---@param x number
---@return number
---@nodiscard
function math.atan2(y, x) end

---
---Returns the smallest integral value larger than or equal to `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.ceil"])
---
---@param x number
---@return integer
---@nodiscard
function math.ceil(x) end

---
---Returns the cosine of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.cos"])
---
---@param x number
---@return number
---@nodiscard
function math.cos(x) end

---@version <5.2
---
---Returns the hyperbolic cosine of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.cosh"])
---
---@param x number
---@return number
---@nodiscard
function math.cosh(x) end

---
---Converts the angle `x` from radians to degrees.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.deg"])
---
---@param x number
---@return number
---@nodiscard
function math.deg(x) end

---
---Returns the value `e^x` (where `e` is the base of natural logarithms).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.exp"])
---
---@param x number
---@return number
---@nodiscard
function math.exp(x) end

---
---Returns the largest integral value smaller than or equal to `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.floor"])
---
---@param x number
---@return integer
---@nodiscard
function math.floor(x) end

---
---Returns the remainder of the division of `x` by `y` that rounds the quotient towards zero.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.fmod"])
---
---@param x number
---@param y number
---@return number
---@nodiscard
function math.fmod(x, y) end

---@version <5.2
---
---Decompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.frexp"])
---
---@param x number
---@return number m
---@return number e
---@nodiscard
function math.frexp(x) end

---@version <5.2
---
---Returns `m * (2 ^ e)` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.ldexp"])
---
---@param m number
---@param e number
---@return number
---@nodiscard
function math.ldexp(m, e) end

---
---Returns the logarithm of `x` in the given base.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.log"])
---
---@param x     number
---@param base? integer
---@return number
---@nodiscard
function math.log(x, base) end

---@version <5.1
---
---Returns the base-10 logarithm of x.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.log10"])
---
---@param x number
---@return number
---@nodiscard
function math.log10(x) end

---
---Returns the argument with the maximum value, according to the Lua operator `<`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.max"])
---
---@generic Number: number
---@param x Number
---@param ... Number
---@return Number
---@nodiscard
function math.max(x, ...) end

---
---Returns the argument with the minimum value, according to the Lua operator `<`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.min"])
---
---@generic Number: number
---@param x Number
---@param ... Number
---@return Number
---@nodiscard
function math.min(x, ...) end

---
---Returns the integral part of `x` and the fractional part of `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.modf"])
---
---@param x number
---@return integer
---@return number
---@nodiscard
function math.modf(x) end

---@version <5.2
---
---Returns `x ^ y` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.pow"])
---
---@param x number
---@param y number
---@return number
---@nodiscard
function math.pow(x, y) end

---
---Converts the angle `x` from degrees to radians.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.rad"])
---
---@param x number
---@return number
---@nodiscard
function math.rad(x) end

---
---* `math.random()`: Returns a float in the range [0,1).
---* `math.random(n)`: Returns a integer in the range [1, n].
---* `math.random(m, n)`: Returns a integer in the range [m, n].
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.random"])
---
---@overload fun():number
---@overload fun(m: integer):integer
---@param m integer
---@param n integer
---@return integer
---@nodiscard
function math.random(m, n) end

---
---* `math.randomseed(x, y)`: Concatenate `x` and `y` into a 128-bit `seed` to reinitialize the pseudo-random generator.
---* `math.randomseed(x)`: Equate to `math.randomseed(x, 0)` .
---* `math.randomseed()`: Generates a seed with a weak attempt for randomness.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.randomseed"])
---
---@param x? integer
---@param y? integer
function math.randomseed(x, y) end

---
---Returns the sine of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.sin"])
---
---@param x number
---@return number
---@nodiscard
function math.sin(x) end

---@version <5.2
---
---Returns the hyperbolic sine of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.sinh"])
---
---@param x number
---@return number
---@nodiscard
function math.sinh(x) end

---
---Returns the square root of `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.sqrt"])
---
---@param x number
---@return number
---@nodiscard
function math.sqrt(x) end

---
---Returns the tangent of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.tan"])
---
---@param x number
---@return number
---@nodiscard
function math.tan(x) end

---@version <5.2
---
---Returns the hyperbolic tangent of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.tanh"])
---
---@param x number
---@return number
---@nodiscard
function math.tanh(x) end

---@version >5.3
---
---Miss locale <math.tointeger>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.tointeger"])
---
---@param x any
---@return integer?
---@nodiscard
function math.tointeger(x) end

---@version >5.3
---
---Miss locale <math.type>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.type"])
---
---@param x any
---@return
---| '"integer"'
---| '"float"'
---| 'nil'
---@nodiscard
function math.type(x) end

---@version >5.3
---
---Miss locale <math.ult>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.ult"])
---
---@param m integer
---@param n integer
---@return boolean
---@nodiscard
function math.ult(m, n) end

return math
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua	
OnSetText called with text:	---@meta utf8

---@version >5.3
---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8"])
---
---@class utf8lib
---
---The pattern which matches exactly one UTF-8 byte sequence, assuming that the subject is a valid UTF-8 string.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.charpattern"])
---
---@field charpattern string
utf8 = {}

---
---Receives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.char"])
---
---@param code integer
---@param ... integer
---@return string
---@nodiscard
function utf8.char(code, ...) end

---
---Returns values so that the construction
---```lua
---for p, c in utf8.codes(s) do
---    body
---end
---```
---will iterate over all UTF-8 characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.codes"])
---
---@param s    string
---@param lax? boolean
---@return fun(s: string, p: integer):integer, integer
function utf8.codes(s, lax) end

---
---Returns the codepoints (as integers) from all characters in `s` that start between byte position `i` and `j` (both included).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.codepoint"])
---
---@param s    string
---@param i?   integer
---@param j?   integer
---@param lax? boolean
---@return integer code
---@return integer ...
---@nodiscard
function utf8.codepoint(s, i, j, lax) end

---
---Returns the number of UTF-8 characters in string `s` that start between positions `i` and `j` (both inclusive).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.len"])
---
---@param s    string
---@param i?   integer
---@param j?   integer
---@param lax? boolean
---@return integer?
---@return integer? errpos
---@nodiscard
function utf8.len(s, i, j, lax) end

---
---Returns the position (in bytes) where the encoding of the `n`-th character of `s` (counting from position `i`) starts.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.offset"])
---
---@param s string
---@param n integer
---@param i? integer
---@return integer p
---@nodiscard
function utf8.offset(s, n, i) end

return utf8
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/utf8.lua	
OnSetText called with text:	---@meta _

---
---Command-line arguments of Lua Standalone.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-arg"])
---
---@type string[]
arg = {}

---
---Raises an error if the value of its argument v is false (i.e., `nil` or `false`); otherwise, returns all its arguments. In case of error, `message` is the error object; when absent, it defaults to `"assertion failed!"`
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-assert"])
---
---@generic T
---@param v? T
---@param message? any
---@param ... any
---@return T
---@return any ...
function assert(v, message, ...) end

---@alias gcoptions
---|>"collect"      # Performs a full garbage-collection cycle.
---| "stop"         # Stops automatic execution.
---| "restart"      # Restarts automatic execution.
---| "count"        # Returns the total memory in Kbytes.
---| "step"         # Performs a garbage-collection step.
---| "isrunning"    # Returns whether the collector is running.
---| "incremental"  # Change the collector mode to incremental.
---| "generational" # Change the collector mode to generational.

---
---This function is a generic interface to the garbage collector. It performs different functions according to its first argument, `opt`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-collectgarbage"])
---
---@param opt? gcoptions
---@param ... any
---@return any
function collectgarbage(opt, ...) end

---
---Opens the named file and executes its content as a Lua chunk. When called without arguments, `dofile` executes the content of the standard input (`stdin`). Returns all values returned by the chunk. In case of errors, `dofile` propagates the error to its caller. (That is, `dofile` does not run in protected mode.)
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-dofile"])
---
---@param filename? string
---@return any ...
function dofile(filename) end

---
---Terminates the last protected function called and returns message as the error object.
---
---Usually, `error` adds some information about the error position at the beginning of the message, if the message is a string.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-error"])
---
---@param message any
---@param level?  integer
function error(message, level) end

---
---A global variable (not a function) that holds the global environment (see [§2.2](command:extension.lua.doc?["en-us/54/manual.html/2.2"])). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-_G"])
---
---@class _G
_G = {}

---@version 5.1
---
---Returns the current environment in use by the function. `f` can be a Lua function or a number that specifies the function at that stack level.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-getfenv"])
---
---@param f? integer|async fun(...):...
---@return table
---@nodiscard
function getfenv(f) end

---
---If object does not have a metatable, returns nil. Otherwise, if the object's metatable has a __metatable field, returns the associated value. Otherwise, returns the metatable of the given object.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-getmetatable"])
---
---@param object any
---@return table metatable
---@nodiscard
function getmetatable(object) end

---
---Returns three values (an iterator function, the table `t`, and `0`) so that the construction
---```lua
---    for i,v in ipairs(t) do body end
---```
---will iterate over the key–value pairs `(1,t[1]), (2,t[2]), ...`, up to the first absent index.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-ipairs"])
---
---@generic T: table, V
---@param t T
---@return fun(table: V[], i?: integer):integer, V
---@return T
---@return integer i
function ipairs(t) end

---@alias loadmode
---| "b"  # Only binary chunks.
---| "t"  # Only text chunks.
---|>"bt" # Both binary and text.

---
---Loads a chunk.
---
---If `chunk` is a string, the chunk is this string. If `chunk` is a function, `load` calls it repeatedly to get the chunk pieces. Each call to `chunk` must return a string that concatenates with previous results. A return of an empty string, `nil`, or no value signals the end of the chunk.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-load"])
---
---@param chunk      string|function
---@param chunkname? string
---@param mode?      loadmode
---@param env?       table
---@return function?
---@return string?   error_message
---@nodiscard
function load(chunk, chunkname, mode, env) end

---
---Loads a chunk from file `filename` or from the standard input, if no file name is given.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-loadfile"])
---
---@param filename? string
---@param mode?     loadmode
---@param env?      table
---@return function?
---@return string?  error_message
---@nodiscard
function loadfile(filename, mode, env) end

---@version 5.1
---
---Loads a chunk from the given string.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-loadstring"])
---
---@param text       string
---@param chunkname? string
---@return function?
---@return string?   error_message
---@nodiscard
function loadstring(text, chunkname) end

---@version 5.1
---@param proxy boolean|table|userdata
---@return userdata
---@nodiscard
function newproxy(proxy) end

---@version 5.1
---
---Creates a module.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-module"])
---
---@param name string
---@param ...  any
function module(name, ...) end

---
---Allows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. A call to `next` returns the next index of the table and its associated value. When called with `nil` as its second argument, `next` returns an initial index and its associated value. When called with the last index, or with `nil` in an empty table, `next` returns `nil`. If the second argument is absent, then it is interpreted as `nil`. In particular, you can use `next(t)` to check whether a table is empty.
---
---The order in which the indices are enumerated is not specified, *even for numeric indices*. (To traverse a table in numerical order, use a numerical `for`.)
---
---The behavior of `next` is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may set existing fields to nil.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-next"])
---
---@generic K, V
---@param table table<K, V>
---@param index? K
---@return K?
---@return V?
---@nodiscard
function next(table, index) end

---
---If `t` has a metamethod `__pairs`, calls it with t as argument and returns the first three results from the call.
---
---Otherwise, returns three values: the [next](command:extension.lua.doc?["en-us/54/manual.html/pdf-next"]) function, the table `t`, and `nil`, so that the construction
---```lua
---    for k,v in pairs(t) do body end
---```
---will iterate over all key–value pairs of table `t`.
---
---See function [next](command:extension.lua.doc?["en-us/54/manual.html/pdf-next"]) for the caveats of modifying the table during its traversal.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-pairs"])
---
---@generic T: table, K, V
---@param t T
---@return fun(table: table<K, V>, index?: K):K, V
---@return T
function pairs(t) end

---
---Calls the function `f` with the given arguments in *protected mode*. This means that any error inside `f` is not propagated; instead, `pcall` catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, `pcall` also returns all results from the call, after this first result. In case of any error, `pcall` returns `false` plus the error object.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-pcall"])
---
---@param f     async fun(...):...
---@param arg1? any
---@param ...   any
---@return boolean success
---@return any result
---@return any ...
function pcall(f, arg1, ...) end

---
---Receives any number of arguments and prints their values to `stdout`, converting each argument to a string following the same rules of [tostring](command:extension.lua.doc?["en-us/54/manual.html/pdf-tostring"]).
---The function print is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use [string.format](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.format"]) and [io.write](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.write"]).
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-print"])
---
---@param ... any
function print(...) end

---
---Checks whether v1 is equal to v2, without invoking the `__eq` metamethod.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-rawequal"])
---
---@param v1 any
---@param v2 any
---@return boolean
---@nodiscard
function rawequal(v1, v2) end

---
---Gets the real value of `table[index]`, without invoking the `__index` metamethod.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-rawget"])
---
---@param table table
---@param index any
---@return any
---@nodiscard
function rawget(table, index) end

---
---Returns the length of the object `v`, without invoking the `__len` metamethod.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-rawlen"])
---
---@param v table|string
---@return integer len
---@nodiscard
function rawlen(v) end

---
---Sets the real value of `table[index]` to `value`, without using the `__newindex` metavalue. `table` must be a table, `index` any value different from `nil` and `NaN`, and `value` any Lua value.
---This function returns `table`.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-rawset"])
---
---@param table table
---@param index any
---@param value any
---@return table
function rawset(table, index, value) end

---
---If `index` is a number, returns all arguments after argument number `index`; a negative number indexes from the end (`-1` is the last argument). Otherwise, `index` must be the string `"#"`, and `select` returns the total number of extra arguments it received.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-select"])
---
---@param index integer|"#"
---@param ...   any
---@return any
---@nodiscard
function select(index, ...) end

---@version 5.1
---
---Sets the environment to be used by the given function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-setfenv"])
---
---@param f     (async fun(...):...)|integer
---@param table table
---@return function
function setfenv(f, table) end


---@class metatable
---@field __mode 'v'|'k'|'kv'|nil
---@field __metatable any|nil
---@field __tostring (fun(t):string)|nil
---@field __gc fun(t)|nil
---@field __add (fun(t1,t2):any)|nil
---@field __sub (fun(t1,t2):any)|nil
---@field __mul (fun(t1,t2):any)|nil
---@field __div (fun(t1,t2):any)|nil
---@field __mod (fun(t1,t2):any)|nil
---@field __pow (fun(t1,t2):any)|nil
---@field __unm (fun(t):any)|nil
---@field __idiv (fun(t1,t2):any)|nil
---@field __band (fun(t1,t2):any)|nil
---@field __bor (fun(t1,t2):any)|nil
---@field __bxor (fun(t1,t2):any)|nil
---@field __bnot (fun(t):any)|nil
---@field __shl (fun(t1,t2):any)|nil
---@field __shr (fun(t1,t2):any)|nil
---@field __concat (fun(t1,t2):any)|nil
---@field __len (fun(t):integer)|nil
---@field __eq (fun(t1,t2):boolean)|nil
---@field __lt (fun(t1,t2):boolean)|nil
---@field __le (fun(t1,t2):boolean)|nil
---@field __index table|(fun(t,k):any)|nil
---@field __newindex table|fun(t,k,v)|nil
---@field __call (fun(t,...):...)|nil
---@field __pairs (fun(t):((fun(t,k,v):any,any),any,any))|nil
---@field __close (fun(t,errobj):any)|nil

---
---Sets the metatable for the given table. If `metatable` is `nil`, removes the metatable of the given table. If the original metatable has a `__metatable` field, raises an error.
---
---This function returns `table`.
---
---To change the metatable of other types from Lua code, you must use the debug library ([§6.10](command:extension.lua.doc?["en-us/54/manual.html/6.10"])).
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-setmetatable"])
---
---@param table      table
---@param metatable? metatable|table
---@return table
function setmetatable(table, metatable) end

---
---When called with no `base`, `tonumber` tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then `tonumber` returns this number; otherwise, it returns `fail`.
---
---The conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see [§3.1](command:extension.lua.doc?["en-us/54/manual.html/3.1"])). The string may have leading and trailing spaces and a sign.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-tonumber"])
---
---@overload fun(e: string, base: integer):integer
---@param e any
---@return number?
---@nodiscard
function tonumber(e) end

---
---Receives a value of any type and converts it to a string in a human-readable format.
---
---If the metatable of `v` has a `__tostring` field, then `tostring` calls the corresponding value with `v` as argument, and uses the result of the call as its result. Otherwise, if the metatable of `v` has a `__name` field with a string value, `tostring` may use that string in its final result.
---
---For complete control of how numbers are converted, use [string.format](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.format"]).
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-tostring"])
---
---@param v any
---@return string
---@nodiscard
function tostring(v) end

---@alias type
---| "nil"
---| "number"
---| "string"
---| "boolean"
---| "table"
---| "function"
---| "thread"
---| "userdata"

---
---Returns the type of its only argument, coded as a string. The possible results of this function are `"nil"` (a string, not the value `nil`), `"number"`, `"string"`, `"boolean"`, `"table"`, `"function"`, `"thread"`, and `"userdata"`.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-type"])
---
---@param v any
---@return type type
---@nodiscard
function type(v) end

---
---A global variable (not a function) that holds a string containing the running Lua version.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-_VERSION"])
---
_VERSION = "Lua 5.4"

---@version >5.4
---
---Emits a warning with a message composed by the concatenation of all its arguments (which should be strings).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-warn"])
---
---@param message string
---@param ...     any
function warn(message, ...) end

---
---Calls function `f` with the given arguments in protected mode with a new message handler.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-xpcall"])
---
---@param f     async fun(...):...
---@param msgh  function
---@param arg1? any
---@param ...   any
---@return boolean success
---@return any result
---@return any ...
function xpcall(f, msgh, arg1, ...) end

---@version 5.1
---
---Returns the elements from the given `list`. This function is equivalent to
---```lua
---    return list[i], list[i+1], ···, list[j]
---```
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-unpack"])
---
---@generic T1, T2, T3, T4, T5, T6, T7, T8, T9, T10
---@param list {
--- [1]?: T1,
--- [2]?: T2,
--- [3]?: T3,
--- [4]?: T4,
--- [5]?: T5,
--- [6]?: T6,
--- [7]?: T7,
--- [8]?: T8,
--- [9]?: T9,
--- [10]?: T10,
---}
---@param i?   integer
---@param j?   integer
---@return T1, T2, T3, T4, T5, T6, T7, T8, T9, T10
---@nodiscard
function unpack(list, i, j) end

---@version 5.1
---@generic T1, T2, T3, T4, T5, T6, T7, T8, T9
---@param list {[1]: T1, [2]: T2, [3]: T3, [4]: T4, [5]: T5, [6]: T6, [7]: T7, [8]: T8, [9]: T9 }
---@return T1, T2, T3, T4, T5, T6, T7, T8, T9
---@nodiscard
function unpack(list) end
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua	
OnSetText called with text:	fx_version 'cerulean'
author 'SUP2Ak'
game 'common'
use_experimental_fxv2_oal 'yes'
repository 'https://github.com/SUP2Ak/hot-reload-fivem'
description 'Hot Reload for FiveM'
license 'MIT'
version '1.0.0'

server_only 'yes'
server_script 'dist/server.js'
dependency 'yarn'
	
Returning diffs count:	1	
OnSetText called with text:		
Returning diffs count:	0	
OnSetText called with text:	---@todo [NEW] work in progress 0.0.2 to 0.1.0

-- loadscreen 'modules/loadscreen/client/index.html' -- loadscreen
-- loadscreen_manual_shutdown "yes" -- enable manual shutdown
-- loadscreen_cursor 'yes' -- enable cursor

fx_version 'cerulean'
game 'gta5'
lua54 'yes'
use_experimental_fxv2_oal 'yes'

name 'sublime_core (fivem)'
author 'SUBLiME'
version '0.1.0 (wip)'
repository 'https://github.com/sublime-framework-cfx/sublime_core-fivem'
description 'A new modular framework for FiveM'

shared_script '@sublime_core/import.lua'
server_script 'server.lua'	
Returning diffs count:	1	
OnSetText called with text:	fx_version 'cerulean'
game 'common'
use_experimental_fxv2_oal 'yes'
lua54 'yes'

name 'oxmysql'
author 'Overextended'
version '2.11.2'
license 'LGPL-3.0-or-later'
repository 'https://github.com/overextended/oxmysql.git'
description 'FXServer to MySQL communication via node-mysql2'

dependencies {
    '/server:7290',
}

client_script 'ui.lua'
server_script 'dist/build.js'

files {
	'web/build/index.html',
	'web/build/**/*'
}

ui_page 'web/build/index.html'

provide 'mysql-async'
provide 'ghmattimysql'

convar_category 'OxMySQL' {
	'Configuration',
	{
		{ 'Connection string', 'mysql_connection_string', 'CV_STRING', 'mysql://user:password@localhost/database' },
		{ 'Debug', 'mysql_debug', 'CV_BOOL', 'false' }
	}
}
	
Found table content:	
    '/server:7290',
	
Processing item:	'/server:7290'	
Kept original item:	'/server:7290'	
Processing item:		
Found table content:	
	'web/build/index.html',
	'web/build/**/*'
	
Processing item:	'web/build/index.html'	
Kept original item:	'web/build/index.html'	
Processing item:	'web/build/**/*'	
Kept original item:	'web/build/**/*'	
Found table content:	
	'Configuration',
	{
		{ 'Connection string', 'mysql_connection_string', 'CV_STRING', 'mysql://user:password@localhost/database' 	
Processing item:	'Configuration'	
Kept original item:	'Configuration'	
Processing item:	{
		{ 'Connection string'	
Kept original item:	{
		{ 'Connection string'	
Processing item:	'mysql_connection_string'	
Kept original item:	'mysql_connection_string'	
Processing item:	'CV_STRING'	
Kept original item:	'CV_STRING'	
Processing item:	'mysql://user:password@localhost/database'	
Kept original item:	'mysql://user:password@localhost/database'	
Found table content:	 'Debug', 'mysql_debug', 'CV_BOOL', 'false' 	
Processing item:	'Debug'	
Kept original item:	'Debug'	
Processing item:	'mysql_debug'	
Kept original item:	'mysql_debug'	
Processing item:	'CV_BOOL'	
Kept original item:	'CV_BOOL'	
Processing item:	'false'	
Kept original item:	'false'	
Returning diffs count:	1	
OnSetText called with text:	local t = { .j, .m, .z }
local t2 = { .j, .m, .z }	
Found table content:	 .j, .m, .z 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Processing item:	.z	
Found field with dot. Name:	z	
Added entry:	z = true	
Creating diff. Start:	10	End:	24	
New text:	{ j = true, m = true, z = true }	
Found table content:	 .j, .m, .z 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Processing item:	.z	
Found field with dot. Name:	z	
Added entry:	z = true	
Creating diff. Start:	37	End:	51	
New text:	{ j = true, m = true, z = true }	
Returning diffs count:	2	
OnSetText called with text:	local promise = promise
local Await = Citizen.Await
local GetCurrentResourceName = GetCurrentResourceName()
local GetResourceState = GetResourceState

local function await(fn, query, parameters)
	local p = promise.new()
	fn(nil, query, parameters, function(result, error)
		if error then
			return p:reject(error)
		end

		p:resolve(result)
	end, GetCurrentResourceName, true)
	return Await(p)
end

local type = type
local queryStore = {}

local function safeArgs(query, parameters, cb, transaction)
	local queryType = type(query)

	if queryType == 'number' then
		query = queryStore[query]
	elseif transaction then
		if queryType ~= 'table' then
			error(("First argument expected table, received '%s'"):format(query))
		end
	elseif queryType ~= 'string' then
		error(("First argument expected string, received '%s'"):format(query))
	end

	if parameters then
		local paramType = type(parameters)

		if paramType ~= 'table' and paramType ~= 'function' then
			error(("Second argument expected table or function, received '%s'"):format(parameters))
		end

		if paramType == 'function' or parameters.__cfx_functionReference then
			cb = parameters
			parameters = nil
		end
	end

	if cb and parameters then
		local cbType = type(cb)

		if cbType ~= 'function' and (cbType == 'table' and not cb.__cfx_functionReference) then
			error(("Third argument expected function, received '%s'"):format(cb))
		end
	end

	return query, parameters, cb
end

local oxmysql = exports.oxmysql

local mysql_method_mt = {
	__call = function(self, query, parameters, cb)
		query, parameters, cb = safeArgs(query, parameters, cb, self.method == 'transaction')
		return oxmysql[self.method](nil, query, parameters, cb, GetCurrentResourceName, false)
	end
}

local MySQL = setmetatable(MySQL or {}, {
	__index = function(_, index)
		return function(...)
			return oxmysql[index](nil, ...)
		end
	end
})

for _, method in pairs({
	'scalar', 'single', 'query', 'insert', 'update', 'prepare', 'transaction', 'rawExecute',
}) do
	MySQL[method] = setmetatable({
		method = method,
		await = function(query, parameters)
			query, parameters = safeArgs(query, parameters, nil, method == 'transaction')
			return await(oxmysql[method], query, parameters)
		end
	}, mysql_method_mt)
end

local alias = {
	fetchAll = 'query',
	fetchScalar = 'scalar',
	fetchSingle = 'single',
	insert = 'insert',
	execute = 'update',
	transaction = 'transaction',
	prepare = 'prepare'
}

local alias_mt = {
	__index = function(self, key)
		if alias[key] then
			local method = MySQL[alias[key]]
			MySQL.Async[key] = method
			MySQL.Sync[key] = method.await
			alias[key] = nil
			return self[key]
		end
	end
}

local function addStore(query, cb)
	assert(type(query) == 'string', 'The SQL Query must be a string')

	local storeN = #queryStore + 1
	queryStore[storeN] = query

	return cb and cb(storeN) or storeN
end

MySQL.Sync = setmetatable({ store = addStore }, alias_mt)
MySQL.Async = setmetatable({ store = addStore }, alias_mt)

local function onReady(cb)
	while GetResourceState('oxmysql') ~= 'started' do
		Wait(50)
	end

	oxmysql.awaitConnection()

	return cb and cb() or true
end

MySQL.ready = setmetatable({
	await = onReady
}, {
	__call = function(_, cb)
		Citizen.CreateThreadNow(function() onReady(cb) end)
	end,
})

_ENV.MySQL = MySQL
	
Found table content:		
Found table content:	
	__call = function(self, query, parameters, cb)
		query, parameters, cb = safeArgs(query, parameters, cb, self.method == 'transaction')
		return oxmysql[self.method](nil, query, parameters, cb, GetCurrentResourceName, false)
	end
	
Processing item:	__call = function(self	
Kept original item:	__call = function(self	
Processing item:	query	
Kept original item:	query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	cb)
		query	
Kept original item:	cb)
		query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	cb = safeArgs(query	
Kept original item:	cb = safeArgs(query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	cb	
Kept original item:	cb	
Processing item:	self.method == 'transaction')
		return oxmysql[self.method](nil	
Kept original item:	self.method == 'transaction')
		return oxmysql[self.method](nil	
Processing item:	query	
Kept original item:	query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	cb	
Kept original item:	cb	
Processing item:	GetCurrentResourceName	
Kept original item:	GetCurrentResourceName	
Processing item:	false)
	end	
Kept original item:	false)
	end	
Found table content:		
Found table content:	
	__index = function(_, index)
		return function(...)
			return oxmysql[index](nil, ...)
		end
	end
	
Processing item:	__index = function(_	
Kept original item:	__index = function(_	
Processing item:	index)
		return function(...)
			return oxmysql[index](nil	
Kept original item:	index)
		return function(...)
			return oxmysql[index](nil	
Processing item:	...)
		end
	end	
Found field with dot. Name:	
Found table content:	
	'scalar', 'single', 'query', 'insert', 'update', 'prepare', 'transaction', 'rawExecute',
	
Processing item:	'scalar'	
Kept original item:	'scalar'	
Processing item:	'single'	
Kept original item:	'single'	
Processing item:	'query'	
Kept original item:	'query'	
Processing item:	'insert'	
Kept original item:	'insert'	
Processing item:	'update'	
Kept original item:	'update'	
Processing item:	'prepare'	
Kept original item:	'prepare'	
Processing item:	'transaction'	
Kept original item:	'transaction'	
Processing item:	'rawExecute'	
Kept original item:	'rawExecute'	
Processing item:		
Found table content:	
		method = method,
		await = function(query, parameters)
			query, parameters = safeArgs(query, parameters, nil, method == 'transaction')
			return await(oxmysql[method], query, parameters)
		end
		
Processing item:	method = method	
Kept original item:	method = method	
Processing item:	await = function(query	
Kept original item:	await = function(query	
Processing item:	parameters)
			query	
Kept original item:	parameters)
			query	
Processing item:	parameters = safeArgs(query	
Kept original item:	parameters = safeArgs(query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	nil	
Kept original item:	nil	
Processing item:	method == 'transaction')
			return await(oxmysql[method]	
Kept original item:	method == 'transaction')
			return await(oxmysql[method]	
Processing item:	query	
Kept original item:	query	
Processing item:	parameters)
		end	
Kept original item:	parameters)
		end	
Found table content:	
	fetchAll = 'query',
	fetchScalar = 'scalar',
	fetchSingle = 'single',
	insert = 'insert',
	execute = 'update',
	transaction = 'transaction',
	prepare = 'prepare'
	
Processing item:	fetchAll = 'query'	
Kept original item:	fetchAll = 'query'	
Processing item:	fetchScalar = 'scalar'	
Kept original item:	fetchScalar = 'scalar'	
Processing item:	fetchSingle = 'single'	
Kept original item:	fetchSingle = 'single'	
Processing item:	insert = 'insert'	
Kept original item:	insert = 'insert'	
Processing item:	execute = 'update'	
Kept original item:	execute = 'update'	
Processing item:	transaction = 'transaction'	
Kept original item:	transaction = 'transaction'	
Processing item:	prepare = 'prepare'	
Kept original item:	prepare = 'prepare'	
Found table content:	
	__index = function(self, key)
		if alias[key] then
			local method = MySQL[alias[key]]
			MySQL.Async[key] = method
			MySQL.Sync[key] = method.await
			alias[key] = nil
			return self[key]
		end
	end
	
Processing item:	__index = function(self	
Kept original item:	__index = function(self	
Processing item:	key)
		if alias[key] then
			local method = MySQL[alias[key]]
			MySQL.Async[key] = method
			MySQL.Sync[key] = method.await
			alias[key] = nil
			return self[key]
		end
	end	
Kept original item:	key)
		if alias[key] then
			local method = MySQL[alias[key]]
			MySQL.Async[key] = method
			MySQL.Sync[key] = method.await
			alias[key] = nil
			return self[key]
		end
	end	
Found table content:	 store = addStore 	
Processing item:	store = addStore	
Kept original item:	store = addStore	
Found table content:	 store = addStore 	
Processing item:	store = addStore	
Kept original item:	store = addStore	
Found table content:	
	await = onReady
	
Processing item:	await = onReady	
Kept original item:	await = onReady	
Found table content:	
	__call = function(_, cb)
		Citizen.CreateThreadNow(function() onReady(cb) end)
	end,
	
Processing item:	__call = function(_	
Kept original item:	__call = function(_	
Processing item:	cb)
		Citizen.CreateThreadNow(function() onReady(cb) end)
	end	
Kept original item:	cb)
		Citizen.CreateThreadNow(function() onReady(cb) end)
	end	
Processing item:		
Returning diffs count:	0	
OnSetText called with text:	RegisterNetEvent('oxmysql:openUi', function(data)
    SendNUIMessage({
        action = 'openUI',
        data = data
    })
    SetNuiFocus(true, true)
end)

RegisterNUICallback('exit', function(_, cb)
    cb(true)
    SetNuiFocus(false, false)
end)

RegisterNUICallback('fetchResource', function(data, cb)
    TriggerServerEvent('oxmysql:fetchResource', data)
    cb(true)
end)

RegisterNetEvent('oxmysql:loadResource', function(data)
    SendNUIMessage({
        action = 'loadResource',
        data = data
    })
end)	
Found table content:	
        action = 'openUI',
        data = data
    	
Processing item:	action = 'openUI'	
Kept original item:	action = 'openUI'	
Processing item:	data = data	
Kept original item:	data = data	
Found table content:	
        action = 'loadResource',
        data = data
    	
Processing item:	action = 'loadResource'	
Kept original item:	action = 'loadResource'	
Processing item:	data = data	
Kept original item:	data = data	
Returning diffs count:	0	
OnSetText called with text:	return {
    -- 'handlers', -- init handlers server & client
    'main', -- init main server & client
}	
Found table content:	
    -- 'handlers', -- init handlers server & client
    'main', -- init main server & client
	
Processing item:	-- 'handlers'	
Kept original item:	-- 'handlers'	
Processing item:	-- init handlers server & client
    'main'	
Kept original item:	-- init handlers server & client
    'main'	
Processing item:	-- init main server & client	
Kept original item:	-- init main server & client	
Returning diffs count:	0	
OnSetText called with text:	---@todo [NEW] work in progress 0.0.2 to 0.1.0

-- loadscreen 'modules/loadscreen/client/index.html' -- loadscreen
-- loadscreen_manual_shutdown "yes" -- enable manual shutdown
-- loadscreen_cursor 'yes' -- enable cursor

fx_version 'cerulean'
game 'gta5'
lua54 'yes'
use_experimental_fxv2_oal 'yes'

name 'sublime_core (fivem)'
author 'SUBLiME'
version '0.1.0 (wip)'
repository 'https://github.com/sublime-framework-cfx/sublime_core-fivem'
description 'A new modular framework for FiveM'

files {
    'config/modules.lua',
    'imports/**/shared.lua',
    'imports/**/client.lua',
    'import.lua',
    -- 'modules/**/shared/**',
    'modules/**/client/**',
}

shared_scripts {
    'init.lua',
    'modules/init.lua',
}	
Found table content:	
    'config/modules.lua',
    'imports/**/shared.lua',
    'imports/**/client.lua',
    'import.lua',
    -- 'modules/**/shared/**',
    'modules/**/client/**',
	
Processing item:	'config/modules.lua'	
Kept original item:	'config/modules.lua'	
Processing item:	'imports/**/shared.lua'	
Kept original item:	'imports/**/shared.lua'	
Processing item:	'imports/**/client.lua'	
Kept original item:	'imports/**/client.lua'	
Processing item:	'import.lua'	
Kept original item:	'import.lua'	
Processing item:	-- 'modules/**/shared/**'	
Kept original item:	-- 'modules/**/shared/**'	
Processing item:	'modules/**/client/**'	
Kept original item:	'modules/**/client/**'	
Processing item:		
Found table content:	
    'init.lua',
    'modules/init.lua',
	
Processing item:	'init.lua'	
Kept original item:	'init.lua'	
Processing item:	'modules/init.lua'	
Kept original item:	'modules/init.lua'	
Processing item:		
Returning diffs count:	1	
OnSetText called with text:	local mt_pvt = {
    __metatable = 'private',
    __ext = 0,
    __pack = function() return '' end,
}

---@param obj table
---@return table
local function NewInstance(self, obj)
    if obj.private then
        setmetatable(obj.private, mt_pvt)
    end

    setmetatable(obj, self)

    if self.init then obj:init() end

    if obj.export then
        self.__export[obj.export] = obj
    end

    return obj
end

---@param name string
---@param super? table
---@param exportMethod? boolean
---@return table
function sublime.class(name, super, exportMethod)
    if not name then return end
    if super or exportMethod then
        local self = {
            __name = name,
            new = NewInstance
        }

        self.__index = self

        if exportMethod and not super then
            self.__exportMethod = {}
            self.__export = {}

            setmetatable(self, {
                __newindex = function(_, key, value)
                    rawset(_, key, value)
                    self.__exportMethod[key] = true
                end
            })

            exports('GetExportMethod', function()
                return self.__exportMethod
            end)

            exports('CallExportMethod', function(name, method, ...)
                local export <const> = self.__export[name]
                return export[method](export, ...)
            end)
        end

        return super and setmetatable(self, {
            __index = super,
            __newindex = function(_, key, value)
                rawset(_, key, value)
                if type(value) == 'function' then
                    self.__exportMethod[key] = true
                end
            end
        }) or self
    else
        local self = {
            __index = name
        }

        function self.new(obj)
            if obj.private then
                setmetatable(obj.private, mt_pvt)
            end

            if self.init then obj:init() end

            return setmetatable(obj, self)
        end

        return self
    end
end

return sublime.class	
Found table content:	
    __metatable = 'private',
    __ext = 0,
    __pack = function() return '' end,
	
Processing item:	__metatable = 'private'	
Kept original item:	__metatable = 'private'	
Processing item:	__ext = 0	
Kept original item:	__ext = 0	
Processing item:	__pack = function() return '' end	
Kept original item:	__pack = function() return '' end	
Processing item:		
Found table content:	
            __name = name,
            new = NewInstance
        	
Processing item:	__name = name	
Kept original item:	__name = name	
Processing item:	new = NewInstance	
Kept original item:	new = NewInstance	
Found table content:		
Found table content:		
Found table content:	
                __newindex = function(_, key, value)
                    rawset(_, key, value)
                    self.__exportMethod[key] = true
                end
            	
Processing item:	__newindex = function(_	
Kept original item:	__newindex = function(_	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
                    rawset(_	
Kept original item:	value)
                    rawset(_	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
                    self.__exportMethod[key] = true
                end	
Kept original item:	value)
                    self.__exportMethod[key] = true
                end	
Found table content:	
            __index = super,
            __newindex = function(_, key, value)
                rawset(_, key, value)
                if type(value) == 'function' then
                    self.__exportMethod[key] = true
                end
            end
        	
Processing item:	__index = super	
Kept original item:	__index = super	
Processing item:	__newindex = function(_	
Kept original item:	__newindex = function(_	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
                rawset(_	
Kept original item:	value)
                rawset(_	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
                if type(value) == 'function' then
                    self.__exportMethod[key] = true
                end
            end	
Kept original item:	value)
                if type(value) == 'function' then
                    self.__exportMethod[key] = true
                end
            end	
Found table content:	
            __index = name
        	
Processing item:	__index = name	
Kept original item:	__index = name	
Returning diffs count:	0	
OnSetText called with text:	local sublime_core <const> = 'sublime_core'
local IsDuplicityVersion <const>, await <const> = IsDuplicityVersion, Citizen.Await
local LoadResourceFile <const> = LoadResourceFile
local GetResourceState <const> = GetResourceState
local GetGameName <const> = GetGameName
local GetCurrentResourceName <const>, AddEventHandler <const> = GetCurrentResourceName, AddEventHandler
local export = exports[sublime_core]
local service <const> = (IsDuplicityVersion() and 'server') or 'client'

-- local function FormatEvent(self, name, from)
--     return ("__sl__:%s:%s"):format(from or service, joaat(name))
-- end

if not _VERSION:find('5.4') then
    error("^1 Vous devez activer Lua 5.4 dans la resources où vous utilisez l'import, (lua54 'yes') dans votre fxmanifest!^0", 2)
end

if not GetResourceState(sublime_core):find('start') then
	error('^1sublime_core doit être lancé avant cette ressource!^0', 2)
end

local function LoadModule(self, index)
    local func, err
    local dir <const> = ('imports/%s'):format(index)
    local chunk <const> = LoadResourceFile(sublime_core, ('%s/%s.lua'):format(dir, service))
    local shared <const> = LoadResourceFile(sublime_core, ('%s/shared.lua'):format(dir))

    if chunk or shared then
        if shared then
            func, err = load(shared, ('@@%s/%s/%s'):format(sublime_core, index, 'shared'))
        else
            func, err = load(chunk, ('@@%s/%s/%s'):format(sublime_core, index, service))
        end

        if err then error(("Erreur pendant le chargement du module\n- Provenant de : %s\n- Modules : %s\n- Service : %s\n - Erreur : %s"):format(dir, index, service, err), 3) end

        local result = func()
        rawset(self, index, result)
        return self[index]
    end
end

local function CallModule(self, index, ...)
    local module = rawget(self, index)
    if not module then
        module = LoadModule(self, index)
        if not module then
            local function method(...)
                return export[index](nil, ...)
            end

            if not ... then
                self[index] = method
            end

            return method
        end
    end
    return module
end

sublime = setmetatable({
    name = sublime_core,
    service = service,
    game = GetGameName(),
    env = GetCurrentResourceName(),
    -- lang = GetConvar('sublime:locale', 'fr'),
    cache = service == 'client' and {},
    await = await,
},
{
    __index = CallModule,
    __call = CallModule
})

if sublime.service == 'client' then
    local player = {}
    setmetatable(player, {
        __index = function(self, key)
            AddEventHandler('sublime:player:set:'..key, function(value)
                self[key] = value
                return self[key]
            end)

            rawset(self, key, export:GetPlayer(key) or false)
            return self[key]
        end
    })

    _ENV.player = player
elseif sublime.service == 'server' then
    local MySQL = {}

    setmetatable(MySQL, {
        __index = function(self, key)
            local value = rawget(self, key)
            if not value then
                sublime.mysql()
                value = MySQL[key]
            end
            return value
        end
    })

    _ENV.MySQL = MySQL
end

require = sublime.require()	
Found table content:	
    name = sublime_core,
    service = service,
    game = GetGameName(),
    env = GetCurrentResourceName(),
    -- lang = GetConvar('sublime:locale', 'fr'),
    cache = service == 'client' and {	
Processing item:	name = sublime_core	
Kept original item:	name = sublime_core	
Processing item:	service = service	
Kept original item:	service = service	
Processing item:	game = GetGameName()	
Kept original item:	game = GetGameName()	
Processing item:	env = GetCurrentResourceName()	
Kept original item:	env = GetCurrentResourceName()	
Processing item:	-- lang = GetConvar('sublime:locale'	
Kept original item:	-- lang = GetConvar('sublime:locale'	
Processing item:	'fr')	
Kept original item:	'fr')	
Processing item:	cache = service == 'client' and {	
Kept original item:	cache = service == 'client' and {	
Found table content:	
    __index = CallModule,
    __call = CallModule
	
Processing item:	__index = CallModule	
Kept original item:	__index = CallModule	
Processing item:	__call = CallModule	
Kept original item:	__call = CallModule	
Found table content:		
Found table content:	
        __index = function(self, key)
            AddEventHandler('sublime:player:set:'..key, function(value)
                self[key] = value
                return self[key]
            end)

            rawset(self, key, export:GetPlayer(key) or false)
            return self[key]
        end
    	
Processing item:	__index = function(self	
Kept original item:	__index = function(self	
Processing item:	key)
            AddEventHandler('sublime:player:set:'..key	
Kept original item:	key)
            AddEventHandler('sublime:player:set:'..key	
Processing item:	function(value)
                self[key] = value
                return self[key]
            end)

            rawset(self	
Kept original item:	function(value)
                self[key] = value
                return self[key]
            end)

            rawset(self	
Processing item:	key	
Kept original item:	key	
Processing item:	export:GetPlayer(key) or false)
            return self[key]
        end	
Kept original item:	export:GetPlayer(key) or false)
            return self[key]
        end	
Found table content:		
Found table content:	
        __index = function(self, key)
            local value = rawget(self, key)
            if not value then
                sublime.mysql()
                value = MySQL[key]
            end
            return value
        end
    	
Processing item:	__index = function(self	
Kept original item:	__index = function(self	
Processing item:	key)
            local value = rawget(self	
Kept original item:	key)
            local value = rawget(self	
Processing item:	key)
            if not value then
                sublime.mysql()
                value = MySQL[key]
            end
            return value
        end	
Kept original item:	key)
            if not value then
                sublime.mysql()
                value = MySQL[key]
            end
            return value
        end	
Returning diffs count:	0	
OnSetText called with text:	---@param export string 'resourceName.methodName'
---@param ... any
---@return void | any
local function Exports(_, export, ...)
    local resourceName <const> = export:match('(.+)%..+')
    local methodName <const> = export:match('.+%.(.+)')
    return exports[resourceName][methodName](nil, ...)
end

local ExportMethod, MyClassExport = {}, {}
sublime.exports = setmetatable({}, {
    __call = Exports
})


---@param resource string resource name you have use supv.class with exportable on true
---@param name string export identifier name
---@param prototype? table if you want add prototype
---@return table
function sublime.exports.class(resource, name, prototype)
    ExportMethod[name] = {}
    setmetatable(ExportMethod[name], {
        __index = function(_, index)
            ExportMethod[name] = exports[resource]:GetExportMethod(index)
            return ExportMethod[name][index]
        end
    })

    MyClassExport[name] = {}
    local Class = MyClassExport[name]
    function Class:__index(index)
        local method = MyClassExport[name][index]

        if method then
            return function(...)
                return method(self, ...)
            end
        end

        local export = ExportMethod[name][index]

        if export then
            return function(...)
                return exports[resource]:CallExportMethod(name, index, ...)
            end
        end
    end

    return setmetatable(prototype or {}, Class)
end

return sublime.exports	
Found table content:		
Found table content:		
Found table content:		
Found table content:	
    __call = Exports
	
Processing item:	__call = Exports	
Kept original item:	__call = Exports	
Found table content:		
Found table content:	
        __index = function(_, index)
            ExportMethod[name] = exports[resource]:GetExportMethod(index)
            return ExportMethod[name][index]
        end
    	
Processing item:	__index = function(_	
Kept original item:	__index = function(_	
Processing item:	index)
            ExportMethod[name] = exports[resource]:GetExportMethod(index)
            return ExportMethod[name][index]
        end	
Kept original item:	index)
            ExportMethod[name] = exports[resource]:GetExportMethod(index)
            return ExportMethod[name][index]
        end	
Found table content:		
Found table content:		
Returning diffs count:	0	
OnSetText called with text:	local PlayerExports, PlayerObject = {}, {}
setmetatable(PlayerExports, {
    __index = function(_, index)
        print(index, 'index meta')
        PlayerExports = sublime.GetPlayerExports()
        return PlayerExports[index]
    end
})

function sublime.GetPlayerObject(source)
    local player <const> = sublime.GetPlayerData(source)
    if not player then return end
    return setmetatable(player, PlayerObject)
end

function PlayerObject:__index(index)
    local method = PlayerObject[index]
    print(method, index)
    if method then
        return function(...)
            return method(self, ...)
        end
    end

    local export = PlayerExports[index]

    if export then
        return function(...)
            return sublime.CallPlayerMethod(self.source, index, ...)
        end
    end
end

function PlayerObject:test()
    return self.source .. ' from test ' .. self.getName()
end

return sublime.GetPlayerObject	
Found table content:		
Found table content:		
Found table content:	
    __index = function(_, index)
        print(index, 'index meta')
        PlayerExports = sublime.GetPlayerExports()
        return PlayerExports[index]
    end
	
Processing item:	__index = function(_	
Kept original item:	__index = function(_	
Processing item:	index)
        print(index	
Kept original item:	index)
        print(index	
Processing item:	'index meta')
        PlayerExports = sublime.GetPlayerExports()
        return PlayerExports[index]
    end	
Kept original item:	'index meta')
        PlayerExports = sublime.GetPlayerExports()
        return PlayerExports[index]
    end	
Returning diffs count:	0	
OnSetText called with text:	local LoadResourceFile <const>, load <const> = LoadResourceFile, load

function sublime.mysql()
    local file = 'lib/MySQL.lua'
	local import = LoadResourceFile('oxmysql', file)
	local func, err = load(import, ('@@%s/%s'):format('oxmysql', file))
	if not func or err then
		return error(err or ("unable to load module '%s'"):format(file), 3)
	end

	func()
end

return sublime.mysql	
Returning diffs count:	0	
OnSetText called with text:	local function On(_, name, cb)
    AddEventHandler(name, cb)
end

sublime.on = setmetatable({}, {
    __call = On
})

function sublime.on.player(key, cb)
    AddEventHandler('sublime:cache:set:'..key, cb)
end

function sublime.on.net(key, cb)
    RegisterNetEvent(key, cb)
end	
Found table content:		
Found table content:	
    __call = On
	
Processing item:	__call = On	
Kept original item:	__call = On	
Returning diffs count:	0	
OnSetText called with text:	local LoadResourceFile <const>, IsDuplicityVersion <const>, await <const> = LoadResourceFile, IsDuplicityVersion, Citizen.Await
local sublime_core <const>, service <const> = 'sublime_core', (IsDuplicityVersion() and 'server') or 'client'

---@param name string
---@param from? string<'client' | 'server'> default is sl.service
---@return string
-- local function FormatEvent(self, name, from)
--     return ("__sl__:%s:%s"):format(from or self.service, joaat(name))
-- end

sublime = setmetatable({
    service = service, ---@type string<'client' | 'server'>
    name = sublime_core, ---@type string<'sublime_core'>
    env = sublime_core, ---@type string<'resource_name?'>
    -- hashEvent = FormatEvent,
    await = await,
    lang = GetConvar('sublime:locale', 'fr') ---@type string<'fr' | 'en' | unknown>
}, {
    __newindex = function(self, name, value)
        rawset(self, name, value)
        if type(value) == 'function' then
            exports(name, value)
        end
    end
})

local loaded = {}
package = {
    loaded = setmetatable({}, {
        __index = loaded,
        __newindex = function() end,
        __metatable = false,
    }),
    path = './?.lua;'
}

local _require = require
function require(modname)
    local module = loaded[modname]

    if not module then
        if module == false then
            error(("^1circular-dependency occurred when loading module '%s'^0"):format(modname), 2)
        end

        local success, result = pcall(_require, modname)

        if success then
            loaded[modname] = result
            return result
        end

        local modpath = modname:gsub('%.', '/')
        local paths = { string.strsplit(';', package.path) }
        for i = 1, #paths do
            local scriptPath = paths[i]:gsub('%?', modpath):gsub('%.+%/+', '')
            local resourceFile = LoadResourceFile(sublime_core, scriptPath)
            if resourceFile then
                loaded[modname] = false
                scriptPath = ('@@%s/%s'):format(sublime_core, scriptPath)

                local chunk, err = load(resourceFile, scriptPath)

                if err or not chunk then
                    loaded[modname] = nil
                    return error(err or ("unable to load module '%s'"):format(modname), 3)
                end

                module = chunk(modname) or true
                loaded[modname] = module

                return module
            end
        end

        return error(("module '%s' not found"):format(modname), 2)
    end

    return module
end

-- require('imports.locales.shared').init() ---@load translation

if sublime.service == 'server' then
    sublime.players = {}

    print([[
^6#####################################################################################
^6#^2                _       _   _                                                      ^6#
^6#^2               | |     | | (_)                                                     ^6#
^6#^2  ___   _   _  | |__   | |  _   _ __ ___     ___        ___    ___    _ __    ___  ^6#
^6#^2 / __| | | | | | '_ \  | | | | | '_ ` _ \   / _ \      / __|  / _ \  | '__|  / _ \ ^6#
^6#^2 \__ \ | |_| | | |_) | | | | | | | | | | | |  __/^7  _ ^2 | (__  | (_) | | |    |  __/ ^6#
^6#^2 |___/  \__,_| |_.__/  |_| |_| |_| |_| |_|  \___|^7 (_)^2  \___|  \___/  |_|     \___| ^6#
^6#                                                                                   ^6#
^6#^2        ^7Github: ^4https://github.com/sublime-framework-cfx/sublime_core-fivem        ^6#
^6#####################################################################################
]])
    -- require('imports.version.server').check('github', nil, 500) ---@load version check && check update
    -- require('imports.mysql.server').init() ---@load oxmysql
end	
Found table content:	
    service = service, ---@type string<'client' | 'server'>
    name = sublime_core, ---@type string<'sublime_core'>
    env = sublime_core, ---@type string<'resource_name?'>
    -- hashEvent = FormatEvent,
    await = await,
    lang = GetConvar('sublime:locale', 'fr') ---@type string<'fr' | 'en' | unknown>
	
Processing item:	service = service	
Kept original item:	service = service	
Processing item:	---@type string<'client' | 'server'>
    name = sublime_core	
Kept original item:	---@type string<'client' | 'server'>
    name = sublime_core	
Processing item:	---@type string<'sublime_core'>
    env = sublime_core	
Kept original item:	---@type string<'sublime_core'>
    env = sublime_core	
Processing item:	---@type string<'resource_name?'>
    -- hashEvent = FormatEvent	
Kept original item:	---@type string<'resource_name?'>
    -- hashEvent = FormatEvent	
Processing item:	await = await	
Kept original item:	await = await	
Processing item:	lang = GetConvar('sublime:locale'	
Kept original item:	lang = GetConvar('sublime:locale'	
Processing item:	'fr') ---@type string<'fr' | 'en' | unknown>	
Kept original item:	'fr') ---@type string<'fr' | 'en' | unknown>	
Found table content:	
    __newindex = function(self, name, value)
        rawset(self, name, value)
        if type(value) == 'function' then
            exports(name, value)
        end
    end
	
Processing item:	__newindex = function(self	
Kept original item:	__newindex = function(self	
Processing item:	name	
Kept original item:	name	
Processing item:	value)
        rawset(self	
Kept original item:	value)
        rawset(self	
Processing item:	name	
Kept original item:	name	
Processing item:	value)
        if type(value) == 'function' then
            exports(name	
Kept original item:	value)
        if type(value) == 'function' then
            exports(name	
Processing item:	value)
        end
    end	
Kept original item:	value)
        end
    end	
Found table content:		
Found table content:	
    loaded = setmetatable({	
Processing item:	loaded = setmetatable({	
Kept original item:	loaded = setmetatable({	
Found table content:	
        __index = loaded,
        __newindex = function() end,
        __metatable = false,
    	
Processing item:	__index = loaded	
Kept original item:	__index = loaded	
Processing item:	__newindex = function() end	
Kept original item:	__newindex = function() end	
Processing item:	__metatable = false	
Kept original item:	__metatable = false	
Processing item:		
Found table content:	 string.strsplit(';', package.path) 	
Processing item:	string.strsplit(';'	
Kept original item:	string.strsplit(';'	
Processing item:	package.path)	
Kept original item:	package.path)	
Found table content:		
Returning diffs count:	1	
OnSetText called with text:	-- credit: ox_lib <https://github.com/overextended/ox_lib/blob/master/imports/require/shared.lua>
if lib then 
    sublime.require = lib.require
    return sublime.require 
end

local loaded = {}

package = {
    loaded = setmetatable({}, {
        __index = loaded,
        __newindex = function()  end,
        __metatable = false,
    }),
    path = './?.lua;'
}

local _require = require

---Loads the given module inside the current resource, returning any values returned by the file or `true` when `nil`.
---@param modname string
---@return unknown?
function sublime.require(modname)
    if type(modname) ~= 'string' then return end

    local module = loaded[modname]

    if not module then
        if module == false then
            error(("^1circular-dependency occurred when loading module '%s'^0"):format(modname), 2)
        end

        if not modname:find('^@') then
            local success, result = pcall(_require, modname)

            if success then
                loaded[modname] = result
                return result
            end

            local modpath = modname:gsub('%.', '/')

            for path in package.path:gmatch('[^;]+') do
                local scriptPath = path:gsub('?', modpath):gsub('%.+%/+', '')
                local resourceFile = LoadResourceFile(sublime.env, scriptPath)

                if resourceFile then
                    loaded[modname] = false
                    scriptPath = ('@@%s/%s'):format(sublime.env, scriptPath)

                    local chunk, err = load(resourceFile, scriptPath)

                    if err or not chunk then
                        loaded[modname] = nil
                        return error(err or ("unable to load module '%s'"):format(modname), 3)
                    end

                    module = chunk(modname) or true
                    loaded[modname] = module

                    return module
                end
            end
        else
            local rss, dir = modname:gsub('%.', '/'):match('^(.-)/(.+)$')

            if not rss or not dir then return error('Invalid path format: '..modname, 2) end
            rss, dir = rss:gsub('^@', ''), dir..'.lua'
            local chunk = LoadResourceFile(rss, dir)

            if chunk then
                local scriptPath = ('@@%s/%s'):format(rss, dir)
                local func, err = load(chunk, scriptPath)

                if err or not func then
                    return error(err or ("unable to load module '%s'"):format(modname), 2)
                end

                module = func(modname) or true
                loaded[modname] = module

                return module
            end
        end

        return error(("module '%s' not found"):format(modname), 2)
    end

    return module
end

return sublime.require

--[[ old method, not working with zones module because need require (glm) to calculate vector
    
local moduleLoaded = {}

local function load_module(path)
    if moduleLoaded[path] then
        return moduleLoaded[path]
    end

    local module_path = ("%s.lua"):format(path)
    local module_file = LoadResourceFile(GetCurrentResourceName(), module_path)
    if not module_file then
        error("Impossible de chargé le module : "..path)
    end

    moduleLoaded[path] = load(module_file)()
    return moduleLoaded[path]
end

local function call_module(path)
    path = path:gsub('%.', '/')
    local module = load_module(path)
    if not module then
        return error("Le module n'a pas charger : "..path)
    end
    return module
end

return {
    load = call_module
}
--]]	
Found table content:		
Found table content:	
    loaded = setmetatable({	
Processing item:	loaded = setmetatable({	
Kept original item:	loaded = setmetatable({	
Found table content:	
        __index = loaded,
        __newindex = function()  end,
        __metatable = false,
    	
Processing item:	__index = loaded	
Kept original item:	__index = loaded	
Processing item:	__newindex = function()  end	
Kept original item:	__newindex = function()  end	
Processing item:	__metatable = false	
Kept original item:	__metatable = false	
Processing item:		
Found table content:		
Found table content:	
    load = call_module
	
Processing item:	load = call_module	
Kept original item:	load = call_module	
Returning diffs count:	1	
OnSetText called with text:	local mt_pvt, class = {
    __metatable = 'private',
    __ext = 0,
    __pack = function() return '' end,
}, {}

---@param prototype table?
---@return { new: fun(obj): table }
function class.new(prototype)
    local self = { __index = prototype }

    function self.new(obj)
        if obj.private then
            setmetatable(obj.private, mt_pvt)
        end

        return setmetatable(obj, self)
    end

    return self
end

return class	
Found table content:	
    __metatable = 'private',
    __ext = 0,
    __pack = function() return '' end,
	
Processing item:	__metatable = 'private'	
Kept original item:	__metatable = 'private'	
Processing item:	__ext = 0	
Kept original item:	__ext = 0	
Processing item:	__pack = function() return '' end	
Kept original item:	__pack = function() return '' end	
Processing item:		
Found table content:		
Found table content:	 new: fun(obj): table 	
Processing item:	new: fun(obj): table	
Kept original item:	new: fun(obj): table	
Found table content:	 __index = prototype 	
Processing item:	__index = prototype	
Kept original item:	__index = prototype	
Returning diffs count:	0	
OnSetText called with text:	if not sublime or not sublime.service then return error("Cannot load init modules", 3) end
local folders = require 'config.modules'

for i = 1, #folders do
    local folder <const> = folders[i]
    local files <const> = require(('modules.%s.index'):format(folder))

    if files.shared then
        local t <const> = files.shared
        for j = 1, #t do
            local file <const> = t[j]
            require(('modules.%s.%s.%s'):format(folder, 'shared', file))
        end
    end

    if files[sublime.service] then
        local t <const> = files[sublime.service]
        for j = 1, #t do
            local file <const> = t[j]
            require(('modules.%s.%s.%s'):format(folder, sublime.service, file))
        end
    end
end

folders = nil	
Returning diffs count:	0	
OnSetText called with text:	return {
    client = {
        'player',
    },

    server = {
        'players',
    },
}	
Found table content:	
    client = {
        'player',
    	
Processing item:	client = {
        'player'	
Kept original item:	client = {
        'player'	
Processing item:		
Found table content:	
        'players',
    	
Processing item:	'players'	
Kept original item:	'players'	
Processing item:		
Returning diffs count:	0	
OnSetText called with text:	local player = {}

---@param key string
---@param value any
---@param force? 'ignore' | boolean
function player:set(key, value, force)
    if not self[key] or self[key] ~= value or force then
        self[key] = value
        if force and force == 'ignore' then return end
        TriggerEvent('sublime:player:set:'..key, value)
    end
end

---@param coords vec3
---@return number
function player:distance(coords)
    return #(self.coords - coords)
end

CreateThread(function()
    player:set('id', PlayerId())
    player:set('serverid', GetPlayerServerId(player.id))

    while true do
        player:set('ped', PlayerPedId())
        player:set('coords', GetEntityCoords(player.ped), 'ignore')
        player:set('vec4', vec4(player.coords.x, player.coords.y, player.coords.z, GetEntityHeading(player.ped)), 'ignore')

        local hasWeapon <const>, weaponHash <const> = GetCurrentPedWeapon(player.ped, true)
        player:set('weapon', hasWeapon and weaponHash or false)

        local vehicle <const> = GetVehiclePedIsIn(player.ped, false)
        if vehicle > 0 then
            player:set('vehicle', vehicle)

            if not player.seat or GetPedInVehicleSeat(vehicle, player.seat) ~= player.ped then
                for i = -1, GetVehicleMaxNumberOfPassengers(vehicle) - 1 do
                    if GetPedInVehicleSeat(vehicle, i) == player.ped then
                        player:set('seat', i)
                        break
                    end
                end
            end
        else
            player:set('vehicle', false)
            player:set('seat', false)
        end
    
        Wait(500)
    end
end)

---@param key string
---@return any
function sublime.GetPlayer(key)
    return player[key] or key == 'vehicle' and false or false
end

_ENV.player = player	
Found table content:		
Returning diffs count:	0	
OnSetText called with text:	GlobalState.playersCount = 0
local PlayerExports = {}
local PlayerObject = setmetatable({}, {
    __newindex = function(self, key, value)
        rawset(self, key, value)
        print(key, value)
        PlayerExports[key] = true
    end
})

function sublime.GetPlayerExports()
    return PlayerExports
end

---@param id integer
---@param method string
---@param ... unknown?
---@return unknown?
function sublime.CallPlayerMethod(id, method, ...)
    print(id, method)
    local player = sublime.GetPlayerData(id)
    return PlayerObject[method](player, ...)
end

---@param source integer
function sublime.GetPlayerData(source)
    return sublime.players[source]
end

function sublime.RemovePlayerObject(source)
    local player = sublime.players[source]
    if player then
        sublime.players[source] = nil
        player = nil
        collectgarbage()
        TriggerEvent('sublime:player:remove', source)
    end
end

function PlayerObject:init()
    print(self.source, 'was initialized')
end

function PlayerObject:setName(name)
    self.private.name = name
end

function PlayerObject:getName()
    return self.private.name
end

---@param key string support nested keys separated by dots '.', exemple: 'metadata.name'
---@return unknown?
function PlayerObject:get(key)
    assert(key and type(key) == 'string', 'Invalid key: '..key)

    if key:find('.') then
        local keys <const> = {('.'):strsplit(key)}
        local value = self.private
        for i = 1, #keys do
            local key <const> = keys[i]
            value = value[key]
            if not value then
                return nil
            end
        end

        return value
    end

    return self.private[key]
end

local class <const> = require 'modules.handlers.shared.class'
return class.new(PlayerObject)

-----------------
--[[
function PlayerObject:init()
    GlobalState.playersCount += 1
end

function PlayerObject:__gc() -- destructor
    GlobalState.playersCount -= 1
end

function PlayerObject:save()
    -- save player in database
    return self
end

function PlayerObject:set(key, value, replicated)
    local _key, count = key:gsub('%W', '')

    if count > 0 then
        warn('Invalid key: '..key)
        key = _key
    end

    self.private.metadata[key] = value

    if replicated then
        --TriggerClientEvent('sublime:player:set', self.source, key, value)
    end
end

function PlayerObject:get(key)
    local metadata <const> = self.private.metadata
    if not key then return metadata end

    local _key, count = key:gsub('%W', '')

    if count > 0 then
        warn('Invalid key: '..key)
        key = _key
    end

    return metadata[key]
end

function PlayerObject:setName(name)
    self.private.name = name
    return self
end

function PlayerObject:getName()
    return self.private.name
end

---@param source integer
---@param data table
---@return table
function sublime.CreatePlayerObject(source, data)
    if sublime.players[source] then
        return sublime.players[source]
    end

    data.metadata = data.metadata or {}
    data.group = data.group or 'user'
    data.databaseId = data.databaseId or 0 ---@todo: get from database id
    data.licenses = data.licenses or {} ---@todo: use license manager

    local object = { 
        source = source,
        export = 'player.'..source,
        private = data
    }

    local player <const> = PlayerObject:new(object)
    sublime.players[source] = player
    --sublime.playersDatabaseId[player.private.databaseId] = source

    return player
end

---@param source integer
function sublime.RemovePlayerObject(source)
    local player = sublime.players[source]
    if player then
        sublime.players[source] = nil
        player = nil
        collectgarbage()
        TriggerEvent('sublime:player:remove', source)
    end
end

---@param source integer
function sublime.GetPlayerData(source)
    return sublime.players[source]
end]]	
Found table content:		
Found table content:		
Found table content:	
    __newindex = function(self, key, value)
        rawset(self, key, value)
        print(key, value)
        PlayerExports[key] = true
    end
	
Processing item:	__newindex = function(self	
Kept original item:	__newindex = function(self	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
        rawset(self	
Kept original item:	value)
        rawset(self	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
        print(key	
Kept original item:	value)
        print(key	
Processing item:	value)
        PlayerExports[key] = true
    end	
Kept original item:	value)
        PlayerExports[key] = true
    end	
Found table content:	('.'):strsplit(key)	
Processing item:	('.'):strsplit(key)	
Kept original item:	('.'):strsplit(key)	
Found table content:		
Found table content:		
Found table content:	 
        source = source,
        export = 'player.'..source,
        private = data
    	
Processing item:	source = source	
Kept original item:	source = source	
Processing item:	export = 'player.'..source	
Kept original item:	export = 'player.'..source	
Processing item:	private = data	
Kept original item:	private = data	
Returning diffs count:	0	
OnSetText called with text:	local PlayerClass = require 'modules.main.server.class.player'

---@param source integer
---@param data table
---@return table
function sublime.CreatePlayerObject(source, data)
    if sublime.players[source] then
        return sublime.players[source]
    end

    data.metadata = data.metadata or {}
    data.group = data.group or 'user'
    data.databaseId = data.databaseId or 0
    data.licenses = data.licenses or {}

    local object = { 
        source = source,
        private = data
    }

    local player <const> = PlayerClass.new(object)
    sublime.players[source] = player
    --sublime.playersDatabaseId[player.private.databaseId] = source

    return player
end

sublime.CreatePlayerObject(1, { name = 'John', age = 20 })
local p = sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })

p:init()


RegisterCommand('hh', function()
    local player2 = sublime.GetPlayerData(2)
    print(player2?.source)
    if not player2 then
        print('Player not found')
        return
    end

    print(player2:getName())
end)	
Found table content:		
Found table content:		
Found table content:	 
        source = source,
        private = data
    	
Processing item:	source = source	
Kept original item:	source = source	
Processing item:	private = data	
Kept original item:	private = data	
Found table content:	 name = 'John', age = 20 	
Processing item:	name = 'John'	
Kept original item:	name = 'John'	
Processing item:	age = 20	
Kept original item:	age = 20	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Returning diffs count:	1	
OnSetText called with text:	--This empty file causes the scheduler.lua to load clientside
--scheduler.lua when loaded inside the sessionmanager resource currently manages remote callbacks.
--Without this, callbacks will only work server->client and not client->server.	
Returning diffs count:	0	
OnSetText called with text:	-- This resource is part of the default Cfx.re asset pack (cfx-server-data)
-- Altering or recreating for local use only is strongly discouraged.

version '1.0.0'
author 'Cfx.re <root@cfx.re>'
description 'Handles the "host lock" for non-OneSync servers. Do not disable.'
repository 'https://github.com/citizenfx/cfx-server-data'

fx_version 'cerulean'
games { 'gta4', 'gta5' }

server_script 'server/host_lock.lua'
client_script 'client/empty.lua'	
Found table content:	 'gta4', 'gta5' 	
Processing item:	'gta4'	
Kept original item:	'gta4'	
Processing item:	'gta5'	
Kept original item:	'gta5'	
Returning diffs count:	1	
OnSetText called with text:	-- This resource is part of the default Cfx.re asset pack (cfx-server-data)
-- Altering or recreating for local use only is strongly discouraged.

version '1.0.0'
author 'Cfx.re <root@cfx.re>'
description 'Builds resources with webpack. To learn more: https://webpack.js.org'
repository 'https://github.com/citizenfx/cfx-server-data'

dependency 'yarn'
server_script 'webpack_builder.js'

fx_version 'adamant'
game 'common'
	
Returning diffs count:	1	
OnSetText called with text:	-- whitelist c2s events
RegisterServerEvent('hostingSession')
RegisterServerEvent('hostedSession')

-- event handler for pre-session 'acquire'
local currentHosting
local hostReleaseCallbacks = {}

-- TODO: add a timeout for the hosting lock to be held
-- TODO: add checks for 'fraudulent' conflict cases of hosting attempts (typically whenever the host can not be reached)
AddEventHandler('hostingSession', function()
    -- if the lock is currently held, tell the client to await further instruction
    if currentHosting then
        TriggerClientEvent('sessionHostResult', source, 'wait')

        -- register a callback for when the lock is freed
        table.insert(hostReleaseCallbacks, function()
            TriggerClientEvent('sessionHostResult', source, 'free')
        end)

        return
    end

    -- if the current host was last contacted less than a second ago
    if GetHostId() then
        if GetPlayerLastMsg(GetHostId()) < 1000 then
            TriggerClientEvent('sessionHostResult', source, 'conflict')

            return
        end
    end

    hostReleaseCallbacks = {}

    currentHosting = source

    TriggerClientEvent('sessionHostResult', source, 'go')

    -- set a timeout of 5 seconds
    SetTimeout(5000, function()
        if not currentHosting then
            return
        end

        currentHosting = nil

        for _, cb in ipairs(hostReleaseCallbacks) do
            cb()
        end
    end)
end)

AddEventHandler('hostedSession', function()
    -- check if the client is the original locker
    if currentHosting ~= source then
        -- TODO: drop client as they're clearly lying
        print(currentHosting, '~=', source)
        return
    end

    -- free the host lock (call callbacks and remove the lock value)
    for _, cb in ipairs(hostReleaseCallbacks) do
        cb()
    end

    currentHosting = nil
end)

EnableEnhancedHostSupport(true)	
Found table content:		
Found table content:		
Returning diffs count:	0	
OnSetText called with text:	-- This resource is part of the default Cfx.re asset pack (cfx-server-data)
-- Altering or recreating for local use only is strongly discouraged.

version '1.0.0'
author 'Cfx.re <root@cfx.re>'
description 'Builds resources with yarn. To learn more: https://classic.yarnpkg.com'
repository 'https://github.com/citizenfx/cfx-server-data'

fx_version 'adamant'
game 'common'

server_script 'yarn_builder.js'
	
Returning diffs count:	1	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    c

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    c.

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    c

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    p

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    pr

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    pri

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    prin

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    print

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    print()

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    print(c)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    print(c.)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    print(c.?)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    print(c.)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    print(c)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    print(c?)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    print(c?;)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    print(c?)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	2	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    print(c?.)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	3	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    print(c?.n)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	3	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    print(c?.na)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	3	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    print(c?.name)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	3	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    print(c?.name.)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	3	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    print(c?.name)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	3	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    print(c?.name?)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	3	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    print(c?.name?;)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	3	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    print(c?.name?)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	3	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    print(c?.name?.)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	4	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    print(c?.name?.T)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	4	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , , X  }
    print(c?.name?.T)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , , X  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:	X	
Kept original item:	X	
Creating diff. Start:	696	End:	757	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true, X }	
Returning diffs count:	4	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    print(c?.name?.T)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	4	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , , x  }
    print(c?.name?.T)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , , x  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:	x	
Kept original item:	x	
Creating diff. Start:	696	End:	757	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true, x }	
Returning diffs count:	4	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    print(c?.name?.T)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	4	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , , x  }
    print(c?.name?.T)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , , x  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:	x	
Kept original item:	x	
Creating diff. Start:	696	End:	757	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true, x }	
Returning diffs count:	4	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    print(c?.name?.T)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	4	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , , c  }
    print(c?.name?.T)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , , c  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:	c	
Kept original item:	c	
Creating diff. Start:	696	End:	757	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true, c }	
Returning diffs count:	4	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,   }
    print(c?.name?.T)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,   	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	4	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , , ,  }
    print(c?.name?.T)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , , ,  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Creating diff. Start:	696	End:	757	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	4	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , , ,  }
    print(c?.name?.T)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , , ,  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Processing item:		
Creating diff. Start:	696	End:	757	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	4	
OnSetText called with text:	---@meta coroutine

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine"])
---
---@class coroutinelib
coroutine = {}

---
---Creates a new coroutine, with body `f`. `f` must be a function. Returns this new coroutine, an object with type `"thread"`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.create"])
---
---@param f async fun(...):...
---@return thread
---@nodiscard
function coroutine.create(f) end

---
---Returns true when the coroutine `co` can yield. The default for `co` is the running coroutine.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.isyieldable"])
---
---@param co? thread
---@return boolean
---@nodiscard
function coroutine.isyieldable(co) end

---@version >5.4
---
---Closes coroutine `co` , closing all its pending to-be-closed variables and putting the coroutine in a dead state.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.close"])
---
---@param co thread
---@return boolean noerror
---@return any errorobject
function coroutine.close(co) end

---
---Starts or continues the execution of coroutine `co`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.resume"])
---
---@param co    thread
---@param val1? any
---@return boolean success
---@return any ...
function coroutine.resume(co, val1, ...) end

---
---Returns the running coroutine plus a boolean, true when the running coroutine is the main one.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.running"])
---
---@return thread running
---@return boolean ismain
---@nodiscard
function coroutine.running() end

---
---Returns the status of coroutine `co`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.status"])
---
---@param co thread
---@return
---| '"running"'   # Is running.
---| '"suspended"' # Is suspended or not started.
---| '"normal"'    # Is active but not running.
---| '"dead"'      # Has finished or stopped with an error.
---@nodiscard
function coroutine.status(co) end

---
---Creates a new coroutine, with body `f`; `f` must be a function. Returns a function that resumes the coroutine each time it is called.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.wrap"])
---
---@param f async fun(...):...
---@return fun(...):...
---@nodiscard
function coroutine.wrap(f) end

---
---Suspends the execution of the calling coroutine.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-coroutine.yield"])
---
---@async
---@return any ...
function coroutine.yield(...) end

return coroutine
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/coroutine.lua	
OnSetText called with text:	---@meta package

---
---Loads the given module, returns any value returned by the searcher(`true` when `nil`). Besides that value, also returns as a second result the loader data returned by the searcher, which indicates how `require` found the module. (For instance, if the module came from a file, this loader data is the file path.)
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-require"])
---
---@param modname string
---@return unknown
---@return unknown loaderdata
function require(modname) end

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package"])
---
---@class packagelib
---
---The path used by `require` to search for a C loader.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.cpath"])
---
---@field cpath     string
---
---A table used by `require` to control which modules are already loaded.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.loaded"])
---
---@field loaded    table
---
---The path used by `require` to search for a Lua loader.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.path"])
---
---@field path      string
---
---A table to store loaders for specific modules.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.preload"])
---
---@field preload   table
package = {}

---
---A string describing some compile-time configurations for packages.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.config"])
---
package.config = [[
/
;
?
!
-]]

---@version <5.1
---
---A table used by `require` to control how to load modules.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.loaders"])
---
package.loaders = {}

---
---Dynamically links the host program with the C library `libname`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.loadlib"])
---
---@param libname string
---@param funcname string
---@return any
function package.loadlib(libname, funcname) end

---
---A table used by `require` to control how to load modules.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.searchers"])
---
---@version >5.2
package.searchers = {}

---
---Searches for the given `name` in the given `path`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.searchpath"])
---
---@version >5.2,JIT
---@param name string
---@param path string
---@param sep? string
---@param rep? string
---@return string? filename
---@return string? errmsg
---@nodiscard
function package.searchpath(name, path, sep, rep) end

---
---Sets a metatable for `module` with its `__index` field referring to the global environment, so that this module inherits values from the global environment. To be used as an option to function `module` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-package.seeall"])
---
---@version <5.1
---@param module table
function package.seeall(module) end

return package
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/package.lua	
OnSetText called with text:	---@meta string

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string"])
---
---@class stringlib
string = {}

---
---Returns the internal numeric codes of the characters `s[i], s[i+1], ..., s[j]`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.byte"])
---
---@param s  string|number
---@param i? integer
---@param j? integer
---@return integer ...
---@nodiscard
function string.byte(s, i, j) end

---
---Returns a string with length equal to the number of arguments, in which each character has the internal numeric code equal to its corresponding argument.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.char"])
---
---@param byte integer
---@param ... integer
---@return string
---@nodiscard
function string.char(byte, ...) end

---
---Returns a string containing a binary representation (a *binary chunk*) of the given function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.dump"])
---
---@param f      async fun(...):...
---@param strip? boolean
---@return string
---@nodiscard
function string.dump(f, strip) end

---
---Miss locale <string.find>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.find"])
---
---@param s       string|number
---@param pattern string|number
---@param init?   integer
---@param plain?  boolean
---@return integer|nil start
---@return integer|nil end
---@return any|nil ... captured
---@nodiscard
function string.find(s, pattern, init, plain) end

---
---Returns a formatted version of its variable number of arguments following the description given in its first argument.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.format"])
---
---@param s string|number
---@param ... any
---@return string
---@nodiscard
function string.format(s, ...) end

---
---Miss locale <string.gmatch>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.gmatch"])
---
---@param s       string|number
---@param pattern string|number
---@param init?   integer
---@return fun():string, ...
function string.gmatch(s, pattern, init) end

---
---Miss locale <string.gsub>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.gsub"])
---
---@param s       string|number
---@param pattern string|number
---@param repl    string|number|table|function
---@param n?      integer
---@return string
---@return integer count
function string.gsub(s, pattern, repl, n) end

---
---Returns its length.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.len"])
---
---@param s string|number
---@return integer
---@nodiscard
function string.len(s) end

---
---Returns a copy of this string with all uppercase letters changed to lowercase.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.lower"])
---
---@param s string|number
---@return string
---@nodiscard
function string.lower(s) end

---
---Miss locale <string.match>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.match"])
---
---@param s       string|number
---@param pattern string|number
---@param init?   integer
---@return any ...
---@nodiscard
function string.match(s, pattern, init) end

---@version >5.3
---
---Miss locale <string.pack>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.pack"])
---
---@param fmt string
---@param v1  string|number
---@param v2? string|number
---@param ... string|number
---@return string binary
---@nodiscard
function string.pack(fmt, v1, v2, ...) end

---@version >5.3
---
---Miss locale <string.packsize>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.packsize"])
---
---@param fmt string
---@return integer
---@nodiscard
function string.packsize(fmt) end

---
---Returns a string that is the concatenation of `n` copies of the string `s` separated by the string `sep`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.rep"])
---
---@param s    string|number
---@param n    integer
---@param sep? string|number
---@return string
---@nodiscard
function string.rep(s, n, sep) end

---
---Returns a string that is the string `s` reversed.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.reverse"])
---
---@param s string|number
---@return string
---@nodiscard
function string.reverse(s) end

---
---Returns the substring of the string that starts at `i` and continues until `j`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.sub"])
---
---@param s  string|number
---@param i  integer
---@param j? integer
---@return string
---@nodiscard
function string.sub(s, i, j) end

---@version >5.3
---
---Returns the values packed in string according to the format string `fmt` (see [§6.4.2](command:extension.lua.doc?["en-us/54/manual.html/6.4.2"])) .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.unpack"])
---
---@param fmt  string
---@param s    string
---@param pos? integer
---@return any ...
---@nodiscard
function string.unpack(fmt, s, pos) end

---
---Returns a copy of this string with all lowercase letters changed to uppercase.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.upper"])
---
---@param s string|number
---@return string
---@nodiscard
function string.upper(s) end

return string
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/string.lua	
OnSetText called with text:	---@meta _

---@class unknown
---@class any
---@class nil
---@class boolean
---@class true: boolean
---@class false: boolean
---@class number
---@class integer: number
---@class thread
---@class table<K, V>: { [K]: V }
---@class string: stringlib
---@class userdata
---@class lightuserdata
---@class function
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/builtin.lua	
OnSetText called with text:	---@meta debug

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug"])
---
---@class debuglib
debug = {}

---@class debuginfo
---@field name            string
---@field namewhat        string
---@field source          string
---@field short_src       string
---@field linedefined     integer
---@field lastlinedefined integer
---@field what            string
---@field currentline     integer
---@field istailcall      boolean
---@field nups            integer
---@field nparams         integer
---@field isvararg        boolean
---@field func            function
---@field ftransfer       integer
---@field ntransfer       integer
---@field activelines     table

---
---Enters an interactive mode with the user, running each string that the user enters.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.debug"])
---
function debug.debug() end

---@version 5.1
---
---Returns the environment of object `o` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getfenv"])
---
---@param o any
---@return table
---@nodiscard
function debug.getfenv(o) end

---
---Returns the current hook settings of the thread.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.gethook"])
---
---@param co? thread
---@return function hook
---@return string mask
---@return integer count
---@nodiscard
function debug.gethook(co) end

---@alias infowhat string
---|+"n"     # `name` and `namewhat`
---|+"S"     # `source`, `short_src`, `linedefined`, `lastlinedefined`, and `what`
---|+"l"     # `currentline`
---|+"t"     # `istailcall`
---|+"u" # `nups`, `nparams`, and `isvararg`
---|+"f"     # `func`
---|+"r"     # `ftransfer` and `ntransfer`
---|+"L"     # `activelines`

---
---Returns a table with information about a function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getinfo"])
---
---@overload fun(f: integer|function, what?: infowhat):debuginfo
---@param thread thread
---@param f      integer|async fun(...):...
---@param what?  infowhat
---@return debuginfo
---@nodiscard
function debug.getinfo(thread, f, what) end

---
---Returns the name and the value of the local variable with index `local` of the function at level `f` of the stack.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getlocal"])
---
---@overload fun(f: integer|async fun(...):..., index: integer):string, any
---@param thread  thread
---@param f       integer|async fun(...):...
---@param index   integer
---@return string name
---@return any    value
---@nodiscard
function debug.getlocal(thread, f, index) end

---
---Returns the metatable of the given value.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getmetatable"])
---
---@param object any
---@return table metatable
---@nodiscard
function debug.getmetatable(object) end

---
---Returns the registry table.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getregistry"])
---
---@return table
---@nodiscard
function debug.getregistry() end

---
---Returns the name and the value of the upvalue with index `up` of the function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getupvalue"])
---
---@param f  async fun(...):...
---@param up integer
---@return string name
---@return any    value
---@nodiscard
function debug.getupvalue(f, up) end

---
---Returns the `n`-th user value associated
---to the userdata `u` plus a boolean,
---`false` if the userdata does not have that value.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.getuservalue"])
---
---@param u  userdata
---@param n? integer
---@return any
---@return boolean
---@nodiscard
function debug.getuservalue(u, n) end

---
---### **Deprecated in `Lua 5.4.2`**
---
---Sets a new limit for the C stack. This limit controls how deeply nested calls can go in Lua, with the intent of avoiding a stack overflow.
---
---In case of success, this function returns the old limit. In case of error, it returns `false`.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setcstacklimit"])
---
---@deprecated
---@param limit integer
---@return integer|boolean
function debug.setcstacklimit(limit) end

---
---Sets the environment of the given `object` to the given `table` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setfenv"])
---
---@version 5.1
---@generic T
---@param object T
---@param env    table
---@return T object
function debug.setfenv(object, env) end

---@alias hookmask string
---|+"c" # Calls hook when Lua calls a function.
---|+"r" # Calls hook when Lua returns from a function.
---|+"l" # Calls hook when Lua enters a new line of code.

---
---Sets the given function as a hook.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.sethook"])
---
---@overload fun(hook: (async fun(...):...), mask: hookmask, count?: integer)
---@overload fun(thread: thread):...
---@overload fun(...):...
---@param thread thread
---@param hook   async fun(...):...
---@param mask   hookmask
---@param count? integer
function debug.sethook(thread, hook, mask, count) end

---
---Assigns the `value` to the local variable with index `local` of the function at `level` of the stack.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setlocal"])
---
---@overload fun(level: integer, index: integer, value: any):string
---@param thread thread
---@param level  integer
---@param index  integer
---@param value  any
---@return string name
function debug.setlocal(thread, level, index, value) end

---
---Sets the metatable for the given value to the given table (which can be `nil`).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setmetatable"])
---
---@generic T
---@param value T
---@param meta? table
---@return T value
function debug.setmetatable(value, meta) end

---
---Assigns the `value` to the upvalue with index `up` of the function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setupvalue"])
---
---@param f     async fun(...):...
---@param up    integer
---@param value any
---@return string name
function debug.setupvalue(f, up, value) end

---
---Sets the given `value` as
---the `n`-th user value associated to the given `udata`.
---`udata` must be a full userdata.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.setuservalue"])
---
---@param udata userdata
---@param value any
---@param n?    integer
---@return userdata udata
function debug.setuservalue(udata, value, n) end

---
---Returns a string with a traceback of the call stack. The optional message string is appended at the beginning of the traceback.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.traceback"])
---
---@overload fun(message?: any, level?: integer): string
---@param thread   thread
---@param message? any
---@param level?   integer
---@return string  message
---@nodiscard
function debug.traceback(thread, message, level) end

---@version >5.2, JIT
---
---Returns a unique identifier (as a light userdata) for the upvalue numbered `n` from the given function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.upvalueid"])
---
---@param f async fun(...):...
---@param n integer
---@return lightuserdata id
---@nodiscard
function debug.upvalueid(f, n) end

---@version >5.2, JIT
---
---Make the `n1`-th upvalue of the Lua closure `f1` refer to the `n2`-th upvalue of the Lua closure `f2`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-debug.upvaluejoin"])
---
---@param f1 async fun(...):...
---@param n1 integer
---@param f2 async fun(...):...
---@param n2 integer
function debug.upvaluejoin(f1, n1, f2, n2) end

return debug
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/debug.lua	
OnSetText called with text:	---@meta os

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os"])
---
---@class oslib
os = {}

---
---Returns an approximation of the amount in seconds of CPU time used by the program.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.clock"])
---
---@return number
---@nodiscard
function os.clock() end

---@class osdate:osdateparam
---
---four digits
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.year"])
---
---@field year  integer|string
---
---1-12
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.month"])
---
---@field month integer|string
---
---1-31
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.day"])
---
---@field day   integer|string
---
---0-23
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.hour"])
---
---@field hour  integer|string
---
---0-59
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.min"])
---
---@field min   integer|string
---
---0-61
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.sec"])
---
---@field sec   integer|string
---
---weekday, 1–7, Sunday is 1
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.wday"])
---
---@field wday  integer|string
---
---day of the year, 1–366
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.yday"])
---
---@field yday  integer|string
---
---daylight saving flag, a boolean
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.isdst"])
---
---@field isdst boolean

---
---Returns a string or a table containing date and time, formatted according to the given string `format`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.date"])
---
---@param format? string
---@param time?   integer
---@return string|osdate
---@nodiscard
function os.date(format, time) end

---
---Returns the difference, in seconds, from time `t1` to time `t2`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.difftime"])
---
---@param t2 integer
---@param t1 integer
---@return integer
---@nodiscard
function os.difftime(t2, t1) end

---
---Passes `command` to be executed by an operating system shell.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.execute"])
---
---@param command? string
---@return boolean?  suc
---@return exitcode? exitcode
---@return integer?  code
function os.execute(command) end

---
---Calls the ISO C function `exit` to terminate the host program.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.exit"])
---
---@param code?  boolean|integer
---@param close? boolean
function os.exit(code, close) end

---
---Returns the value of the process environment variable `varname`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.getenv"])
---
---@param varname string
---@return string?
---@nodiscard
function os.getenv(varname) end

---
---Deletes the file with the given name.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.remove"])
---
---@param filename string
---@return boolean suc
---@return string? errmsg
function os.remove(filename) end

---
---Renames the file or directory named `oldname` to `newname`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.rename"])
---
---@param oldname string
---@param newname string
---@return boolean suc
---@return string? errmsg
function os.rename(oldname, newname) end

---@alias localecategory
---|>"all"
---| "collate"
---| "ctype"
---| "monetary"
---| "numeric"
---| "time"

---
---Sets the current locale of the program.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.setlocale"])
---
---@param locale    string|nil
---@param category? localecategory
---@return string localecategory
function os.setlocale(locale, category) end

---@class osdateparam
---
---four digits
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.year"])
---
---@field year  integer|string
---
---1-12
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.month"])
---
---@field month integer|string
---
---1-31
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.day"])
---
---@field day   integer|string
---
---0-23
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.hour"])
---
---@field hour  (integer|string)?
---
---0-59
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.min"])
---
---@field min   (integer|string)?
---
---0-61
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.sec"])
---
---@field sec   (integer|string)?
---
---weekday, 1–7, Sunday is 1
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.wday"])
---
---@field wday  (integer|string)?
---
---day of the year, 1–366
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.yday"])
---
---@field yday  (integer|string)?
---
---daylight saving flag, a boolean
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-osdate.isdst"])
---
---@field isdst boolean?

---
---Returns the current time when called without arguments, or a time representing the local date and time specified by the given table.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.time"])
---
---@param date? osdateparam
---@return integer
---@nodiscard
function os.time(date) end

---
---Returns a string with a file name that can be used for a temporary file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-os.tmpname"])
---
---@return string
---@nodiscard
function os.tmpname() end

return os
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/os.lua	
OnSetText called with text:	---@meta io

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io"])
---
---@class iolib
---
---standard input.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.stdin"])
---
---@field stdin  file*
---
---standard output.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.stdout"])
---
---@field stdout file*
---
---standard error.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.stderr"])
---
---@field stderr file*
io = {}

---@alias openmode
---|>"r"   # Read mode.
---| "w"   # Write mode.
---| "a"   # Append mode.
---| "r+"  # Update mode, all previous data is preserved.
---| "w+"  # Update mode, all previous data is erased.
---| "a+"  # Append update mode, previous data is preserved, writing is only allowed at the end of file.
---| "rb"  # Read mode. (in binary mode.)
---| "wb"  # Write mode. (in binary mode.)
---| "ab"  # Append mode. (in binary mode.)
---| "r+b" # Update mode, all previous data is preserved. (in binary mode.)
---| "w+b" # Update mode, all previous data is erased. (in binary mode.)
---| "a+b" # Append update mode, previous data is preserved, writing is only allowed at the end of file. (in binary mode.)

---
---Close `file` or default output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.close"])
---
---@param file? file*
---@return boolean?  suc
---@return exitcode? exitcode
---@return integer?  code
function io.close(file) end

---
---Saves any written data to default output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.flush"])
---
function io.flush() end

---
---Sets `file` as the default input file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.input"])
---
---@overload fun():file*
---@param file string|file*
function io.input(file) end

---
---------
---```lua
---for c in io.lines(filename, ...) do
---    body
---end
---```
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.lines"])
---
---@param filename string?
---@param ... readmode
---@return fun():any, ...
function io.lines(filename, ...) end

---
---Opens a file, in the mode specified in the string `mode`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.open"])
---
---@param filename string
---@param mode?    openmode
---@return file*?
---@return string? errmsg
---@nodiscard
function io.open(filename, mode) end

---
---Sets `file` as the default output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.output"])
---
---@overload fun():file*
---@param file string|file*
function io.output(file) end

---@alias popenmode
---| "r" # Read data from this program by `file`.
---| "w" # Write data to this program by `file`.

---
---Starts program prog in a separated process.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.popen"])
---
---@param prog  string
---@param mode? popenmode
---@return file*?
---@return string? errmsg
function io.popen(prog, mode) end

---
---Reads the `file`, according to the given formats, which specify what to read.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.read"])
---
---@param ... readmode
---@return any
---@return any ...
---@nodiscard
function io.read(...) end

---
---In case of success, returns a handle for a temporary file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.tmpfile"])
---
---@return file*
---@nodiscard
function io.tmpfile() end

---@alias filetype
---| "file"        # Is an open file handle.
---| "closed file" # Is a closed file handle.
---| `nil`         # Is not a file handle.

---
---Checks whether `obj` is a valid file handle.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.type"])
---
---@param file file*
---@return filetype
---@nodiscard
function io.type(file) end

---
---Writes the value of each of its arguments to default output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.write"])
---
---@return file*
---@return string? errmsg
function io.write(...) end

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file"])
---
---@class file*
local file = {}

---@alias readmode integer|string
---| "n"  # Reads a numeral and returns it as number.
---| "a"  # Reads the whole file.
---|>"l"  # Reads the next line skipping the end of line.
---| "L"  # Reads the next line keeping the end of line.

---@alias exitcode "exit"|"signal"

---
---Close `file`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:close"])
---
---@return boolean?  suc
---@return exitcode? exitcode
---@return integer?  code
function file:close() end

---
---Saves any written data to `file`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:flush"])
---
function file:flush() end

---
---------
---```lua
---for c in file:lines(...) do
---    body
---end
---```
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:lines"])
---
---@param ... readmode
---@return fun():any, ...
function file:lines(...) end

---
---Reads the `file`, according to the given formats, which specify what to read.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:read"])
---
---@param ... readmode
---@return any
---@return any ...
---@nodiscard
function file:read(...) end

---@alias seekwhence
---| "set" # Base is beginning of the file.
---|>"cur" # Base is current position.
---| "end" # Base is end of file.

---
---Sets and gets the file position, measured from the beginning of the file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:seek"])
---
---@param whence? seekwhence
---@param offset? integer
---@return integer offset
---@return string? errmsg
function file:seek(whence, offset) end

---@alias vbuf
---| "no"   # Output operation appears immediately.
---| "full" # Performed only when the buffer is full.
---| "line" # Buffered until a newline is output.

---
---Sets the buffering mode for an output file.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:setvbuf"])
---
---@param mode vbuf
---@param size? integer
function file:setvbuf(mode, size) end

---
---Writes the value of each of its arguments to `file`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-file:write"])
---
---@param ... string|number
---@return file*?
---@return string? errmsg
function file:write(...) end

return io
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/io.lua	
OnSetText called with text:	---@meta table

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table"])
---
---@class tablelib
table = {}

---
---Given a list where all elements are strings or numbers, returns the string `list[i]..sep..list[i+1] ··· sep..list[j]`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.concat"])
---
---@param list table
---@param sep? string
---@param i?   integer
---@param j?   integer
---@return string
---@nodiscard
function table.concat(list, sep, i, j) end

---
---Inserts element `value` at position `pos` in `list`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.insert"])
---
---@overload fun(list: table, value: any)
---@param list table
---@param pos integer
---@param value any
function table.insert(list, pos, value) end

---@version <5.1
---
---Returns the largest positive numerical index of the given table, or zero if the table has no positive numerical indices.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.maxn"])
---
---@param table table
---@return integer
---@nodiscard
function table.maxn(table) end

---@version >5.3, JIT
---
---Moves elements from table `a1` to table `a2`.
---```lua
---a2[t],··· =
---a1[f],···,a1[e]
---return a2
---```
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.move"])
---
---@param a1  table
---@param f   integer
---@param e   integer
---@param t   integer
---@param a2? table
---@return table a2
function table.move(a1, f, e, t, a2) end

---@version >5.2, JIT
---
---Returns a new table with all arguments stored into keys `1`, `2`, etc. and with a field `"n"` with the total number of arguments.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.pack"])
---
---@return table
---@nodiscard
function table.pack(...) end

---
---Removes from `list` the element at position `pos`, returning the value of the removed element.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.remove"])
---
---@param list table
---@param pos? integer
---@return any
function table.remove(list, pos) end

---
---Sorts list elements in a given order, *in-place*, from `list[1]` to `list[#list]`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.sort"])
---
---@generic T
---@param list T[]
---@param comp? fun(a: T, b: T):boolean
function table.sort(list, comp) end

---@version >5.2, JIT
---
---Returns the elements from the given list. This function is equivalent to
---```lua
---    return list[i], list[i+1], ···, list[j]
---```
---By default, `i` is `1` and `j` is `#list`.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.unpack"])
---
---@generic T1, T2, T3, T4, T5, T6, T7, T8, T9, T10
---@param list {
--- [1]?: T1,
--- [2]?: T2,
--- [3]?: T3,
--- [4]?: T4,
--- [5]?: T5,
--- [6]?: T6,
--- [7]?: T7,
--- [8]?: T8,
--- [9]?: T9,
--- [10]?: T10,
---}
---@param i?   integer
---@param j?   integer
---@return T1, T2, T3, T4, T5, T6, T7, T8, T9, T10
---@nodiscard
function table.unpack(list, i, j) end

---@version <5.1, JIT
---
---Executes the given f over all elements of table. For each element, f is called with the index and respective value as arguments. If f returns a non-nil value, then the loop is broken, and this value is returned as the final value of foreach.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.foreach"])
---
---@generic T
---@param list any
---@param callback fun(key: string, value: any):T|nil
---@return T|nil
---@deprecated
function table.foreach(list, callback) end

---@version <5.1, JIT
---
---Executes the given f over the numerical indices of table. For each index, f is called with the index and respective value as arguments. Indices are visited in sequential order, from 1 to n, where n is the size of the table. If f returns a non-nil value, then the loop is broken and this value is returned as the result of foreachi.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.foreachi"])
---
---@generic T
---@param list any
---@param callback fun(key: string, value: any):T|nil
---@return T|nil
---@deprecated
function table.foreachi(list, callback) end

---@version <5.1, JIT
---
---Returns the number of elements in the table. This function is equivalent to `#list`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-table.getn"])
---
---@generic T
---@param list T[]
---@return integer
---@nodiscard
---@deprecated
function table.getn(list) end

return table
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/table.lua	
OnSetText called with text:	---@meta math

---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math"])
---
---@class mathlib
---
---A value larger than any other numeric value.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.huge"])
---
---@field huge       number
---
---Miss locale <math.maxinteger>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.maxinteger"])
---
---@field maxinteger integer
---
---Miss locale <math.mininteger>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.mininteger"])
---
---@field mininteger integer
---
---The value of *π*.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.pi"])
---
---@field pi         number
math = {}

---
---Returns the absolute value of `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.abs"])
---
---@generic Number: number
---@param x Number
---@return Number
---@nodiscard
function math.abs(x) end

---
---Returns the arc cosine of `x` (in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.acos"])
---
---@param x number
---@return number
---@nodiscard
function math.acos(x) end

---
---Returns the arc sine of `x` (in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.asin"])
---
---@param x number
---@return number
---@nodiscard
function math.asin(x) end

---
---Returns the arc tangent of `y/x` (in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.atan"])
---
---@param y  number
---@param x? number
---@return number
---@nodiscard
function math.atan(y, x) end

---@version <5.2
---
---Returns the arc tangent of `y/x` (in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.atan2"])
---
---@param y number
---@param x number
---@return number
---@nodiscard
function math.atan2(y, x) end

---
---Returns the smallest integral value larger than or equal to `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.ceil"])
---
---@param x number
---@return integer
---@nodiscard
function math.ceil(x) end

---
---Returns the cosine of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.cos"])
---
---@param x number
---@return number
---@nodiscard
function math.cos(x) end

---@version <5.2
---
---Returns the hyperbolic cosine of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.cosh"])
---
---@param x number
---@return number
---@nodiscard
function math.cosh(x) end

---
---Converts the angle `x` from radians to degrees.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.deg"])
---
---@param x number
---@return number
---@nodiscard
function math.deg(x) end

---
---Returns the value `e^x` (where `e` is the base of natural logarithms).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.exp"])
---
---@param x number
---@return number
---@nodiscard
function math.exp(x) end

---
---Returns the largest integral value smaller than or equal to `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.floor"])
---
---@param x number
---@return integer
---@nodiscard
function math.floor(x) end

---
---Returns the remainder of the division of `x` by `y` that rounds the quotient towards zero.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.fmod"])
---
---@param x number
---@param y number
---@return number
---@nodiscard
function math.fmod(x, y) end

---@version <5.2
---
---Decompose `x` into tails and exponents. Returns `m` and `e` such that `x = m * (2 ^ e)`, `e` is an integer and the absolute value of `m` is in the range [0.5, 1) (or zero when `x` is zero).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.frexp"])
---
---@param x number
---@return number m
---@return number e
---@nodiscard
function math.frexp(x) end

---@version <5.2
---
---Returns `m * (2 ^ e)` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.ldexp"])
---
---@param m number
---@param e number
---@return number
---@nodiscard
function math.ldexp(m, e) end

---
---Returns the logarithm of `x` in the given base.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.log"])
---
---@param x     number
---@param base? integer
---@return number
---@nodiscard
function math.log(x, base) end

---@version <5.1
---
---Returns the base-10 logarithm of x.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.log10"])
---
---@param x number
---@return number
---@nodiscard
function math.log10(x) end

---
---Returns the argument with the maximum value, according to the Lua operator `<`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.max"])
---
---@generic Number: number
---@param x Number
---@param ... Number
---@return Number
---@nodiscard
function math.max(x, ...) end

---
---Returns the argument with the minimum value, according to the Lua operator `<`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.min"])
---
---@generic Number: number
---@param x Number
---@param ... Number
---@return Number
---@nodiscard
function math.min(x, ...) end

---
---Returns the integral part of `x` and the fractional part of `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.modf"])
---
---@param x number
---@return integer
---@return number
---@nodiscard
function math.modf(x) end

---@version <5.2
---
---Returns `x ^ y` .
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.pow"])
---
---@param x number
---@param y number
---@return number
---@nodiscard
function math.pow(x, y) end

---
---Converts the angle `x` from degrees to radians.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.rad"])
---
---@param x number
---@return number
---@nodiscard
function math.rad(x) end

---
---* `math.random()`: Returns a float in the range [0,1).
---* `math.random(n)`: Returns a integer in the range [1, n].
---* `math.random(m, n)`: Returns a integer in the range [m, n].
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.random"])
---
---@overload fun():number
---@overload fun(m: integer):integer
---@param m integer
---@param n integer
---@return integer
---@nodiscard
function math.random(m, n) end

---
---* `math.randomseed(x, y)`: Concatenate `x` and `y` into a 128-bit `seed` to reinitialize the pseudo-random generator.
---* `math.randomseed(x)`: Equate to `math.randomseed(x, 0)` .
---* `math.randomseed()`: Generates a seed with a weak attempt for randomness.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.randomseed"])
---
---@param x? integer
---@param y? integer
function math.randomseed(x, y) end

---
---Returns the sine of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.sin"])
---
---@param x number
---@return number
---@nodiscard
function math.sin(x) end

---@version <5.2
---
---Returns the hyperbolic sine of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.sinh"])
---
---@param x number
---@return number
---@nodiscard
function math.sinh(x) end

---
---Returns the square root of `x`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.sqrt"])
---
---@param x number
---@return number
---@nodiscard
function math.sqrt(x) end

---
---Returns the tangent of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.tan"])
---
---@param x number
---@return number
---@nodiscard
function math.tan(x) end

---@version <5.2
---
---Returns the hyperbolic tangent of `x` (assumed to be in radians).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.tanh"])
---
---@param x number
---@return number
---@nodiscard
function math.tanh(x) end

---@version >5.3
---
---Miss locale <math.tointeger>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.tointeger"])
---
---@param x any
---@return integer?
---@nodiscard
function math.tointeger(x) end

---@version >5.3
---
---Miss locale <math.type>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.type"])
---
---@param x any
---@return
---| '"integer"'
---| '"float"'
---| 'nil'
---@nodiscard
function math.type(x) end

---@version >5.3
---
---Miss locale <math.ult>
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-math.ult"])
---
---@param m integer
---@param n integer
---@return boolean
---@nodiscard
function math.ult(m, n) end

return math
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/math.lua	
OnSetText called with text:	---@meta utf8

---@version >5.3
---
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8"])
---
---@class utf8lib
---
---The pattern which matches exactly one UTF-8 byte sequence, assuming that the subject is a valid UTF-8 string.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.charpattern"])
---
---@field charpattern string
utf8 = {}

---
---Receives zero or more integers, converts each one to its corresponding UTF-8 byte sequence and returns a string with the concatenation of all these sequences.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.char"])
---
---@param code integer
---@param ... integer
---@return string
---@nodiscard
function utf8.char(code, ...) end

---
---Returns values so that the construction
---```lua
---for p, c in utf8.codes(s) do
---    body
---end
---```
---will iterate over all UTF-8 characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.codes"])
---
---@param s    string
---@param lax? boolean
---@return fun(s: string, p: integer):integer, integer
function utf8.codes(s, lax) end

---
---Returns the codepoints (as integers) from all characters in `s` that start between byte position `i` and `j` (both included).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.codepoint"])
---
---@param s    string
---@param i?   integer
---@param j?   integer
---@param lax? boolean
---@return integer code
---@return integer ...
---@nodiscard
function utf8.codepoint(s, i, j, lax) end

---
---Returns the number of UTF-8 characters in string `s` that start between positions `i` and `j` (both inclusive).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.len"])
---
---@param s    string
---@param i?   integer
---@param j?   integer
---@param lax? boolean
---@return integer?
---@return integer? errpos
---@nodiscard
function utf8.len(s, i, j, lax) end

---
---Returns the position (in bytes) where the encoding of the `n`-th character of `s` (counting from position `i`) starts.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-utf8.offset"])
---
---@param s string
---@param n integer
---@param i? integer
---@return integer p
---@nodiscard
function utf8.offset(s, n, i) end

return utf8
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/utf8.lua	
OnSetText called with text:	---@meta _

---
---Command-line arguments of Lua Standalone.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-arg"])
---
---@type string[]
arg = {}

---
---Raises an error if the value of its argument v is false (i.e., `nil` or `false`); otherwise, returns all its arguments. In case of error, `message` is the error object; when absent, it defaults to `"assertion failed!"`
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-assert"])
---
---@generic T
---@param v? T
---@param message? any
---@param ... any
---@return T
---@return any ...
function assert(v, message, ...) end

---@alias gcoptions
---|>"collect"      # Performs a full garbage-collection cycle.
---| "stop"         # Stops automatic execution.
---| "restart"      # Restarts automatic execution.
---| "count"        # Returns the total memory in Kbytes.
---| "step"         # Performs a garbage-collection step.
---| "isrunning"    # Returns whether the collector is running.
---| "incremental"  # Change the collector mode to incremental.
---| "generational" # Change the collector mode to generational.

---
---This function is a generic interface to the garbage collector. It performs different functions according to its first argument, `opt`.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-collectgarbage"])
---
---@param opt? gcoptions
---@param ... any
---@return any
function collectgarbage(opt, ...) end

---
---Opens the named file and executes its content as a Lua chunk. When called without arguments, `dofile` executes the content of the standard input (`stdin`). Returns all values returned by the chunk. In case of errors, `dofile` propagates the error to its caller. (That is, `dofile` does not run in protected mode.)
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-dofile"])
---
---@param filename? string
---@return any ...
function dofile(filename) end

---
---Terminates the last protected function called and returns message as the error object.
---
---Usually, `error` adds some information about the error position at the beginning of the message, if the message is a string.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-error"])
---
---@param message any
---@param level?  integer
function error(message, level) end

---
---A global variable (not a function) that holds the global environment (see [§2.2](command:extension.lua.doc?["en-us/54/manual.html/2.2"])). Lua itself does not use this variable; changing its value does not affect any environment, nor vice versa.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-_G"])
---
---@class _G
_G = {}

---@version 5.1
---
---Returns the current environment in use by the function. `f` can be a Lua function or a number that specifies the function at that stack level.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-getfenv"])
---
---@param f? integer|async fun(...):...
---@return table
---@nodiscard
function getfenv(f) end

---
---If object does not have a metatable, returns nil. Otherwise, if the object's metatable has a __metatable field, returns the associated value. Otherwise, returns the metatable of the given object.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-getmetatable"])
---
---@param object any
---@return table metatable
---@nodiscard
function getmetatable(object) end

---
---Returns three values (an iterator function, the table `t`, and `0`) so that the construction
---```lua
---    for i,v in ipairs(t) do body end
---```
---will iterate over the key–value pairs `(1,t[1]), (2,t[2]), ...`, up to the first absent index.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-ipairs"])
---
---@generic T: table, V
---@param t T
---@return fun(table: V[], i?: integer):integer, V
---@return T
---@return integer i
function ipairs(t) end

---@alias loadmode
---| "b"  # Only binary chunks.
---| "t"  # Only text chunks.
---|>"bt" # Both binary and text.

---
---Loads a chunk.
---
---If `chunk` is a string, the chunk is this string. If `chunk` is a function, `load` calls it repeatedly to get the chunk pieces. Each call to `chunk` must return a string that concatenates with previous results. A return of an empty string, `nil`, or no value signals the end of the chunk.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-load"])
---
---@param chunk      string|function
---@param chunkname? string
---@param mode?      loadmode
---@param env?       table
---@return function?
---@return string?   error_message
---@nodiscard
function load(chunk, chunkname, mode, env) end

---
---Loads a chunk from file `filename` or from the standard input, if no file name is given.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-loadfile"])
---
---@param filename? string
---@param mode?     loadmode
---@param env?      table
---@return function?
---@return string?  error_message
---@nodiscard
function loadfile(filename, mode, env) end

---@version 5.1
---
---Loads a chunk from the given string.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-loadstring"])
---
---@param text       string
---@param chunkname? string
---@return function?
---@return string?   error_message
---@nodiscard
function loadstring(text, chunkname) end

---@version 5.1
---@param proxy boolean|table|userdata
---@return userdata
---@nodiscard
function newproxy(proxy) end

---@version 5.1
---
---Creates a module.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-module"])
---
---@param name string
---@param ...  any
function module(name, ...) end

---
---Allows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. A call to `next` returns the next index of the table and its associated value. When called with `nil` as its second argument, `next` returns an initial index and its associated value. When called with the last index, or with `nil` in an empty table, `next` returns `nil`. If the second argument is absent, then it is interpreted as `nil`. In particular, you can use `next(t)` to check whether a table is empty.
---
---The order in which the indices are enumerated is not specified, *even for numeric indices*. (To traverse a table in numerical order, use a numerical `for`.)
---
---The behavior of `next` is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may set existing fields to nil.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-next"])
---
---@generic K, V
---@param table table<K, V>
---@param index? K
---@return K?
---@return V?
---@nodiscard
function next(table, index) end

---
---If `t` has a metamethod `__pairs`, calls it with t as argument and returns the first three results from the call.
---
---Otherwise, returns three values: the [next](command:extension.lua.doc?["en-us/54/manual.html/pdf-next"]) function, the table `t`, and `nil`, so that the construction
---```lua
---    for k,v in pairs(t) do body end
---```
---will iterate over all key–value pairs of table `t`.
---
---See function [next](command:extension.lua.doc?["en-us/54/manual.html/pdf-next"]) for the caveats of modifying the table during its traversal.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-pairs"])
---
---@generic T: table, K, V
---@param t T
---@return fun(table: table<K, V>, index?: K):K, V
---@return T
function pairs(t) end

---
---Calls the function `f` with the given arguments in *protected mode*. This means that any error inside `f` is not propagated; instead, `pcall` catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, `pcall` also returns all results from the call, after this first result. In case of any error, `pcall` returns `false` plus the error object.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-pcall"])
---
---@param f     async fun(...):...
---@param arg1? any
---@param ...   any
---@return boolean success
---@return any result
---@return any ...
function pcall(f, arg1, ...) end

---
---Receives any number of arguments and prints their values to `stdout`, converting each argument to a string following the same rules of [tostring](command:extension.lua.doc?["en-us/54/manual.html/pdf-tostring"]).
---The function print is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use [string.format](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.format"]) and [io.write](command:extension.lua.doc?["en-us/54/manual.html/pdf-io.write"]).
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-print"])
---
---@param ... any
function print(...) end

---
---Checks whether v1 is equal to v2, without invoking the `__eq` metamethod.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-rawequal"])
---
---@param v1 any
---@param v2 any
---@return boolean
---@nodiscard
function rawequal(v1, v2) end

---
---Gets the real value of `table[index]`, without invoking the `__index` metamethod.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-rawget"])
---
---@param table table
---@param index any
---@return any
---@nodiscard
function rawget(table, index) end

---
---Returns the length of the object `v`, without invoking the `__len` metamethod.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-rawlen"])
---
---@param v table|string
---@return integer len
---@nodiscard
function rawlen(v) end

---
---Sets the real value of `table[index]` to `value`, without using the `__newindex` metavalue. `table` must be a table, `index` any value different from `nil` and `NaN`, and `value` any Lua value.
---This function returns `table`.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-rawset"])
---
---@param table table
---@param index any
---@param value any
---@return table
function rawset(table, index, value) end

---
---If `index` is a number, returns all arguments after argument number `index`; a negative number indexes from the end (`-1` is the last argument). Otherwise, `index` must be the string `"#"`, and `select` returns the total number of extra arguments it received.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-select"])
---
---@param index integer|"#"
---@param ...   any
---@return any
---@nodiscard
function select(index, ...) end

---@version 5.1
---
---Sets the environment to be used by the given function.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-setfenv"])
---
---@param f     (async fun(...):...)|integer
---@param table table
---@return function
function setfenv(f, table) end


---@class metatable
---@field __mode 'v'|'k'|'kv'|nil
---@field __metatable any|nil
---@field __tostring (fun(t):string)|nil
---@field __gc fun(t)|nil
---@field __add (fun(t1,t2):any)|nil
---@field __sub (fun(t1,t2):any)|nil
---@field __mul (fun(t1,t2):any)|nil
---@field __div (fun(t1,t2):any)|nil
---@field __mod (fun(t1,t2):any)|nil
---@field __pow (fun(t1,t2):any)|nil
---@field __unm (fun(t):any)|nil
---@field __idiv (fun(t1,t2):any)|nil
---@field __band (fun(t1,t2):any)|nil
---@field __bor (fun(t1,t2):any)|nil
---@field __bxor (fun(t1,t2):any)|nil
---@field __bnot (fun(t):any)|nil
---@field __shl (fun(t1,t2):any)|nil
---@field __shr (fun(t1,t2):any)|nil
---@field __concat (fun(t1,t2):any)|nil
---@field __len (fun(t):integer)|nil
---@field __eq (fun(t1,t2):boolean)|nil
---@field __lt (fun(t1,t2):boolean)|nil
---@field __le (fun(t1,t2):boolean)|nil
---@field __index table|(fun(t,k):any)|nil
---@field __newindex table|fun(t,k,v)|nil
---@field __call (fun(t,...):...)|nil
---@field __pairs (fun(t):((fun(t,k,v):any,any),any,any))|nil
---@field __close (fun(t,errobj):any)|nil

---
---Sets the metatable for the given table. If `metatable` is `nil`, removes the metatable of the given table. If the original metatable has a `__metatable` field, raises an error.
---
---This function returns `table`.
---
---To change the metatable of other types from Lua code, you must use the debug library ([§6.10](command:extension.lua.doc?["en-us/54/manual.html/6.10"])).
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-setmetatable"])
---
---@param table      table
---@param metatable? metatable|table
---@return table
function setmetatable(table, metatable) end

---
---When called with no `base`, `tonumber` tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then `tonumber` returns this number; otherwise, it returns `fail`.
---
---The conversion of strings can result in integers or floats, according to the lexical conventions of Lua (see [§3.1](command:extension.lua.doc?["en-us/54/manual.html/3.1"])). The string may have leading and trailing spaces and a sign.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-tonumber"])
---
---@overload fun(e: string, base: integer):integer
---@param e any
---@return number?
---@nodiscard
function tonumber(e) end

---
---Receives a value of any type and converts it to a string in a human-readable format.
---
---If the metatable of `v` has a `__tostring` field, then `tostring` calls the corresponding value with `v` as argument, and uses the result of the call as its result. Otherwise, if the metatable of `v` has a `__name` field with a string value, `tostring` may use that string in its final result.
---
---For complete control of how numbers are converted, use [string.format](command:extension.lua.doc?["en-us/54/manual.html/pdf-string.format"]).
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-tostring"])
---
---@param v any
---@return string
---@nodiscard
function tostring(v) end

---@alias type
---| "nil"
---| "number"
---| "string"
---| "boolean"
---| "table"
---| "function"
---| "thread"
---| "userdata"

---
---Returns the type of its only argument, coded as a string. The possible results of this function are `"nil"` (a string, not the value `nil`), `"number"`, `"string"`, `"boolean"`, `"table"`, `"function"`, `"thread"`, and `"userdata"`.
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-type"])
---
---@param v any
---@return type type
---@nodiscard
function type(v) end

---
---A global variable (not a function) that holds a string containing the running Lua version.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-_VERSION"])
---
_VERSION = "Lua 5.4"

---@version >5.4
---
---Emits a warning with a message composed by the concatenation of all its arguments (which should be strings).
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-warn"])
---
---@param message string
---@param ...     any
function warn(message, ...) end

---
---Calls function `f` with the given arguments in protected mode with a new message handler.
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-xpcall"])
---
---@param f     async fun(...):...
---@param msgh  function
---@param arg1? any
---@param ...   any
---@return boolean success
---@return any result
---@return any ...
function xpcall(f, msgh, arg1, ...) end

---@version 5.1
---
---Returns the elements from the given `list`. This function is equivalent to
---```lua
---    return list[i], list[i+1], ···, list[j]
---```
---
---
---[View documents](command:extension.lua.doc?["en-us/54/manual.html/pdf-unpack"])
---
---@generic T1, T2, T3, T4, T5, T6, T7, T8, T9, T10
---@param list {
--- [1]?: T1,
--- [2]?: T2,
--- [3]?: T3,
--- [4]?: T4,
--- [5]?: T5,
--- [6]?: T6,
--- [7]?: T7,
--- [8]?: T8,
--- [9]?: T9,
--- [10]?: T10,
---}
---@param i?   integer
---@param j?   integer
---@return T1, T2, T3, T4, T5, T6, T7, T8, T9, T10
---@nodiscard
function unpack(list, i, j) end

---@version 5.1
---@generic T1, T2, T3, T4, T5, T6, T7, T8, T9
---@param list {[1]: T1, [2]: T2, [3]: T3, [4]: T4, [5]: T5, [6]: T6, [7]: T7, [8]: T8, [9]: T9 }
---@return T1, T2, T3, T4, T5, T6, T7, T8, T9
---@nodiscard
function unpack(list) end
	
Ignoring file:	file:///c%3A/Users/SUP2Ak/.vscode/extensions/sumneko.lua-3.14.0-win32-x64/server/meta/Lua%205.4%20en-us%20utf8/basic.lua	
OnSetText called with text:	fx_version 'cerulean'
author 'SUP2Ak'
game 'common'
use_experimental_fxv2_oal 'yes'
repository 'https://github.com/SUP2Ak/hot-reload-fivem'
description 'Hot Reload for FiveM'
license 'MIT'
version '1.0.0'

server_only 'yes'
server_script 'dist/server.js'
dependency 'yarn'
	
Returning diffs count:	1	
OnSetText called with text:	---@todo [NEW] work in progress 0.0.2 to 0.1.0

-- loadscreen 'modules/loadscreen/client/index.html' -- loadscreen
-- loadscreen_manual_shutdown "yes" -- enable manual shutdown
-- loadscreen_cursor 'yes' -- enable cursor

fx_version 'cerulean'
game 'gta5'
lua54 'yes'
use_experimental_fxv2_oal 'yes'

name 'sublime_core (fivem)'
author 'SUBLiME'
version '0.1.0 (wip)'
repository 'https://github.com/sublime-framework-cfx/sublime_core-fivem'
description 'A new modular framework for FiveM'

shared_script '@sublime_core/import.lua'
server_script 'server.lua'	
Returning diffs count:	1	
OnSetText called with text:		
Returning diffs count:	0	
OnSetText called with text:	local t = { .j, .m, .z }
local t2 = { .j, .m, .z }	
Found table content:	 .j, .m, .z 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Processing item:	.z	
Found field with dot. Name:	z	
Added entry:	z = true	
Creating diff. Start:	10	End:	24	
New text:	{ j = true, m = true, z = true }	
Found table content:	 .j, .m, .z 	
Processing item:	.j	
Found field with dot. Name:	j	
Added entry:	j = true	
Processing item:	.m	
Found field with dot. Name:	m	
Added entry:	m = true	
Processing item:	.z	
Found field with dot. Name:	z	
Added entry:	z = true	
Creating diff. Start:	37	End:	51	
New text:	{ j = true, m = true, z = true }	
Returning diffs count:	2	
OnSetText called with text:	fx_version 'cerulean'
game 'common'
use_experimental_fxv2_oal 'yes'
lua54 'yes'

name 'oxmysql'
author 'Overextended'
version '2.11.2'
license 'LGPL-3.0-or-later'
repository 'https://github.com/overextended/oxmysql.git'
description 'FXServer to MySQL communication via node-mysql2'

dependencies {
    '/server:7290',
}

client_script 'ui.lua'
server_script 'dist/build.js'

files {
	'web/build/index.html',
	'web/build/**/*'
}

ui_page 'web/build/index.html'

provide 'mysql-async'
provide 'ghmattimysql'

convar_category 'OxMySQL' {
	'Configuration',
	{
		{ 'Connection string', 'mysql_connection_string', 'CV_STRING', 'mysql://user:password@localhost/database' },
		{ 'Debug', 'mysql_debug', 'CV_BOOL', 'false' }
	}
}
	
Found table content:	
    '/server:7290',
	
Processing item:	'/server:7290'	
Kept original item:	'/server:7290'	
Processing item:		
Found table content:	
	'web/build/index.html',
	'web/build/**/*'
	
Processing item:	'web/build/index.html'	
Kept original item:	'web/build/index.html'	
Processing item:	'web/build/**/*'	
Kept original item:	'web/build/**/*'	
Found table content:	
	'Configuration',
	{
		{ 'Connection string', 'mysql_connection_string', 'CV_STRING', 'mysql://user:password@localhost/database' 	
Processing item:	'Configuration'	
Kept original item:	'Configuration'	
Processing item:	{
		{ 'Connection string'	
Kept original item:	{
		{ 'Connection string'	
Processing item:	'mysql_connection_string'	
Kept original item:	'mysql_connection_string'	
Processing item:	'CV_STRING'	
Kept original item:	'CV_STRING'	
Processing item:	'mysql://user:password@localhost/database'	
Kept original item:	'mysql://user:password@localhost/database'	
Found table content:	 'Debug', 'mysql_debug', 'CV_BOOL', 'false' 	
Processing item:	'Debug'	
Kept original item:	'Debug'	
Processing item:	'mysql_debug'	
Kept original item:	'mysql_debug'	
Processing item:	'CV_BOOL'	
Kept original item:	'CV_BOOL'	
Processing item:	'false'	
Kept original item:	'false'	
Returning diffs count:	1	
OnSetText called with text:	local promise = promise
local Await = Citizen.Await
local GetCurrentResourceName = GetCurrentResourceName()
local GetResourceState = GetResourceState

local function await(fn, query, parameters)
	local p = promise.new()
	fn(nil, query, parameters, function(result, error)
		if error then
			return p:reject(error)
		end

		p:resolve(result)
	end, GetCurrentResourceName, true)
	return Await(p)
end

local type = type
local queryStore = {}

local function safeArgs(query, parameters, cb, transaction)
	local queryType = type(query)

	if queryType == 'number' then
		query = queryStore[query]
	elseif transaction then
		if queryType ~= 'table' then
			error(("First argument expected table, received '%s'"):format(query))
		end
	elseif queryType ~= 'string' then
		error(("First argument expected string, received '%s'"):format(query))
	end

	if parameters then
		local paramType = type(parameters)

		if paramType ~= 'table' and paramType ~= 'function' then
			error(("Second argument expected table or function, received '%s'"):format(parameters))
		end

		if paramType == 'function' or parameters.__cfx_functionReference then
			cb = parameters
			parameters = nil
		end
	end

	if cb and parameters then
		local cbType = type(cb)

		if cbType ~= 'function' and (cbType == 'table' and not cb.__cfx_functionReference) then
			error(("Third argument expected function, received '%s'"):format(cb))
		end
	end

	return query, parameters, cb
end

local oxmysql = exports.oxmysql

local mysql_method_mt = {
	__call = function(self, query, parameters, cb)
		query, parameters, cb = safeArgs(query, parameters, cb, self.method == 'transaction')
		return oxmysql[self.method](nil, query, parameters, cb, GetCurrentResourceName, false)
	end
}

local MySQL = setmetatable(MySQL or {}, {
	__index = function(_, index)
		return function(...)
			return oxmysql[index](nil, ...)
		end
	end
})

for _, method in pairs({
	'scalar', 'single', 'query', 'insert', 'update', 'prepare', 'transaction', 'rawExecute',
}) do
	MySQL[method] = setmetatable({
		method = method,
		await = function(query, parameters)
			query, parameters = safeArgs(query, parameters, nil, method == 'transaction')
			return await(oxmysql[method], query, parameters)
		end
	}, mysql_method_mt)
end

local alias = {
	fetchAll = 'query',
	fetchScalar = 'scalar',
	fetchSingle = 'single',
	insert = 'insert',
	execute = 'update',
	transaction = 'transaction',
	prepare = 'prepare'
}

local alias_mt = {
	__index = function(self, key)
		if alias[key] then
			local method = MySQL[alias[key]]
			MySQL.Async[key] = method
			MySQL.Sync[key] = method.await
			alias[key] = nil
			return self[key]
		end
	end
}

local function addStore(query, cb)
	assert(type(query) == 'string', 'The SQL Query must be a string')

	local storeN = #queryStore + 1
	queryStore[storeN] = query

	return cb and cb(storeN) or storeN
end

MySQL.Sync = setmetatable({ store = addStore }, alias_mt)
MySQL.Async = setmetatable({ store = addStore }, alias_mt)

local function onReady(cb)
	while GetResourceState('oxmysql') ~= 'started' do
		Wait(50)
	end

	oxmysql.awaitConnection()

	return cb and cb() or true
end

MySQL.ready = setmetatable({
	await = onReady
}, {
	__call = function(_, cb)
		Citizen.CreateThreadNow(function() onReady(cb) end)
	end,
})

_ENV.MySQL = MySQL
	
Found table content:		
Found table content:	
	__call = function(self, query, parameters, cb)
		query, parameters, cb = safeArgs(query, parameters, cb, self.method == 'transaction')
		return oxmysql[self.method](nil, query, parameters, cb, GetCurrentResourceName, false)
	end
	
Processing item:	__call = function(self	
Kept original item:	__call = function(self	
Processing item:	query	
Kept original item:	query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	cb)
		query	
Kept original item:	cb)
		query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	cb = safeArgs(query	
Kept original item:	cb = safeArgs(query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	cb	
Kept original item:	cb	
Processing item:	self.method == 'transaction')
		return oxmysql[self.method](nil	
Kept original item:	self.method == 'transaction')
		return oxmysql[self.method](nil	
Processing item:	query	
Kept original item:	query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	cb	
Kept original item:	cb	
Processing item:	GetCurrentResourceName	
Kept original item:	GetCurrentResourceName	
Processing item:	false)
	end	
Kept original item:	false)
	end	
Found table content:		
Found table content:	
	__index = function(_, index)
		return function(...)
			return oxmysql[index](nil, ...)
		end
	end
	
Processing item:	__index = function(_	
Kept original item:	__index = function(_	
Processing item:	index)
		return function(...)
			return oxmysql[index](nil	
Kept original item:	index)
		return function(...)
			return oxmysql[index](nil	
Processing item:	...)
		end
	end	
Found field with dot. Name:	
Found table content:	
	'scalar', 'single', 'query', 'insert', 'update', 'prepare', 'transaction', 'rawExecute',
	
Processing item:	'scalar'	
Kept original item:	'scalar'	
Processing item:	'single'	
Kept original item:	'single'	
Processing item:	'query'	
Kept original item:	'query'	
Processing item:	'insert'	
Kept original item:	'insert'	
Processing item:	'update'	
Kept original item:	'update'	
Processing item:	'prepare'	
Kept original item:	'prepare'	
Processing item:	'transaction'	
Kept original item:	'transaction'	
Processing item:	'rawExecute'	
Kept original item:	'rawExecute'	
Processing item:		
Found table content:	
		method = method,
		await = function(query, parameters)
			query, parameters = safeArgs(query, parameters, nil, method == 'transaction')
			return await(oxmysql[method], query, parameters)
		end
		
Processing item:	method = method	
Kept original item:	method = method	
Processing item:	await = function(query	
Kept original item:	await = function(query	
Processing item:	parameters)
			query	
Kept original item:	parameters)
			query	
Processing item:	parameters = safeArgs(query	
Kept original item:	parameters = safeArgs(query	
Processing item:	parameters	
Kept original item:	parameters	
Processing item:	nil	
Kept original item:	nil	
Processing item:	method == 'transaction')
			return await(oxmysql[method]	
Kept original item:	method == 'transaction')
			return await(oxmysql[method]	
Processing item:	query	
Kept original item:	query	
Processing item:	parameters)
		end	
Kept original item:	parameters)
		end	
Found table content:	
	fetchAll = 'query',
	fetchScalar = 'scalar',
	fetchSingle = 'single',
	insert = 'insert',
	execute = 'update',
	transaction = 'transaction',
	prepare = 'prepare'
	
Processing item:	fetchAll = 'query'	
Kept original item:	fetchAll = 'query'	
Processing item:	fetchScalar = 'scalar'	
Kept original item:	fetchScalar = 'scalar'	
Processing item:	fetchSingle = 'single'	
Kept original item:	fetchSingle = 'single'	
Processing item:	insert = 'insert'	
Kept original item:	insert = 'insert'	
Processing item:	execute = 'update'	
Kept original item:	execute = 'update'	
Processing item:	transaction = 'transaction'	
Kept original item:	transaction = 'transaction'	
Processing item:	prepare = 'prepare'	
Kept original item:	prepare = 'prepare'	
Found table content:	
	__index = function(self, key)
		if alias[key] then
			local method = MySQL[alias[key]]
			MySQL.Async[key] = method
			MySQL.Sync[key] = method.await
			alias[key] = nil
			return self[key]
		end
	end
	
Processing item:	__index = function(self	
Kept original item:	__index = function(self	
Processing item:	key)
		if alias[key] then
			local method = MySQL[alias[key]]
			MySQL.Async[key] = method
			MySQL.Sync[key] = method.await
			alias[key] = nil
			return self[key]
		end
	end	
Kept original item:	key)
		if alias[key] then
			local method = MySQL[alias[key]]
			MySQL.Async[key] = method
			MySQL.Sync[key] = method.await
			alias[key] = nil
			return self[key]
		end
	end	
Found table content:	 store = addStore 	
Processing item:	store = addStore	
Kept original item:	store = addStore	
Found table content:	 store = addStore 	
Processing item:	store = addStore	
Kept original item:	store = addStore	
Found table content:	
	await = onReady
	
Processing item:	await = onReady	
Kept original item:	await = onReady	
Found table content:	
	__call = function(_, cb)
		Citizen.CreateThreadNow(function() onReady(cb) end)
	end,
	
Processing item:	__call = function(_	
Kept original item:	__call = function(_	
Processing item:	cb)
		Citizen.CreateThreadNow(function() onReady(cb) end)
	end	
Kept original item:	cb)
		Citizen.CreateThreadNow(function() onReady(cb) end)
	end	
Processing item:		
Returning diffs count:	0	
OnSetText called with text:	RegisterNetEvent('oxmysql:openUi', function(data)
    SendNUIMessage({
        action = 'openUI',
        data = data
    })
    SetNuiFocus(true, true)
end)

RegisterNUICallback('exit', function(_, cb)
    cb(true)
    SetNuiFocus(false, false)
end)

RegisterNUICallback('fetchResource', function(data, cb)
    TriggerServerEvent('oxmysql:fetchResource', data)
    cb(true)
end)

RegisterNetEvent('oxmysql:loadResource', function(data)
    SendNUIMessage({
        action = 'loadResource',
        data = data
    })
end)	
Found table content:	
        action = 'openUI',
        data = data
    	
Processing item:	action = 'openUI'	
Kept original item:	action = 'openUI'	
Processing item:	data = data	
Kept original item:	data = data	
Found table content:	
        action = 'loadResource',
        data = data
    	
Processing item:	action = 'loadResource'	
Kept original item:	action = 'loadResource'	
Processing item:	data = data	
Kept original item:	data = data	
Returning diffs count:	0	
OnSetText called with text:	return {
    -- 'handlers', -- init handlers server & client
    'main', -- init main server & client
}	
Found table content:	
    -- 'handlers', -- init handlers server & client
    'main', -- init main server & client
	
Processing item:	-- 'handlers'	
Kept original item:	-- 'handlers'	
Processing item:	-- init handlers server & client
    'main'	
Kept original item:	-- init handlers server & client
    'main'	
Processing item:	-- init main server & client	
Kept original item:	-- init main server & client	
Returning diffs count:	0	
OnSetText called with text:	local sublime_core <const> = 'sublime_core'
local IsDuplicityVersion <const>, await <const> = IsDuplicityVersion, Citizen.Await
local LoadResourceFile <const> = LoadResourceFile
local GetResourceState <const> = GetResourceState
local GetGameName <const> = GetGameName
local GetCurrentResourceName <const>, AddEventHandler <const> = GetCurrentResourceName, AddEventHandler
local export = exports[sublime_core]
local service <const> = (IsDuplicityVersion() and 'server') or 'client'

-- local function FormatEvent(self, name, from)
--     return ("__sl__:%s:%s"):format(from or service, joaat(name))
-- end

if not _VERSION:find('5.4') then
    error("^1 Vous devez activer Lua 5.4 dans la resources où vous utilisez l'import, (lua54 'yes') dans votre fxmanifest!^0", 2)
end

if not GetResourceState(sublime_core):find('start') then
	error('^1sublime_core doit être lancé avant cette ressource!^0', 2)
end

local function LoadModule(self, index)
    local func, err
    local dir <const> = ('imports/%s'):format(index)
    local chunk <const> = LoadResourceFile(sublime_core, ('%s/%s.lua'):format(dir, service))
    local shared <const> = LoadResourceFile(sublime_core, ('%s/shared.lua'):format(dir))

    if chunk or shared then
        if shared then
            func, err = load(shared, ('@@%s/%s/%s'):format(sublime_core, index, 'shared'))
        else
            func, err = load(chunk, ('@@%s/%s/%s'):format(sublime_core, index, service))
        end

        if err then error(("Erreur pendant le chargement du module\n- Provenant de : %s\n- Modules : %s\n- Service : %s\n - Erreur : %s"):format(dir, index, service, err), 3) end

        local result = func()
        rawset(self, index, result)
        return self[index]
    end
end

local function CallModule(self, index, ...)
    local module = rawget(self, index)
    if not module then
        module = LoadModule(self, index)
        if not module then
            local function method(...)
                return export[index](nil, ...)
            end

            if not ... then
                self[index] = method
            end

            return method
        end
    end
    return module
end

sublime = setmetatable({
    name = sublime_core,
    service = service,
    game = GetGameName(),
    env = GetCurrentResourceName(),
    -- lang = GetConvar('sublime:locale', 'fr'),
    cache = service == 'client' and {},
    await = await,
},
{
    __index = CallModule,
    __call = CallModule
})

if sublime.service == 'client' then
    local player = {}
    setmetatable(player, {
        __index = function(self, key)
            AddEventHandler('sublime:player:set:'..key, function(value)
                self[key] = value
                return self[key]
            end)

            rawset(self, key, export:GetPlayer(key) or false)
            return self[key]
        end
    })

    _ENV.player = player
elseif sublime.service == 'server' then
    local MySQL = {}

    setmetatable(MySQL, {
        __index = function(self, key)
            local value = rawget(self, key)
            if not value then
                sublime.mysql()
                value = MySQL[key]
            end
            return value
        end
    })

    _ENV.MySQL = MySQL
end

require = sublime.require()	
Found table content:	
    name = sublime_core,
    service = service,
    game = GetGameName(),
    env = GetCurrentResourceName(),
    -- lang = GetConvar('sublime:locale', 'fr'),
    cache = service == 'client' and {	
Processing item:	name = sublime_core	
Kept original item:	name = sublime_core	
Processing item:	service = service	
Kept original item:	service = service	
Processing item:	game = GetGameName()	
Kept original item:	game = GetGameName()	
Processing item:	env = GetCurrentResourceName()	
Kept original item:	env = GetCurrentResourceName()	
Processing item:	-- lang = GetConvar('sublime:locale'	
Kept original item:	-- lang = GetConvar('sublime:locale'	
Processing item:	'fr')	
Kept original item:	'fr')	
Processing item:	cache = service == 'client' and {	
Kept original item:	cache = service == 'client' and {	
Found table content:	
    __index = CallModule,
    __call = CallModule
	
Processing item:	__index = CallModule	
Kept original item:	__index = CallModule	
Processing item:	__call = CallModule	
Kept original item:	__call = CallModule	
Found table content:		
Found table content:	
        __index = function(self, key)
            AddEventHandler('sublime:player:set:'..key, function(value)
                self[key] = value
                return self[key]
            end)

            rawset(self, key, export:GetPlayer(key) or false)
            return self[key]
        end
    	
Processing item:	__index = function(self	
Kept original item:	__index = function(self	
Processing item:	key)
            AddEventHandler('sublime:player:set:'..key	
Kept original item:	key)
            AddEventHandler('sublime:player:set:'..key	
Processing item:	function(value)
                self[key] = value
                return self[key]
            end)

            rawset(self	
Kept original item:	function(value)
                self[key] = value
                return self[key]
            end)

            rawset(self	
Processing item:	key	
Kept original item:	key	
Processing item:	export:GetPlayer(key) or false)
            return self[key]
        end	
Kept original item:	export:GetPlayer(key) or false)
            return self[key]
        end	
Found table content:		
Found table content:	
        __index = function(self, key)
            local value = rawget(self, key)
            if not value then
                sublime.mysql()
                value = MySQL[key]
            end
            return value
        end
    	
Processing item:	__index = function(self	
Kept original item:	__index = function(self	
Processing item:	key)
            local value = rawget(self	
Kept original item:	key)
            local value = rawget(self	
Processing item:	key)
            if not value then
                sublime.mysql()
                value = MySQL[key]
            end
            return value
        end	
Kept original item:	key)
            if not value then
                sublime.mysql()
                value = MySQL[key]
            end
            return value
        end	
Returning diffs count:	0	
OnSetText called with text:	---@todo [NEW] work in progress 0.0.2 to 0.1.0

-- loadscreen 'modules/loadscreen/client/index.html' -- loadscreen
-- loadscreen_manual_shutdown "yes" -- enable manual shutdown
-- loadscreen_cursor 'yes' -- enable cursor

fx_version 'cerulean'
game 'gta5'
lua54 'yes'
use_experimental_fxv2_oal 'yes'

name 'sublime_core (fivem)'
author 'SUBLiME'
version '0.1.0 (wip)'
repository 'https://github.com/sublime-framework-cfx/sublime_core-fivem'
description 'A new modular framework for FiveM'

files {
    'config/modules.lua',
    'imports/**/shared.lua',
    'imports/**/client.lua',
    'import.lua',
    -- 'modules/**/shared/**',
    'modules/**/client/**',
}

shared_scripts {
    'init.lua',
    'modules/init.lua',
}	
Found table content:	
    'config/modules.lua',
    'imports/**/shared.lua',
    'imports/**/client.lua',
    'import.lua',
    -- 'modules/**/shared/**',
    'modules/**/client/**',
	
Processing item:	'config/modules.lua'	
Kept original item:	'config/modules.lua'	
Processing item:	'imports/**/shared.lua'	
Kept original item:	'imports/**/shared.lua'	
Processing item:	'imports/**/client.lua'	
Kept original item:	'imports/**/client.lua'	
Processing item:	'import.lua'	
Kept original item:	'import.lua'	
Processing item:	-- 'modules/**/shared/**'	
Kept original item:	-- 'modules/**/shared/**'	
Processing item:	'modules/**/client/**'	
Kept original item:	'modules/**/client/**'	
Processing item:		
Found table content:	
    'init.lua',
    'modules/init.lua',
	
Processing item:	'init.lua'	
Kept original item:	'init.lua'	
Processing item:	'modules/init.lua'	
Kept original item:	'modules/init.lua'	
Processing item:		
Returning diffs count:	1	
OnSetText called with text:	local mt_pvt = {
    __metatable = 'private',
    __ext = 0,
    __pack = function() return '' end,
}

---@param obj table
---@return table
local function NewInstance(self, obj)
    if obj.private then
        setmetatable(obj.private, mt_pvt)
    end

    setmetatable(obj, self)

    if self.init then obj:init() end

    if obj.export then
        self.__export[obj.export] = obj
    end

    return obj
end

---@param name string
---@param super? table
---@param exportMethod? boolean
---@return table
function sublime.class(name, super, exportMethod)
    if not name then return end
    if super or exportMethod then
        local self = {
            __name = name,
            new = NewInstance
        }

        self.__index = self

        if exportMethod and not super then
            self.__exportMethod = {}
            self.__export = {}

            setmetatable(self, {
                __newindex = function(_, key, value)
                    rawset(_, key, value)
                    self.__exportMethod[key] = true
                end
            })

            exports('GetExportMethod', function()
                return self.__exportMethod
            end)

            exports('CallExportMethod', function(name, method, ...)
                local export <const> = self.__export[name]
                return export[method](export, ...)
            end)
        end

        return super and setmetatable(self, {
            __index = super,
            __newindex = function(_, key, value)
                rawset(_, key, value)
                if type(value) == 'function' then
                    self.__exportMethod[key] = true
                end
            end
        }) or self
    else
        local self = {
            __index = name
        }

        function self.new(obj)
            if obj.private then
                setmetatable(obj.private, mt_pvt)
            end

            if self.init then obj:init() end

            return setmetatable(obj, self)
        end

        return self
    end
end

return sublime.class	
Found table content:	
    __metatable = 'private',
    __ext = 0,
    __pack = function() return '' end,
	
Processing item:	__metatable = 'private'	
Kept original item:	__metatable = 'private'	
Processing item:	__ext = 0	
Kept original item:	__ext = 0	
Processing item:	__pack = function() return '' end	
Kept original item:	__pack = function() return '' end	
Processing item:		
Found table content:	
            __name = name,
            new = NewInstance
        	
Processing item:	__name = name	
Kept original item:	__name = name	
Processing item:	new = NewInstance	
Kept original item:	new = NewInstance	
Found table content:		
Found table content:		
Found table content:	
                __newindex = function(_, key, value)
                    rawset(_, key, value)
                    self.__exportMethod[key] = true
                end
            	
Processing item:	__newindex = function(_	
Kept original item:	__newindex = function(_	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
                    rawset(_	
Kept original item:	value)
                    rawset(_	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
                    self.__exportMethod[key] = true
                end	
Kept original item:	value)
                    self.__exportMethod[key] = true
                end	
Found table content:	
            __index = super,
            __newindex = function(_, key, value)
                rawset(_, key, value)
                if type(value) == 'function' then
                    self.__exportMethod[key] = true
                end
            end
        	
Processing item:	__index = super	
Kept original item:	__index = super	
Processing item:	__newindex = function(_	
Kept original item:	__newindex = function(_	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
                rawset(_	
Kept original item:	value)
                rawset(_	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
                if type(value) == 'function' then
                    self.__exportMethod[key] = true
                end
            end	
Kept original item:	value)
                if type(value) == 'function' then
                    self.__exportMethod[key] = true
                end
            end	
Found table content:	
            __index = name
        	
Processing item:	__index = name	
Kept original item:	__index = name	
Returning diffs count:	0	
OnSetText called with text:	---@param export string 'resourceName.methodName'
---@param ... any
---@return void | any
local function Exports(_, export, ...)
    local resourceName <const> = export:match('(.+)%..+')
    local methodName <const> = export:match('.+%.(.+)')
    return exports[resourceName][methodName](nil, ...)
end

local ExportMethod, MyClassExport = {}, {}
sublime.exports = setmetatable({}, {
    __call = Exports
})


---@param resource string resource name you have use supv.class with exportable on true
---@param name string export identifier name
---@param prototype? table if you want add prototype
---@return table
function sublime.exports.class(resource, name, prototype)
    ExportMethod[name] = {}
    setmetatable(ExportMethod[name], {
        __index = function(_, index)
            ExportMethod[name] = exports[resource]:GetExportMethod(index)
            return ExportMethod[name][index]
        end
    })

    MyClassExport[name] = {}
    local Class = MyClassExport[name]
    function Class:__index(index)
        local method = MyClassExport[name][index]

        if method then
            return function(...)
                return method(self, ...)
            end
        end

        local export = ExportMethod[name][index]

        if export then
            return function(...)
                return exports[resource]:CallExportMethod(name, index, ...)
            end
        end
    end

    return setmetatable(prototype or {}, Class)
end

return sublime.exports	
Found table content:		
Found table content:		
Found table content:		
Found table content:	
    __call = Exports
	
Processing item:	__call = Exports	
Kept original item:	__call = Exports	
Found table content:		
Found table content:	
        __index = function(_, index)
            ExportMethod[name] = exports[resource]:GetExportMethod(index)
            return ExportMethod[name][index]
        end
    	
Processing item:	__index = function(_	
Kept original item:	__index = function(_	
Processing item:	index)
            ExportMethod[name] = exports[resource]:GetExportMethod(index)
            return ExportMethod[name][index]
        end	
Kept original item:	index)
            ExportMethod[name] = exports[resource]:GetExportMethod(index)
            return ExportMethod[name][index]
        end	
Found table content:		
Found table content:		
Returning diffs count:	0	
OnSetText called with text:	local PlayerExports, PlayerObject = {}, {}
setmetatable(PlayerExports, {
    __index = function(_, index)
        print(index, 'index meta')
        PlayerExports = sublime.GetPlayerExports()
        return PlayerExports[index]
    end
})

function sublime.GetPlayerObject(source)
    local player <const> = sublime.GetPlayerData(source)
    if not player then return end
    return setmetatable(player, PlayerObject)
end

function PlayerObject:__index(index)
    local method = PlayerObject[index]
    print(method, index)
    if method then
        return function(...)
            return method(self, ...)
        end
    end

    local export = PlayerExports[index]

    if export then
        return function(...)
            return sublime.CallPlayerMethod(self.source, index, ...)
        end
    end
end

function PlayerObject:test()
    return self.source .. ' from test ' .. self.getName()
end

return sublime.GetPlayerObject	
Found table content:		
Found table content:		
Found table content:	
    __index = function(_, index)
        print(index, 'index meta')
        PlayerExports = sublime.GetPlayerExports()
        return PlayerExports[index]
    end
	
Processing item:	__index = function(_	
Kept original item:	__index = function(_	
Processing item:	index)
        print(index	
Kept original item:	index)
        print(index	
Processing item:	'index meta')
        PlayerExports = sublime.GetPlayerExports()
        return PlayerExports[index]
    end	
Kept original item:	'index meta')
        PlayerExports = sublime.GetPlayerExports()
        return PlayerExports[index]
    end	
Returning diffs count:	0	
OnSetText called with text:	local function On(_, name, cb)
    AddEventHandler(name, cb)
end

sublime.on = setmetatable({}, {
    __call = On
})

function sublime.on.player(key, cb)
    AddEventHandler('sublime:cache:set:'..key, cb)
end

function sublime.on.net(key, cb)
    RegisterNetEvent(key, cb)
end	
Found table content:		
Found table content:	
    __call = On
	
Processing item:	__call = On	
Kept original item:	__call = On	
Returning diffs count:	0	
OnSetText called with text:	local LoadResourceFile <const>, load <const> = LoadResourceFile, load

function sublime.mysql()
    local file = 'lib/MySQL.lua'
	local import = LoadResourceFile('oxmysql', file)
	local func, err = load(import, ('@@%s/%s'):format('oxmysql', file))
	if not func or err then
		return error(err or ("unable to load module '%s'"):format(file), 3)
	end

	func()
end

return sublime.mysql	
Returning diffs count:	0	
OnSetText called with text:	-- credit: ox_lib <https://github.com/overextended/ox_lib/blob/master/imports/require/shared.lua>
if lib then 
    sublime.require = lib.require
    return sublime.require 
end

local loaded = {}

package = {
    loaded = setmetatable({}, {
        __index = loaded,
        __newindex = function()  end,
        __metatable = false,
    }),
    path = './?.lua;'
}

local _require = require

---Loads the given module inside the current resource, returning any values returned by the file or `true` when `nil`.
---@param modname string
---@return unknown?
function sublime.require(modname)
    if type(modname) ~= 'string' then return end

    local module = loaded[modname]

    if not module then
        if module == false then
            error(("^1circular-dependency occurred when loading module '%s'^0"):format(modname), 2)
        end

        if not modname:find('^@') then
            local success, result = pcall(_require, modname)

            if success then
                loaded[modname] = result
                return result
            end

            local modpath = modname:gsub('%.', '/')

            for path in package.path:gmatch('[^;]+') do
                local scriptPath = path:gsub('?', modpath):gsub('%.+%/+', '')
                local resourceFile = LoadResourceFile(sublime.env, scriptPath)

                if resourceFile then
                    loaded[modname] = false
                    scriptPath = ('@@%s/%s'):format(sublime.env, scriptPath)

                    local chunk, err = load(resourceFile, scriptPath)

                    if err or not chunk then
                        loaded[modname] = nil
                        return error(err or ("unable to load module '%s'"):format(modname), 3)
                    end

                    module = chunk(modname) or true
                    loaded[modname] = module

                    return module
                end
            end
        else
            local rss, dir = modname:gsub('%.', '/'):match('^(.-)/(.+)$')

            if not rss or not dir then return error('Invalid path format: '..modname, 2) end
            rss, dir = rss:gsub('^@', ''), dir..'.lua'
            local chunk = LoadResourceFile(rss, dir)

            if chunk then
                local scriptPath = ('@@%s/%s'):format(rss, dir)
                local func, err = load(chunk, scriptPath)

                if err or not func then
                    return error(err or ("unable to load module '%s'"):format(modname), 2)
                end

                module = func(modname) or true
                loaded[modname] = module

                return module
            end
        end

        return error(("module '%s' not found"):format(modname), 2)
    end

    return module
end

return sublime.require

--[[ old method, not working with zones module because need require (glm) to calculate vector
    
local moduleLoaded = {}

local function load_module(path)
    if moduleLoaded[path] then
        return moduleLoaded[path]
    end

    local module_path = ("%s.lua"):format(path)
    local module_file = LoadResourceFile(GetCurrentResourceName(), module_path)
    if not module_file then
        error("Impossible de chargé le module : "..path)
    end

    moduleLoaded[path] = load(module_file)()
    return moduleLoaded[path]
end

local function call_module(path)
    path = path:gsub('%.', '/')
    local module = load_module(path)
    if not module then
        return error("Le module n'a pas charger : "..path)
    end
    return module
end

return {
    load = call_module
}
--]]	
Found table content:		
Found table content:	
    loaded = setmetatable({	
Processing item:	loaded = setmetatable({	
Kept original item:	loaded = setmetatable({	
Found table content:	
        __index = loaded,
        __newindex = function()  end,
        __metatable = false,
    	
Processing item:	__index = loaded	
Kept original item:	__index = loaded	
Processing item:	__newindex = function()  end	
Kept original item:	__newindex = function()  end	
Processing item:	__metatable = false	
Kept original item:	__metatable = false	
Processing item:		
Found table content:		
Found table content:	
    load = call_module
	
Processing item:	load = call_module	
Kept original item:	load = call_module	
Returning diffs count:	1	
OnSetText called with text:	local LoadResourceFile <const>, IsDuplicityVersion <const>, await <const> = LoadResourceFile, IsDuplicityVersion, Citizen.Await
local sublime_core <const>, service <const> = 'sublime_core', (IsDuplicityVersion() and 'server') or 'client'

---@param name string
---@param from? string<'client' | 'server'> default is sl.service
---@return string
-- local function FormatEvent(self, name, from)
--     return ("__sl__:%s:%s"):format(from or self.service, joaat(name))
-- end

sublime = setmetatable({
    service = service, ---@type string<'client' | 'server'>
    name = sublime_core, ---@type string<'sublime_core'>
    env = sublime_core, ---@type string<'resource_name?'>
    -- hashEvent = FormatEvent,
    await = await,
    lang = GetConvar('sublime:locale', 'fr') ---@type string<'fr' | 'en' | unknown>
}, {
    __newindex = function(self, name, value)
        rawset(self, name, value)
        if type(value) == 'function' then
            exports(name, value)
        end
    end
})

local loaded = {}
package = {
    loaded = setmetatable({}, {
        __index = loaded,
        __newindex = function() end,
        __metatable = false,
    }),
    path = './?.lua;'
}

local _require = require
function require(modname)
    local module = loaded[modname]

    if not module then
        if module == false then
            error(("^1circular-dependency occurred when loading module '%s'^0"):format(modname), 2)
        end

        local success, result = pcall(_require, modname)

        if success then
            loaded[modname] = result
            return result
        end

        local modpath = modname:gsub('%.', '/')
        local paths = { string.strsplit(';', package.path) }
        for i = 1, #paths do
            local scriptPath = paths[i]:gsub('%?', modpath):gsub('%.+%/+', '')
            local resourceFile = LoadResourceFile(sublime_core, scriptPath)
            if resourceFile then
                loaded[modname] = false
                scriptPath = ('@@%s/%s'):format(sublime_core, scriptPath)

                local chunk, err = load(resourceFile, scriptPath)

                if err or not chunk then
                    loaded[modname] = nil
                    return error(err or ("unable to load module '%s'"):format(modname), 3)
                end

                module = chunk(modname) or true
                loaded[modname] = module

                return module
            end
        end

        return error(("module '%s' not found"):format(modname), 2)
    end

    return module
end

-- require('imports.locales.shared').init() ---@load translation

if sublime.service == 'server' then
    sublime.players = {}

    print([[
^6#####################################################################################
^6#^2                _       _   _                                                      ^6#
^6#^2               | |     | | (_)                                                     ^6#
^6#^2  ___   _   _  | |__   | |  _   _ __ ___     ___        ___    ___    _ __    ___  ^6#
^6#^2 / __| | | | | | '_ \  | | | | | '_ ` _ \   / _ \      / __|  / _ \  | '__|  / _ \ ^6#
^6#^2 \__ \ | |_| | | |_) | | | | | | | | | | | |  __/^7  _ ^2 | (__  | (_) | | |    |  __/ ^6#
^6#^2 |___/  \__,_| |_.__/  |_| |_| |_| |_| |_|  \___|^7 (_)^2  \___|  \___/  |_|     \___| ^6#
^6#                                                                                   ^6#
^6#^2        ^7Github: ^4https://github.com/sublime-framework-cfx/sublime_core-fivem        ^6#
^6#####################################################################################
]])
    -- require('imports.version.server').check('github', nil, 500) ---@load version check && check update
    -- require('imports.mysql.server').init() ---@load oxmysql
end	
Found table content:	
    service = service, ---@type string<'client' | 'server'>
    name = sublime_core, ---@type string<'sublime_core'>
    env = sublime_core, ---@type string<'resource_name?'>
    -- hashEvent = FormatEvent,
    await = await,
    lang = GetConvar('sublime:locale', 'fr') ---@type string<'fr' | 'en' | unknown>
	
Processing item:	service = service	
Kept original item:	service = service	
Processing item:	---@type string<'client' | 'server'>
    name = sublime_core	
Kept original item:	---@type string<'client' | 'server'>
    name = sublime_core	
Processing item:	---@type string<'sublime_core'>
    env = sublime_core	
Kept original item:	---@type string<'sublime_core'>
    env = sublime_core	
Processing item:	---@type string<'resource_name?'>
    -- hashEvent = FormatEvent	
Kept original item:	---@type string<'resource_name?'>
    -- hashEvent = FormatEvent	
Processing item:	await = await	
Kept original item:	await = await	
Processing item:	lang = GetConvar('sublime:locale'	
Kept original item:	lang = GetConvar('sublime:locale'	
Processing item:	'fr') ---@type string<'fr' | 'en' | unknown>	
Kept original item:	'fr') ---@type string<'fr' | 'en' | unknown>	
Found table content:	
    __newindex = function(self, name, value)
        rawset(self, name, value)
        if type(value) == 'function' then
            exports(name, value)
        end
    end
	
Processing item:	__newindex = function(self	
Kept original item:	__newindex = function(self	
Processing item:	name	
Kept original item:	name	
Processing item:	value)
        rawset(self	
Kept original item:	value)
        rawset(self	
Processing item:	name	
Kept original item:	name	
Processing item:	value)
        if type(value) == 'function' then
            exports(name	
Kept original item:	value)
        if type(value) == 'function' then
            exports(name	
Processing item:	value)
        end
    end	
Kept original item:	value)
        end
    end	
Found table content:		
Found table content:	
    loaded = setmetatable({	
Processing item:	loaded = setmetatable({	
Kept original item:	loaded = setmetatable({	
Found table content:	
        __index = loaded,
        __newindex = function() end,
        __metatable = false,
    	
Processing item:	__index = loaded	
Kept original item:	__index = loaded	
Processing item:	__newindex = function() end	
Kept original item:	__newindex = function() end	
Processing item:	__metatable = false	
Kept original item:	__metatable = false	
Processing item:		
Found table content:	 string.strsplit(';', package.path) 	
Processing item:	string.strsplit(';'	
Kept original item:	string.strsplit(';'	
Processing item:	package.path)	
Kept original item:	package.path)	
Found table content:		
Returning diffs count:	1	
OnSetText called with text:	local mt_pvt, class = {
    __metatable = 'private',
    __ext = 0,
    __pack = function() return '' end,
}, {}

---@param prototype table?
---@return { new: fun(obj): table }
function class.new(prototype)
    local self = { __index = prototype }

    function self.new(obj)
        if obj.private then
            setmetatable(obj.private, mt_pvt)
        end

        return setmetatable(obj, self)
    end

    return self
end

return class	
Found table content:	
    __metatable = 'private',
    __ext = 0,
    __pack = function() return '' end,
	
Processing item:	__metatable = 'private'	
Kept original item:	__metatable = 'private'	
Processing item:	__ext = 0	
Kept original item:	__ext = 0	
Processing item:	__pack = function() return '' end	
Kept original item:	__pack = function() return '' end	
Processing item:		
Found table content:		
Found table content:	 new: fun(obj): table 	
Processing item:	new: fun(obj): table	
Kept original item:	new: fun(obj): table	
Found table content:	 __index = prototype 	
Processing item:	__index = prototype	
Kept original item:	__index = prototype	
Returning diffs count:	0	
OnSetText called with text:	if not sublime or not sublime.service then return error("Cannot load init modules", 3) end
local folders = require 'config.modules'

for i = 1, #folders do
    local folder <const> = folders[i]
    local files <const> = require(('modules.%s.index'):format(folder))

    if files.shared then
        local t <const> = files.shared
        for j = 1, #t do
            local file <const> = t[j]
            require(('modules.%s.%s.%s'):format(folder, 'shared', file))
        end
    end

    if files[sublime.service] then
        local t <const> = files[sublime.service]
        for j = 1, #t do
            local file <const> = t[j]
            require(('modules.%s.%s.%s'):format(folder, sublime.service, file))
        end
    end
end

folders = nil	
Returning diffs count:	0	
OnSetText called with text:	local player = {}

---@param key string
---@param value any
---@param force? 'ignore' | boolean
function player:set(key, value, force)
    if not self[key] or self[key] ~= value or force then
        self[key] = value
        if force and force == 'ignore' then return end
        TriggerEvent('sublime:player:set:'..key, value)
    end
end

---@param coords vec3
---@return number
function player:distance(coords)
    return #(self.coords - coords)
end

CreateThread(function()
    player:set('id', PlayerId())
    player:set('serverid', GetPlayerServerId(player.id))

    while true do
        player:set('ped', PlayerPedId())
        player:set('coords', GetEntityCoords(player.ped), 'ignore')
        player:set('vec4', vec4(player.coords.x, player.coords.y, player.coords.z, GetEntityHeading(player.ped)), 'ignore')

        local hasWeapon <const>, weaponHash <const> = GetCurrentPedWeapon(player.ped, true)
        player:set('weapon', hasWeapon and weaponHash or false)

        local vehicle <const> = GetVehiclePedIsIn(player.ped, false)
        if vehicle > 0 then
            player:set('vehicle', vehicle)

            if not player.seat or GetPedInVehicleSeat(vehicle, player.seat) ~= player.ped then
                for i = -1, GetVehicleMaxNumberOfPassengers(vehicle) - 1 do
                    if GetPedInVehicleSeat(vehicle, i) == player.ped then
                        player:set('seat', i)
                        break
                    end
                end
            end
        else
            player:set('vehicle', false)
            player:set('seat', false)
        end
    
        Wait(500)
    end
end)

---@param key string
---@return any
function sublime.GetPlayer(key)
    return player[key] or key == 'vehicle' and false or false
end

_ENV.player = player	
Found table content:		
Returning diffs count:	0	
OnSetText called with text:	return {
    client = {
        'player',
    },

    server = {
        'players',
    },
}	
Found table content:	
    client = {
        'player',
    	
Processing item:	client = {
        'player'	
Kept original item:	client = {
        'player'	
Processing item:		
Found table content:	
        'players',
    	
Processing item:	'players'	
Kept original item:	'players'	
Processing item:		
Returning diffs count:	0	
OnSetText called with text:	GlobalState.playersCount = 0
local PlayerExports = {}
local PlayerObject = setmetatable({}, {
    __newindex = function(self, key, value)
        rawset(self, key, value)
        print(key, value)
        PlayerExports[key] = true
    end
})

function sublime.GetPlayerExports()
    return PlayerExports
end

---@param id integer
---@param method string
---@param ... unknown?
---@return unknown?
function sublime.CallPlayerMethod(id, method, ...)
    print(id, method)
    local player = sublime.GetPlayerData(id)
    return PlayerObject[method](player, ...)
end

---@param source integer
function sublime.GetPlayerData(source)
    return sublime.players[source]
end

function sublime.RemovePlayerObject(source)
    local player = sublime.players[source]
    if player then
        sublime.players[source] = nil
        player = nil
        collectgarbage()
        TriggerEvent('sublime:player:remove', source)
    end
end

function PlayerObject:init()
    print(self.source, 'was initialized')
end

function PlayerObject:setName(name)
    self.private.name = name
end

function PlayerObject:getName()
    return self.private.name
end

---@param key string support nested keys separated by dots '.', exemple: 'metadata.name'
---@return unknown?
function PlayerObject:get(key)
    assert(key and type(key) == 'string', 'Invalid key: '..key)

    if key:find('.') then
        local keys <const> = {('.'):strsplit(key)}
        local value = self.private
        for i = 1, #keys do
            local key <const> = keys[i]
            value = value[key]
            if not value then
                return nil
            end
        end

        return value
    end

    return self.private[key]
end

local class <const> = require 'modules.handlers.shared.class'
return class.new(PlayerObject)

-----------------
--[[
function PlayerObject:init()
    GlobalState.playersCount += 1
end

function PlayerObject:__gc() -- destructor
    GlobalState.playersCount -= 1
end

function PlayerObject:save()
    -- save player in database
    return self
end

function PlayerObject:set(key, value, replicated)
    local _key, count = key:gsub('%W', '')

    if count > 0 then
        warn('Invalid key: '..key)
        key = _key
    end

    self.private.metadata[key] = value

    if replicated then
        --TriggerClientEvent('sublime:player:set', self.source, key, value)
    end
end

function PlayerObject:get(key)
    local metadata <const> = self.private.metadata
    if not key then return metadata end

    local _key, count = key:gsub('%W', '')

    if count > 0 then
        warn('Invalid key: '..key)
        key = _key
    end

    return metadata[key]
end

function PlayerObject:setName(name)
    self.private.name = name
    return self
end

function PlayerObject:getName()
    return self.private.name
end

---@param source integer
---@param data table
---@return table
function sublime.CreatePlayerObject(source, data)
    if sublime.players[source] then
        return sublime.players[source]
    end

    data.metadata = data.metadata or {}
    data.group = data.group or 'user'
    data.databaseId = data.databaseId or 0 ---@todo: get from database id
    data.licenses = data.licenses or {} ---@todo: use license manager

    local object = { 
        source = source,
        export = 'player.'..source,
        private = data
    }

    local player <const> = PlayerObject:new(object)
    sublime.players[source] = player
    --sublime.playersDatabaseId[player.private.databaseId] = source

    return player
end

---@param source integer
function sublime.RemovePlayerObject(source)
    local player = sublime.players[source]
    if player then
        sublime.players[source] = nil
        player = nil
        collectgarbage()
        TriggerEvent('sublime:player:remove', source)
    end
end

---@param source integer
function sublime.GetPlayerData(source)
    return sublime.players[source]
end]]	
Found table content:		
Found table content:		
Found table content:	
    __newindex = function(self, key, value)
        rawset(self, key, value)
        print(key, value)
        PlayerExports[key] = true
    end
	
Processing item:	__newindex = function(self	
Kept original item:	__newindex = function(self	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
        rawset(self	
Kept original item:	value)
        rawset(self	
Processing item:	key	
Kept original item:	key	
Processing item:	value)
        print(key	
Kept original item:	value)
        print(key	
Processing item:	value)
        PlayerExports[key] = true
    end	
Kept original item:	value)
        PlayerExports[key] = true
    end	
Found table content:	('.'):strsplit(key)	
Processing item:	('.'):strsplit(key)	
Kept original item:	('.'):strsplit(key)	
Found table content:		
Found table content:		
Found table content:	 
        source = source,
        export = 'player.'..source,
        private = data
    	
Processing item:	source = source	
Kept original item:	source = source	
Processing item:	export = 'player.'..source	
Kept original item:	export = 'player.'..source	
Processing item:	private = data	
Kept original item:	private = data	
Returning diffs count:	0	
OnSetText called with text:	local PlayerClass = require 'modules.main.server.class.player'

---@param source integer
---@param data table
---@return table
function sublime.CreatePlayerObject(source, data)
    if sublime.players[source] then
        return sublime.players[source]
    end

    data.metadata = data.metadata or {}
    data.group = data.group or 'user'
    data.databaseId = data.databaseId or 0
    data.licenses = data.licenses or {}

    local object = { 
        source = source,
        private = data
    }

    local player <const> = PlayerClass.new(object)
    sublime.players[source] = player
    --sublime.playersDatabaseId[player.private.databaseId] = source

    return player
end

sublime.CreatePlayerObject(1, { name = 'John', age = 20 })
local p = sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })

p:init()


RegisterCommand('hh', function()
    local player2 = sublime.GetPlayerData(2)
    print(player2?.source)
    if not player2 then
        print('Player not found')
        return
    end

    print(player2:getName())
end)	
Found table content:		
Found table content:		
Found table content:	 
        source = source,
        private = data
    	
Processing item:	source = source	
Kept original item:	source = source	
Processing item:	private = data	
Kept original item:	private = data	
Found table content:	 name = 'John', age = 20 	
Processing item:	name = 'John'	
Kept original item:	name = 'John'	
Processing item:	age = 20	
Kept original item:	age = 20	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Returning diffs count:	1	
OnSetText called with text:	--This empty file causes the scheduler.lua to load clientside
--scheduler.lua when loaded inside the sessionmanager resource currently manages remote callbacks.
--Without this, callbacks will only work server->client and not client->server.	
Returning diffs count:	0	
OnSetText called with text:	-- This resource is part of the default Cfx.re asset pack (cfx-server-data)
-- Altering or recreating for local use only is strongly discouraged.

version '1.0.0'
author 'Cfx.re <root@cfx.re>'
description 'Handles the "host lock" for non-OneSync servers. Do not disable.'
repository 'https://github.com/citizenfx/cfx-server-data'

fx_version 'cerulean'
games { 'gta4', 'gta5' }

server_script 'server/host_lock.lua'
client_script 'client/empty.lua'	
Found table content:	 'gta4', 'gta5' 	
Processing item:	'gta4'	
Kept original item:	'gta4'	
Processing item:	'gta5'	
Kept original item:	'gta5'	
Returning diffs count:	1	
OnSetText called with text:	-- whitelist c2s events
RegisterServerEvent('hostingSession')
RegisterServerEvent('hostedSession')

-- event handler for pre-session 'acquire'
local currentHosting
local hostReleaseCallbacks = {}

-- TODO: add a timeout for the hosting lock to be held
-- TODO: add checks for 'fraudulent' conflict cases of hosting attempts (typically whenever the host can not be reached)
AddEventHandler('hostingSession', function()
    -- if the lock is currently held, tell the client to await further instruction
    if currentHosting then
        TriggerClientEvent('sessionHostResult', source, 'wait')

        -- register a callback for when the lock is freed
        table.insert(hostReleaseCallbacks, function()
            TriggerClientEvent('sessionHostResult', source, 'free')
        end)

        return
    end

    -- if the current host was last contacted less than a second ago
    if GetHostId() then
        if GetPlayerLastMsg(GetHostId()) < 1000 then
            TriggerClientEvent('sessionHostResult', source, 'conflict')

            return
        end
    end

    hostReleaseCallbacks = {}

    currentHosting = source

    TriggerClientEvent('sessionHostResult', source, 'go')

    -- set a timeout of 5 seconds
    SetTimeout(5000, function()
        if not currentHosting then
            return
        end

        currentHosting = nil

        for _, cb in ipairs(hostReleaseCallbacks) do
            cb()
        end
    end)
end)

AddEventHandler('hostedSession', function()
    -- check if the client is the original locker
    if currentHosting ~= source then
        -- TODO: drop client as they're clearly lying
        print(currentHosting, '~=', source)
        return
    end

    -- free the host lock (call callbacks and remove the lock value)
    for _, cb in ipairs(hostReleaseCallbacks) do
        cb()
    end

    currentHosting = nil
end)

EnableEnhancedHostSupport(true)	
Found table content:		
Found table content:		
Returning diffs count:	0	
OnSetText called with text:	-- This resource is part of the default Cfx.re asset pack (cfx-server-data)
-- Altering or recreating for local use only is strongly discouraged.

version '1.0.0'
author 'Cfx.re <root@cfx.re>'
description 'Builds resources with webpack. To learn more: https://webpack.js.org'
repository 'https://github.com/citizenfx/cfx-server-data'

dependency 'yarn'
server_script 'webpack_builder.js'

fx_version 'adamant'
game 'common'
	
Returning diffs count:	1	
OnSetText called with text:	-- This resource is part of the default Cfx.re asset pack (cfx-server-data)
-- Altering or recreating for local use only is strongly discouraged.

version '1.0.0'
author 'Cfx.re <root@cfx.re>'
description 'Builds resources with yarn. To learn more: https://classic.yarnpkg.com'
repository 'https://github.com/citizenfx/cfx-server-data'

fx_version 'adamant'
game 'common'

server_script 'yarn_builder.js'
	
Returning diffs count:	1	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,,  }
    print(c?.name?.T)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,,  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	756	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	4	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,  }
    print(c?.name?.T)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	755	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	4	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , ,,  }
    print(c?.name?.T)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , ,,  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	754	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	4	
OnSetText called with text:	print(sublime.env .. 'loaded!')

RegisterCommand('gg', function(source)
    local player = sublime.GetPlayerObject(2)
    if not player then return end
    for k, v in pairs(player) do
        print(k, v)
    end
    print('1.1', player.name, player.private?.name)
    print('1.1', player.source)
    print('1.1', player.getName())
    print('1.1', player.test())
end)

RegisterCommand('ggd', function()
    sublime.RemovePlayerObject(2)
end)


RegisterCommand('ct', function()
    sublime.CreatePlayerObject(2, { name = 'Doe', age = 10 })
end)

print('10', sublime.GetPlayerObject(2))

local function tt()
    local p = {
        name = 'Doe',
    }

    local c = { .name, .age, .test, .private, .source, .getName, , , ,  }
    print(c?.name?.T)

    print(json.encode(c))

    c['name'] = p.name
    GetEntityCoords(PlayerPedId())

    print(json.encode(c))
    local t = ''
end

tt()	
Found table content:	 name = 'Doe', age = 10 	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:	age = 10	
Kept original item:	age = 10	
Found table content:	
        name = 'Doe',
    	
Processing item:	name = 'Doe'	
Kept original item:	name = 'Doe'	
Processing item:		
Found table content:	 .name, .age, .test, .private, .source, .getName, , , ,  	
Processing item:	.name	
Found field with dot. Name:	name	
Added entry:	name = true	
Processing item:	.age	
Found field with dot. Name:	age	
Added entry:	age = true	
Processing item:	.test	
Found field with dot. Name:	test	
Added entry:	test = true	
Processing item:	.private	
Found field with dot. Name:	private	
Added entry:	private = true	
Processing item:	.source	
Found field with dot. Name:	source	
Added entry:	source = true	
Processing item:	.getName	
Found field with dot. Name:	getName	
Added entry:	getName = true	
Creating diff. Start:	696	End:	755	
New text:	{ name = true, age = true, test = true, private = true, source = true, getName = true }	
Returning diffs count:	4	
